
Disco_F7308_IC_OC_PLL_v3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008de4  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000040c  08008fc8  08008fc8  00018fc8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080093d4  080093d4  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  080093d4  080093d4  000193d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080093dc  080093dc  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080093dc  080093dc  000193dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080093e0  080093e0  000193e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  080093e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001d8  200001dc  080095c0  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003b4  080095c0  000203b4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010a88  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002123  00000000  00000000  00030c94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e20  00000000  00000000  00032db8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d48  00000000  00000000  00033bd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023ffb  00000000  00000000  00034920  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010f8a  00000000  00000000  0005891b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e0b5e  00000000  00000000  000698a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0014a403  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004c38  00000000  00000000  0014a454  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001dc 	.word	0x200001dc
 80001fc:	00000000 	.word	0x00000000
 8000200:	08008fac 	.word	0x08008fac

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001e0 	.word	0x200001e0
 800021c:	08008fac 	.word	0x08008fac

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b974 	b.w	8000f98 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f806 	bl	8000cc8 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__udivmoddi4>:
 8000cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ccc:	9d08      	ldr	r5, [sp, #32]
 8000cce:	4604      	mov	r4, r0
 8000cd0:	468e      	mov	lr, r1
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d14d      	bne.n	8000d72 <__udivmoddi4+0xaa>
 8000cd6:	428a      	cmp	r2, r1
 8000cd8:	4694      	mov	ip, r2
 8000cda:	d969      	bls.n	8000db0 <__udivmoddi4+0xe8>
 8000cdc:	fab2 f282 	clz	r2, r2
 8000ce0:	b152      	cbz	r2, 8000cf8 <__udivmoddi4+0x30>
 8000ce2:	fa01 f302 	lsl.w	r3, r1, r2
 8000ce6:	f1c2 0120 	rsb	r1, r2, #32
 8000cea:	fa20 f101 	lsr.w	r1, r0, r1
 8000cee:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cf2:	ea41 0e03 	orr.w	lr, r1, r3
 8000cf6:	4094      	lsls	r4, r2
 8000cf8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cfc:	0c21      	lsrs	r1, r4, #16
 8000cfe:	fbbe f6f8 	udiv	r6, lr, r8
 8000d02:	fa1f f78c 	uxth.w	r7, ip
 8000d06:	fb08 e316 	mls	r3, r8, r6, lr
 8000d0a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d0e:	fb06 f107 	mul.w	r1, r6, r7
 8000d12:	4299      	cmp	r1, r3
 8000d14:	d90a      	bls.n	8000d2c <__udivmoddi4+0x64>
 8000d16:	eb1c 0303 	adds.w	r3, ip, r3
 8000d1a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d1e:	f080 811f 	bcs.w	8000f60 <__udivmoddi4+0x298>
 8000d22:	4299      	cmp	r1, r3
 8000d24:	f240 811c 	bls.w	8000f60 <__udivmoddi4+0x298>
 8000d28:	3e02      	subs	r6, #2
 8000d2a:	4463      	add	r3, ip
 8000d2c:	1a5b      	subs	r3, r3, r1
 8000d2e:	b2a4      	uxth	r4, r4
 8000d30:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d34:	fb08 3310 	mls	r3, r8, r0, r3
 8000d38:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d3c:	fb00 f707 	mul.w	r7, r0, r7
 8000d40:	42a7      	cmp	r7, r4
 8000d42:	d90a      	bls.n	8000d5a <__udivmoddi4+0x92>
 8000d44:	eb1c 0404 	adds.w	r4, ip, r4
 8000d48:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d4c:	f080 810a 	bcs.w	8000f64 <__udivmoddi4+0x29c>
 8000d50:	42a7      	cmp	r7, r4
 8000d52:	f240 8107 	bls.w	8000f64 <__udivmoddi4+0x29c>
 8000d56:	4464      	add	r4, ip
 8000d58:	3802      	subs	r0, #2
 8000d5a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d5e:	1be4      	subs	r4, r4, r7
 8000d60:	2600      	movs	r6, #0
 8000d62:	b11d      	cbz	r5, 8000d6c <__udivmoddi4+0xa4>
 8000d64:	40d4      	lsrs	r4, r2
 8000d66:	2300      	movs	r3, #0
 8000d68:	e9c5 4300 	strd	r4, r3, [r5]
 8000d6c:	4631      	mov	r1, r6
 8000d6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d72:	428b      	cmp	r3, r1
 8000d74:	d909      	bls.n	8000d8a <__udivmoddi4+0xc2>
 8000d76:	2d00      	cmp	r5, #0
 8000d78:	f000 80ef 	beq.w	8000f5a <__udivmoddi4+0x292>
 8000d7c:	2600      	movs	r6, #0
 8000d7e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d82:	4630      	mov	r0, r6
 8000d84:	4631      	mov	r1, r6
 8000d86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d8a:	fab3 f683 	clz	r6, r3
 8000d8e:	2e00      	cmp	r6, #0
 8000d90:	d14a      	bne.n	8000e28 <__udivmoddi4+0x160>
 8000d92:	428b      	cmp	r3, r1
 8000d94:	d302      	bcc.n	8000d9c <__udivmoddi4+0xd4>
 8000d96:	4282      	cmp	r2, r0
 8000d98:	f200 80f9 	bhi.w	8000f8e <__udivmoddi4+0x2c6>
 8000d9c:	1a84      	subs	r4, r0, r2
 8000d9e:	eb61 0303 	sbc.w	r3, r1, r3
 8000da2:	2001      	movs	r0, #1
 8000da4:	469e      	mov	lr, r3
 8000da6:	2d00      	cmp	r5, #0
 8000da8:	d0e0      	beq.n	8000d6c <__udivmoddi4+0xa4>
 8000daa:	e9c5 4e00 	strd	r4, lr, [r5]
 8000dae:	e7dd      	b.n	8000d6c <__udivmoddi4+0xa4>
 8000db0:	b902      	cbnz	r2, 8000db4 <__udivmoddi4+0xec>
 8000db2:	deff      	udf	#255	; 0xff
 8000db4:	fab2 f282 	clz	r2, r2
 8000db8:	2a00      	cmp	r2, #0
 8000dba:	f040 8092 	bne.w	8000ee2 <__udivmoddi4+0x21a>
 8000dbe:	eba1 010c 	sub.w	r1, r1, ip
 8000dc2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dc6:	fa1f fe8c 	uxth.w	lr, ip
 8000dca:	2601      	movs	r6, #1
 8000dcc:	0c20      	lsrs	r0, r4, #16
 8000dce:	fbb1 f3f7 	udiv	r3, r1, r7
 8000dd2:	fb07 1113 	mls	r1, r7, r3, r1
 8000dd6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dda:	fb0e f003 	mul.w	r0, lr, r3
 8000dde:	4288      	cmp	r0, r1
 8000de0:	d908      	bls.n	8000df4 <__udivmoddi4+0x12c>
 8000de2:	eb1c 0101 	adds.w	r1, ip, r1
 8000de6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000dea:	d202      	bcs.n	8000df2 <__udivmoddi4+0x12a>
 8000dec:	4288      	cmp	r0, r1
 8000dee:	f200 80cb 	bhi.w	8000f88 <__udivmoddi4+0x2c0>
 8000df2:	4643      	mov	r3, r8
 8000df4:	1a09      	subs	r1, r1, r0
 8000df6:	b2a4      	uxth	r4, r4
 8000df8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dfc:	fb07 1110 	mls	r1, r7, r0, r1
 8000e00:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e04:	fb0e fe00 	mul.w	lr, lr, r0
 8000e08:	45a6      	cmp	lr, r4
 8000e0a:	d908      	bls.n	8000e1e <__udivmoddi4+0x156>
 8000e0c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e10:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e14:	d202      	bcs.n	8000e1c <__udivmoddi4+0x154>
 8000e16:	45a6      	cmp	lr, r4
 8000e18:	f200 80bb 	bhi.w	8000f92 <__udivmoddi4+0x2ca>
 8000e1c:	4608      	mov	r0, r1
 8000e1e:	eba4 040e 	sub.w	r4, r4, lr
 8000e22:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e26:	e79c      	b.n	8000d62 <__udivmoddi4+0x9a>
 8000e28:	f1c6 0720 	rsb	r7, r6, #32
 8000e2c:	40b3      	lsls	r3, r6
 8000e2e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e32:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e36:	fa20 f407 	lsr.w	r4, r0, r7
 8000e3a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e3e:	431c      	orrs	r4, r3
 8000e40:	40f9      	lsrs	r1, r7
 8000e42:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e46:	fa00 f306 	lsl.w	r3, r0, r6
 8000e4a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e4e:	0c20      	lsrs	r0, r4, #16
 8000e50:	fa1f fe8c 	uxth.w	lr, ip
 8000e54:	fb09 1118 	mls	r1, r9, r8, r1
 8000e58:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e5c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e60:	4288      	cmp	r0, r1
 8000e62:	fa02 f206 	lsl.w	r2, r2, r6
 8000e66:	d90b      	bls.n	8000e80 <__udivmoddi4+0x1b8>
 8000e68:	eb1c 0101 	adds.w	r1, ip, r1
 8000e6c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e70:	f080 8088 	bcs.w	8000f84 <__udivmoddi4+0x2bc>
 8000e74:	4288      	cmp	r0, r1
 8000e76:	f240 8085 	bls.w	8000f84 <__udivmoddi4+0x2bc>
 8000e7a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e7e:	4461      	add	r1, ip
 8000e80:	1a09      	subs	r1, r1, r0
 8000e82:	b2a4      	uxth	r4, r4
 8000e84:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e88:	fb09 1110 	mls	r1, r9, r0, r1
 8000e8c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e90:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e94:	458e      	cmp	lr, r1
 8000e96:	d908      	bls.n	8000eaa <__udivmoddi4+0x1e2>
 8000e98:	eb1c 0101 	adds.w	r1, ip, r1
 8000e9c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ea0:	d26c      	bcs.n	8000f7c <__udivmoddi4+0x2b4>
 8000ea2:	458e      	cmp	lr, r1
 8000ea4:	d96a      	bls.n	8000f7c <__udivmoddi4+0x2b4>
 8000ea6:	3802      	subs	r0, #2
 8000ea8:	4461      	add	r1, ip
 8000eaa:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000eae:	fba0 9402 	umull	r9, r4, r0, r2
 8000eb2:	eba1 010e 	sub.w	r1, r1, lr
 8000eb6:	42a1      	cmp	r1, r4
 8000eb8:	46c8      	mov	r8, r9
 8000eba:	46a6      	mov	lr, r4
 8000ebc:	d356      	bcc.n	8000f6c <__udivmoddi4+0x2a4>
 8000ebe:	d053      	beq.n	8000f68 <__udivmoddi4+0x2a0>
 8000ec0:	b15d      	cbz	r5, 8000eda <__udivmoddi4+0x212>
 8000ec2:	ebb3 0208 	subs.w	r2, r3, r8
 8000ec6:	eb61 010e 	sbc.w	r1, r1, lr
 8000eca:	fa01 f707 	lsl.w	r7, r1, r7
 8000ece:	fa22 f306 	lsr.w	r3, r2, r6
 8000ed2:	40f1      	lsrs	r1, r6
 8000ed4:	431f      	orrs	r7, r3
 8000ed6:	e9c5 7100 	strd	r7, r1, [r5]
 8000eda:	2600      	movs	r6, #0
 8000edc:	4631      	mov	r1, r6
 8000ede:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ee2:	f1c2 0320 	rsb	r3, r2, #32
 8000ee6:	40d8      	lsrs	r0, r3
 8000ee8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000eec:	fa21 f303 	lsr.w	r3, r1, r3
 8000ef0:	4091      	lsls	r1, r2
 8000ef2:	4301      	orrs	r1, r0
 8000ef4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ef8:	fa1f fe8c 	uxth.w	lr, ip
 8000efc:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f00:	fb07 3610 	mls	r6, r7, r0, r3
 8000f04:	0c0b      	lsrs	r3, r1, #16
 8000f06:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f0a:	fb00 f60e 	mul.w	r6, r0, lr
 8000f0e:	429e      	cmp	r6, r3
 8000f10:	fa04 f402 	lsl.w	r4, r4, r2
 8000f14:	d908      	bls.n	8000f28 <__udivmoddi4+0x260>
 8000f16:	eb1c 0303 	adds.w	r3, ip, r3
 8000f1a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f1e:	d22f      	bcs.n	8000f80 <__udivmoddi4+0x2b8>
 8000f20:	429e      	cmp	r6, r3
 8000f22:	d92d      	bls.n	8000f80 <__udivmoddi4+0x2b8>
 8000f24:	3802      	subs	r0, #2
 8000f26:	4463      	add	r3, ip
 8000f28:	1b9b      	subs	r3, r3, r6
 8000f2a:	b289      	uxth	r1, r1
 8000f2c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f30:	fb07 3316 	mls	r3, r7, r6, r3
 8000f34:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f38:	fb06 f30e 	mul.w	r3, r6, lr
 8000f3c:	428b      	cmp	r3, r1
 8000f3e:	d908      	bls.n	8000f52 <__udivmoddi4+0x28a>
 8000f40:	eb1c 0101 	adds.w	r1, ip, r1
 8000f44:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f48:	d216      	bcs.n	8000f78 <__udivmoddi4+0x2b0>
 8000f4a:	428b      	cmp	r3, r1
 8000f4c:	d914      	bls.n	8000f78 <__udivmoddi4+0x2b0>
 8000f4e:	3e02      	subs	r6, #2
 8000f50:	4461      	add	r1, ip
 8000f52:	1ac9      	subs	r1, r1, r3
 8000f54:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f58:	e738      	b.n	8000dcc <__udivmoddi4+0x104>
 8000f5a:	462e      	mov	r6, r5
 8000f5c:	4628      	mov	r0, r5
 8000f5e:	e705      	b.n	8000d6c <__udivmoddi4+0xa4>
 8000f60:	4606      	mov	r6, r0
 8000f62:	e6e3      	b.n	8000d2c <__udivmoddi4+0x64>
 8000f64:	4618      	mov	r0, r3
 8000f66:	e6f8      	b.n	8000d5a <__udivmoddi4+0x92>
 8000f68:	454b      	cmp	r3, r9
 8000f6a:	d2a9      	bcs.n	8000ec0 <__udivmoddi4+0x1f8>
 8000f6c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f70:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f74:	3801      	subs	r0, #1
 8000f76:	e7a3      	b.n	8000ec0 <__udivmoddi4+0x1f8>
 8000f78:	4646      	mov	r6, r8
 8000f7a:	e7ea      	b.n	8000f52 <__udivmoddi4+0x28a>
 8000f7c:	4620      	mov	r0, r4
 8000f7e:	e794      	b.n	8000eaa <__udivmoddi4+0x1e2>
 8000f80:	4640      	mov	r0, r8
 8000f82:	e7d1      	b.n	8000f28 <__udivmoddi4+0x260>
 8000f84:	46d0      	mov	r8, sl
 8000f86:	e77b      	b.n	8000e80 <__udivmoddi4+0x1b8>
 8000f88:	3b02      	subs	r3, #2
 8000f8a:	4461      	add	r1, ip
 8000f8c:	e732      	b.n	8000df4 <__udivmoddi4+0x12c>
 8000f8e:	4630      	mov	r0, r6
 8000f90:	e709      	b.n	8000da6 <__udivmoddi4+0xde>
 8000f92:	4464      	add	r4, ip
 8000f94:	3802      	subs	r0, #2
 8000f96:	e742      	b.n	8000e1e <__udivmoddi4+0x156>

08000f98 <__aeabi_idiv0>:
 8000f98:	4770      	bx	lr
 8000f9a:	bf00      	nop

08000f9c <_write>:
// Properties -> Settings -> MCU_Settings -> select use float with printf
/*
 * USART6, BaudRate = 115200, WordLength = UART_WORDLENGTH_8B, StopBits = UART_STOPBITS_1;
 * */
int _write(int file, char *ptr, int len)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b084      	sub	sp, #16
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	60f8      	str	r0, [r7, #12]
 8000fa4:	60b9      	str	r1, [r7, #8]
 8000fa6:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart6,(uint8_t *)ptr, len, 10);
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	b29a      	uxth	r2, r3
 8000fac:	230a      	movs	r3, #10
 8000fae:	68b9      	ldr	r1, [r7, #8]
 8000fb0:	4803      	ldr	r0, [pc, #12]	; (8000fc0 <_write+0x24>)
 8000fb2:	f004 fd93 	bl	8005adc <HAL_UART_Transmit>
	return len;
 8000fb6:	687b      	ldr	r3, [r7, #4]
}
 8000fb8:	4618      	mov	r0, r3
 8000fba:	3710      	adds	r7, #16
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bd80      	pop	{r7, pc}
 8000fc0:	200002f0 	.word	0x200002f0

08000fc4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fc8:	f000 fdef 	bl	8001baa <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fcc:	f000 f8bc 	bl	8001148 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fd0:	f000 fa72 	bl	80014b8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000fd4:	f000 fa52 	bl	800147c <MX_DMA_Init>
  MX_TIM2_Init();
 8000fd8:	f000 f922 	bl	8001220 <MX_TIM2_Init>
  MX_TIM9_Init();
 8000fdc:	f000 f9ba 	bl	8001354 <MX_TIM9_Init>
  MX_USART6_UART_Init();
 8000fe0:	f000 fa1c 	bl	800141c <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */

	MX_DMA_Init();
 8000fe4:	f000 fa4a 	bl	800147c <MX_DMA_Init>

	printf("start\n");
 8000fe8:	484b      	ldr	r0, [pc, #300]	; (8001118 <main+0x154>)
 8000fea:	f005 ff2b 	bl	8006e44 <puts>

	// T = (ARR+1)*(PSC+1)/216e6=10*108/216e6 =5e-6   avec ARR=9 et PSC=107
	// freq = 200 kHz

	/* clear the update flag in TIMx_SR before you enable the timer */
	TIM9->SR &= ~0x00000001;      // clear update event flag in TIM9
 8000fee:	4b4b      	ldr	r3, [pc, #300]	; (800111c <main+0x158>)
 8000ff0:	691b      	ldr	r3, [r3, #16]
 8000ff2:	4a4a      	ldr	r2, [pc, #296]	; (800111c <main+0x158>)
 8000ff4:	f023 0301 	bic.w	r3, r3, #1
 8000ff8:	6113      	str	r3, [r2, #16]
	// __HAL_TIM_CLEAR_IT(&htim9 ,TIM_IT_UPDATE);

	/* Set the Autoreload value */
	TIM9->ARR = 49 ;
 8000ffa:	4b48      	ldr	r3, [pc, #288]	; (800111c <main+0x158>)
 8000ffc:	2231      	movs	r2, #49	; 0x31
 8000ffe:	62da      	str	r2, [r3, #44]	; 0x2c

	/* Set the Prescaler value */
	TIM9->PSC = 215;
 8001000:	4b46      	ldr	r3, [pc, #280]	; (800111c <main+0x158>)
 8001002:	22d7      	movs	r2, #215	; 0xd7
 8001004:	629a      	str	r2, [r3, #40]	; 0x28

	TIM9->CCR1 = TIM9->ARR >> 1;
 8001006:	4b45      	ldr	r3, [pc, #276]	; (800111c <main+0x158>)
 8001008:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800100a:	4a44      	ldr	r2, [pc, #272]	; (800111c <main+0x158>)
 800100c:	085b      	lsrs	r3, r3, #1
 800100e:	6353      	str	r3, [r2, #52]	; 0x34
		/* Set the Repetition TIM2_counter value */
		TIM9->RCR = 1;
	}

	/* Generate an update event to reload the Prescaler  and the repetition TIM2_counter value immediately */
	TIM9->EGR = TIM_EGR_UG;
 8001010:	4b42      	ldr	r3, [pc, #264]	; (800111c <main+0x158>)
 8001012:	2201      	movs	r2, #1
 8001014:	615a      	str	r2, [r3, #20]

	if ( HAL_OK != HAL_TIM_PWM_Start (&htim9, TIM_CHANNEL_1) )
 8001016:	2100      	movs	r1, #0
 8001018:	4841      	ldr	r0, [pc, #260]	; (8001120 <main+0x15c>)
 800101a:	f002 ff27 	bl	8003e6c <HAL_TIM_PWM_Start>
 800101e:	4603      	mov	r3, r0
 8001020:	2b00      	cmp	r3, #0
 8001022:	d001      	beq.n	8001028 <main+0x64>
		Error_Handler();
 8001024:	f000 fb1c 	bl	8001660 <Error_Handler>

	if ( HAL_OK != HAL_TIM_IC_Start_DMA(&htim2, TIM_CHANNEL_1, (uint32_t*) &CH1_capture, 1) )
 8001028:	2301      	movs	r3, #1
 800102a:	4a3e      	ldr	r2, [pc, #248]	; (8001124 <main+0x160>)
 800102c:	2100      	movs	r1, #0
 800102e:	483e      	ldr	r0, [pc, #248]	; (8001128 <main+0x164>)
 8001030:	f003 f878 	bl	8004124 <HAL_TIM_IC_Start_DMA>
 8001034:	4603      	mov	r3, r0
 8001036:	2b00      	cmp	r3, #0
 8001038:	d001      	beq.n	800103e <main+0x7a>
		Error_Handler();
 800103a:	f000 fb11 	bl	8001660 <Error_Handler>

	if ( HAL_OK != HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_2) )
 800103e:	2104      	movs	r1, #4
 8001040:	4839      	ldr	r0, [pc, #228]	; (8001128 <main+0x164>)
 8001042:	f002 fd69 	bl	8003b18 <HAL_TIM_OC_Start_IT>
 8001046:	4603      	mov	r3, r0
 8001048:	2b00      	cmp	r3, #0
 800104a:	d001      	beq.n	8001050 <main+0x8c>
		Error_Handler();
 800104c:	f000 fb08 	bl	8001660 <Error_Handler>

	// assumption check TIM2->ARR =0xffffffff
	if (0xffffffff != TIM2->ARR)
 8001050:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001054:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001056:	f1b3 3fff 	cmp.w	r3, #4294967295
 800105a:	d001      	beq.n	8001060 <main+0x9c>
		Error_Handler();
 800105c:	f000 fb00 	bl	8001660 <Error_Handler>

	CH1_captureDone = 0;
 8001060:	4b32      	ldr	r3, [pc, #200]	; (800112c <main+0x168>)
 8001062:	2200      	movs	r2, #0
 8001064:	701a      	strb	r2, [r3, #0]

	//MULTIPLIER = 12503;
	//DIVIDER    =  4096;

	MULTIPLIER =  12503;
 8001066:	4b32      	ldr	r3, [pc, #200]	; (8001130 <main+0x16c>)
 8001068:	f243 02d7 	movw	r2, #12503	; 0x30d7
 800106c:	601a      	str	r2, [r3, #0]
	DIVIDER    =   4096;
 800106e:	4b31      	ldr	r3, [pc, #196]	; (8001134 <main+0x170>)
 8001070:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001074:	601a      	str	r2, [r3, #0]
	ratio = (float) DIVIDER/ (float)MULTIPLIER/ 2.;
 8001076:	4b2f      	ldr	r3, [pc, #188]	; (8001134 <main+0x170>)
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	ee07 3a90 	vmov	s15, r3
 800107e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001082:	4b2b      	ldr	r3, [pc, #172]	; (8001130 <main+0x16c>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	ee07 3a90 	vmov	s15, r3
 800108a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800108e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001092:	ee16 0a90 	vmov	r0, s13
 8001096:	f7ff fa7f 	bl	8000598 <__aeabi_f2d>
 800109a:	f04f 0200 	mov.w	r2, #0
 800109e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80010a2:	f7ff fbfb 	bl	800089c <__aeabi_ddiv>
 80010a6:	4602      	mov	r2, r0
 80010a8:	460b      	mov	r3, r1
 80010aa:	4610      	mov	r0, r2
 80010ac:	4619      	mov	r1, r3
 80010ae:	f7ff fda3 	bl	8000bf8 <__aeabi_d2f>
 80010b2:	4603      	mov	r3, r0
 80010b4:	4a20      	ldr	r2, [pc, #128]	; (8001138 <main+0x174>)
 80010b6:	6013      	str	r3, [r2, #0]

	while (0 == CH1_captureDone) { ; }
 80010b8:	bf00      	nop
 80010ba:	4b1c      	ldr	r3, [pc, #112]	; (800112c <main+0x168>)
 80010bc:	781b      	ldrb	r3, [r3, #0]
 80010be:	b2db      	uxtb	r3, r3
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d0fa      	beq.n	80010ba <main+0xf6>
	CH1_captureDone=0;
 80010c4:	4b19      	ldr	r3, [pc, #100]	; (800112c <main+0x168>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	701a      	strb	r2, [r3, #0]

	while (0 == CH1_captureDone) { ; }
 80010ca:	bf00      	nop
 80010cc:	4b17      	ldr	r3, [pc, #92]	; (800112c <main+0x168>)
 80010ce:	781b      	ldrb	r3, [r3, #0]
 80010d0:	b2db      	uxtb	r3, r3
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d0fa      	beq.n	80010cc <main+0x108>
	TIM2->CCR2 = TIM2->CNT+CH1_diffCapture;
 80010d6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80010da:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80010dc:	4b17      	ldr	r3, [pc, #92]	; (800113c <main+0x178>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80010e4:	4413      	add	r3, r2
 80010e6:	638b      	str	r3, [r1, #56]	; 0x38
	CH1_captureDone=0;
 80010e8:	4b10      	ldr	r3, [pc, #64]	; (800112c <main+0x168>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	701a      	strb	r2, [r3, #0]
	while (1)
	{
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		if (CH1_captureDone != 0) {
 80010ee:	4b0f      	ldr	r3, [pc, #60]	; (800112c <main+0x168>)
 80010f0:	781b      	ldrb	r3, [r3, #0]
 80010f2:	b2db      	uxtb	r3, r3
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d0fa      	beq.n	80010ee <main+0x12a>

			if (0 == CH1_diffCapture) Error_Handler();
 80010f8:	4b10      	ldr	r3, [pc, #64]	; (800113c <main+0x178>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d101      	bne.n	8001104 <main+0x140>
 8001100:	f000 faae 	bl	8001660 <Error_Handler>
            printf("period %lu\n", period);
 8001104:	4b0e      	ldr	r3, [pc, #56]	; (8001140 <main+0x17c>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	4619      	mov	r1, r3
 800110a:	480e      	ldr	r0, [pc, #56]	; (8001144 <main+0x180>)
 800110c:	f005 fe14 	bl	8006d38 <iprintf>
			CH1_captureDone=0;
 8001110:	4b06      	ldr	r3, [pc, #24]	; (800112c <main+0x168>)
 8001112:	2200      	movs	r2, #0
 8001114:	701a      	strb	r2, [r3, #0]
		if (CH1_captureDone != 0) {
 8001116:	e7ea      	b.n	80010ee <main+0x12a>
 8001118:	08008fc8 	.word	0x08008fc8
 800111c:	40014000 	.word	0x40014000
 8001120:	20000244 	.word	0x20000244
 8001124:	20000378 	.word	0x20000378
 8001128:	200001f8 	.word	0x200001f8
 800112c:	2000037c 	.word	0x2000037c
 8001130:	20000390 	.word	0x20000390
 8001134:	20000394 	.word	0x20000394
 8001138:	20000398 	.word	0x20000398
 800113c:	20000380 	.word	0x20000380
 8001140:	20000384 	.word	0x20000384
 8001144:	08008fd0 	.word	0x08008fd0

08001148 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b094      	sub	sp, #80	; 0x50
 800114c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800114e:	f107 0320 	add.w	r3, r7, #32
 8001152:	2230      	movs	r2, #48	; 0x30
 8001154:	2100      	movs	r1, #0
 8001156:	4618      	mov	r0, r3
 8001158:	f005 f97c 	bl	8006454 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800115c:	f107 030c 	add.w	r3, r7, #12
 8001160:	2200      	movs	r2, #0
 8001162:	601a      	str	r2, [r3, #0]
 8001164:	605a      	str	r2, [r3, #4]
 8001166:	609a      	str	r2, [r3, #8]
 8001168:	60da      	str	r2, [r3, #12]
 800116a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800116c:	4b2a      	ldr	r3, [pc, #168]	; (8001218 <SystemClock_Config+0xd0>)
 800116e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001170:	4a29      	ldr	r2, [pc, #164]	; (8001218 <SystemClock_Config+0xd0>)
 8001172:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001176:	6413      	str	r3, [r2, #64]	; 0x40
 8001178:	4b27      	ldr	r3, [pc, #156]	; (8001218 <SystemClock_Config+0xd0>)
 800117a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800117c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001180:	60bb      	str	r3, [r7, #8]
 8001182:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001184:	4b25      	ldr	r3, [pc, #148]	; (800121c <SystemClock_Config+0xd4>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	4a24      	ldr	r2, [pc, #144]	; (800121c <SystemClock_Config+0xd4>)
 800118a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800118e:	6013      	str	r3, [r2, #0]
 8001190:	4b22      	ldr	r3, [pc, #136]	; (800121c <SystemClock_Config+0xd4>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001198:	607b      	str	r3, [r7, #4]
 800119a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800119c:	2302      	movs	r3, #2
 800119e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011a0:	2301      	movs	r3, #1
 80011a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80011a4:	2310      	movs	r3, #16
 80011a6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011a8:	2302      	movs	r3, #2
 80011aa:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80011ac:	2300      	movs	r3, #0
 80011ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80011b0:	2308      	movs	r3, #8
 80011b2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 80011b4:	23d8      	movs	r3, #216	; 0xd8
 80011b6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80011b8:	2302      	movs	r3, #2
 80011ba:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
 80011bc:	2309      	movs	r3, #9
 80011be:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011c0:	f107 0320 	add.w	r3, r7, #32
 80011c4:	4618      	mov	r0, r3
 80011c6:	f001 fc1b 	bl	8002a00 <HAL_RCC_OscConfig>
 80011ca:	4603      	mov	r3, r0
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d001      	beq.n	80011d4 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80011d0:	f000 fa46 	bl	8001660 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80011d4:	f001 fbc4 	bl	8002960 <HAL_PWREx_EnableOverDrive>
 80011d8:	4603      	mov	r3, r0
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d001      	beq.n	80011e2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80011de:	f000 fa3f 	bl	8001660 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011e2:	230f      	movs	r3, #15
 80011e4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011e6:	2302      	movs	r3, #2
 80011e8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011ea:	2300      	movs	r3, #0
 80011ec:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80011ee:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80011f2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80011f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011f8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80011fa:	f107 030c 	add.w	r3, r7, #12
 80011fe:	2107      	movs	r1, #7
 8001200:	4618      	mov	r0, r3
 8001202:	f001 fea1 	bl	8002f48 <HAL_RCC_ClockConfig>
 8001206:	4603      	mov	r3, r0
 8001208:	2b00      	cmp	r3, #0
 800120a:	d001      	beq.n	8001210 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 800120c:	f000 fa28 	bl	8001660 <Error_Handler>
  }
}
 8001210:	bf00      	nop
 8001212:	3750      	adds	r7, #80	; 0x50
 8001214:	46bd      	mov	sp, r7
 8001216:	bd80      	pop	{r7, pc}
 8001218:	40023800 	.word	0x40023800
 800121c:	40007000 	.word	0x40007000

08001220 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b092      	sub	sp, #72	; 0x48
 8001224:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001226:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800122a:	2200      	movs	r2, #0
 800122c:	601a      	str	r2, [r3, #0]
 800122e:	605a      	str	r2, [r3, #4]
 8001230:	609a      	str	r2, [r3, #8]
 8001232:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001234:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001238:	2200      	movs	r2, #0
 800123a:	601a      	str	r2, [r3, #0]
 800123c:	605a      	str	r2, [r3, #4]
 800123e:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001240:	f107 031c 	add.w	r3, r7, #28
 8001244:	2200      	movs	r2, #0
 8001246:	601a      	str	r2, [r3, #0]
 8001248:	605a      	str	r2, [r3, #4]
 800124a:	609a      	str	r2, [r3, #8]
 800124c:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800124e:	463b      	mov	r3, r7
 8001250:	2200      	movs	r2, #0
 8001252:	601a      	str	r2, [r3, #0]
 8001254:	605a      	str	r2, [r3, #4]
 8001256:	609a      	str	r2, [r3, #8]
 8001258:	60da      	str	r2, [r3, #12]
 800125a:	611a      	str	r2, [r3, #16]
 800125c:	615a      	str	r2, [r3, #20]
 800125e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001260:	4b3b      	ldr	r3, [pc, #236]	; (8001350 <MX_TIM2_Init+0x130>)
 8001262:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001266:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001268:	4b39      	ldr	r3, [pc, #228]	; (8001350 <MX_TIM2_Init+0x130>)
 800126a:	2200      	movs	r2, #0
 800126c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800126e:	4b38      	ldr	r3, [pc, #224]	; (8001350 <MX_TIM2_Init+0x130>)
 8001270:	2200      	movs	r2, #0
 8001272:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001274:	4b36      	ldr	r3, [pc, #216]	; (8001350 <MX_TIM2_Init+0x130>)
 8001276:	f04f 32ff 	mov.w	r2, #4294967295
 800127a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800127c:	4b34      	ldr	r3, [pc, #208]	; (8001350 <MX_TIM2_Init+0x130>)
 800127e:	2200      	movs	r2, #0
 8001280:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001282:	4b33      	ldr	r3, [pc, #204]	; (8001350 <MX_TIM2_Init+0x130>)
 8001284:	2200      	movs	r2, #0
 8001286:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001288:	4831      	ldr	r0, [pc, #196]	; (8001350 <MX_TIM2_Init+0x130>)
 800128a:	f002 fb8d 	bl	80039a8 <HAL_TIM_Base_Init>
 800128e:	4603      	mov	r3, r0
 8001290:	2b00      	cmp	r3, #0
 8001292:	d001      	beq.n	8001298 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8001294:	f000 f9e4 	bl	8001660 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001298:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800129c:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800129e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80012a2:	4619      	mov	r1, r3
 80012a4:	482a      	ldr	r0, [pc, #168]	; (8001350 <MX_TIM2_Init+0x130>)
 80012a6:	f003 fc59 	bl	8004b5c <HAL_TIM_ConfigClockSource>
 80012aa:	4603      	mov	r3, r0
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d001      	beq.n	80012b4 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80012b0:	f000 f9d6 	bl	8001660 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 80012b4:	4826      	ldr	r0, [pc, #152]	; (8001350 <MX_TIM2_Init+0x130>)
 80012b6:	f002 fed3 	bl	8004060 <HAL_TIM_IC_Init>
 80012ba:	4603      	mov	r3, r0
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d001      	beq.n	80012c4 <MX_TIM2_Init+0xa4>
  {
    Error_Handler();
 80012c0:	f000 f9ce 	bl	8001660 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 80012c4:	4822      	ldr	r0, [pc, #136]	; (8001350 <MX_TIM2_Init+0x130>)
 80012c6:	f002 fbc6 	bl	8003a56 <HAL_TIM_OC_Init>
 80012ca:	4603      	mov	r3, r0
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d001      	beq.n	80012d4 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80012d0:	f000 f9c6 	bl	8001660 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012d4:	2300      	movs	r3, #0
 80012d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012d8:	2300      	movs	r3, #0
 80012da:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80012dc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80012e0:	4619      	mov	r1, r3
 80012e2:	481b      	ldr	r0, [pc, #108]	; (8001350 <MX_TIM2_Init+0x130>)
 80012e4:	f004 fb00 	bl	80058e8 <HAL_TIMEx_MasterConfigSynchronization>
 80012e8:	4603      	mov	r3, r0
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d001      	beq.n	80012f2 <MX_TIM2_Init+0xd2>
  {
    Error_Handler();
 80012ee:	f000 f9b7 	bl	8001660 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80012f2:	2300      	movs	r3, #0
 80012f4:	61fb      	str	r3, [r7, #28]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80012f6:	2301      	movs	r3, #1
 80012f8:	623b      	str	r3, [r7, #32]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80012fa:	2300      	movs	r3, #0
 80012fc:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigIC.ICFilter = 0;
 80012fe:	2300      	movs	r3, #0
 8001300:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001302:	f107 031c 	add.w	r3, r7, #28
 8001306:	2200      	movs	r2, #0
 8001308:	4619      	mov	r1, r3
 800130a:	4811      	ldr	r0, [pc, #68]	; (8001350 <MX_TIM2_Init+0x130>)
 800130c:	f003 fa76 	bl	80047fc <HAL_TIM_IC_ConfigChannel>
 8001310:	4603      	mov	r3, r0
 8001312:	2b00      	cmp	r3, #0
 8001314:	d001      	beq.n	800131a <MX_TIM2_Init+0xfa>
  {
    Error_Handler();
 8001316:	f000 f9a3 	bl	8001660 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 800131a:	2330      	movs	r3, #48	; 0x30
 800131c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800131e:	2300      	movs	r3, #0
 8001320:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001322:	2300      	movs	r3, #0
 8001324:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001326:	2300      	movs	r3, #0
 8001328:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800132a:	463b      	mov	r3, r7
 800132c:	2204      	movs	r2, #4
 800132e:	4619      	mov	r1, r3
 8001330:	4807      	ldr	r0, [pc, #28]	; (8001350 <MX_TIM2_Init+0x130>)
 8001332:	f003 f9e9 	bl	8004708 <HAL_TIM_OC_ConfigChannel>
 8001336:	4603      	mov	r3, r0
 8001338:	2b00      	cmp	r3, #0
 800133a:	d001      	beq.n	8001340 <MX_TIM2_Init+0x120>
  {
    Error_Handler();
 800133c:	f000 f990 	bl	8001660 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001340:	4803      	ldr	r0, [pc, #12]	; (8001350 <MX_TIM2_Init+0x130>)
 8001342:	f000 fa53 	bl	80017ec <HAL_TIM_MspPostInit>

}
 8001346:	bf00      	nop
 8001348:	3748      	adds	r7, #72	; 0x48
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}
 800134e:	bf00      	nop
 8001350:	200001f8 	.word	0x200001f8

08001354 <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b08c      	sub	sp, #48	; 0x30
 8001358:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800135a:	f107 0320 	add.w	r3, r7, #32
 800135e:	2200      	movs	r2, #0
 8001360:	601a      	str	r2, [r3, #0]
 8001362:	605a      	str	r2, [r3, #4]
 8001364:	609a      	str	r2, [r3, #8]
 8001366:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001368:	1d3b      	adds	r3, r7, #4
 800136a:	2200      	movs	r2, #0
 800136c:	601a      	str	r2, [r3, #0]
 800136e:	605a      	str	r2, [r3, #4]
 8001370:	609a      	str	r2, [r3, #8]
 8001372:	60da      	str	r2, [r3, #12]
 8001374:	611a      	str	r2, [r3, #16]
 8001376:	615a      	str	r2, [r3, #20]
 8001378:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 800137a:	4b26      	ldr	r3, [pc, #152]	; (8001414 <MX_TIM9_Init+0xc0>)
 800137c:	4a26      	ldr	r2, [pc, #152]	; (8001418 <MX_TIM9_Init+0xc4>)
 800137e:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 0;
 8001380:	4b24      	ldr	r3, [pc, #144]	; (8001414 <MX_TIM9_Init+0xc0>)
 8001382:	2200      	movs	r2, #0
 8001384:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001386:	4b23      	ldr	r3, [pc, #140]	; (8001414 <MX_TIM9_Init+0xc0>)
 8001388:	2200      	movs	r2, #0
 800138a:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 65535;
 800138c:	4b21      	ldr	r3, [pc, #132]	; (8001414 <MX_TIM9_Init+0xc0>)
 800138e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001392:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001394:	4b1f      	ldr	r3, [pc, #124]	; (8001414 <MX_TIM9_Init+0xc0>)
 8001396:	2200      	movs	r2, #0
 8001398:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800139a:	4b1e      	ldr	r3, [pc, #120]	; (8001414 <MX_TIM9_Init+0xc0>)
 800139c:	2200      	movs	r2, #0
 800139e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 80013a0:	481c      	ldr	r0, [pc, #112]	; (8001414 <MX_TIM9_Init+0xc0>)
 80013a2:	f002 fb01 	bl	80039a8 <HAL_TIM_Base_Init>
 80013a6:	4603      	mov	r3, r0
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d001      	beq.n	80013b0 <MX_TIM9_Init+0x5c>
  {
    Error_Handler();
 80013ac:	f000 f958 	bl	8001660 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013b4:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 80013b6:	f107 0320 	add.w	r3, r7, #32
 80013ba:	4619      	mov	r1, r3
 80013bc:	4815      	ldr	r0, [pc, #84]	; (8001414 <MX_TIM9_Init+0xc0>)
 80013be:	f003 fbcd 	bl	8004b5c <HAL_TIM_ConfigClockSource>
 80013c2:	4603      	mov	r3, r0
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d001      	beq.n	80013cc <MX_TIM9_Init+0x78>
  {
    Error_Handler();
 80013c8:	f000 f94a 	bl	8001660 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 80013cc:	4811      	ldr	r0, [pc, #68]	; (8001414 <MX_TIM9_Init+0xc0>)
 80013ce:	f002 fceb 	bl	8003da8 <HAL_TIM_PWM_Init>
 80013d2:	4603      	mov	r3, r0
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d001      	beq.n	80013dc <MX_TIM9_Init+0x88>
  {
    Error_Handler();
 80013d8:	f000 f942 	bl	8001660 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80013dc:	2360      	movs	r3, #96	; 0x60
 80013de:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 32767;
 80013e0:	f647 73ff 	movw	r3, #32767	; 0x7fff
 80013e4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80013e6:	2300      	movs	r3, #0
 80013e8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80013ea:	2300      	movs	r3, #0
 80013ec:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80013ee:	1d3b      	adds	r3, r7, #4
 80013f0:	2200      	movs	r2, #0
 80013f2:	4619      	mov	r1, r3
 80013f4:	4807      	ldr	r0, [pc, #28]	; (8001414 <MX_TIM9_Init+0xc0>)
 80013f6:	f003 fa9d 	bl	8004934 <HAL_TIM_PWM_ConfigChannel>
 80013fa:	4603      	mov	r3, r0
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d001      	beq.n	8001404 <MX_TIM9_Init+0xb0>
  {
    Error_Handler();
 8001400:	f000 f92e 	bl	8001660 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */
  HAL_TIM_MspPostInit(&htim9);
 8001404:	4803      	ldr	r0, [pc, #12]	; (8001414 <MX_TIM9_Init+0xc0>)
 8001406:	f000 f9f1 	bl	80017ec <HAL_TIM_MspPostInit>

}
 800140a:	bf00      	nop
 800140c:	3730      	adds	r7, #48	; 0x30
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}
 8001412:	bf00      	nop
 8001414:	20000244 	.word	0x20000244
 8001418:	40014000 	.word	0x40014000

0800141c <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001420:	4b14      	ldr	r3, [pc, #80]	; (8001474 <MX_USART6_UART_Init+0x58>)
 8001422:	4a15      	ldr	r2, [pc, #84]	; (8001478 <MX_USART6_UART_Init+0x5c>)
 8001424:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8001426:	4b13      	ldr	r3, [pc, #76]	; (8001474 <MX_USART6_UART_Init+0x58>)
 8001428:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800142c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800142e:	4b11      	ldr	r3, [pc, #68]	; (8001474 <MX_USART6_UART_Init+0x58>)
 8001430:	2200      	movs	r2, #0
 8001432:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001434:	4b0f      	ldr	r3, [pc, #60]	; (8001474 <MX_USART6_UART_Init+0x58>)
 8001436:	2200      	movs	r2, #0
 8001438:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800143a:	4b0e      	ldr	r3, [pc, #56]	; (8001474 <MX_USART6_UART_Init+0x58>)
 800143c:	2200      	movs	r2, #0
 800143e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001440:	4b0c      	ldr	r3, [pc, #48]	; (8001474 <MX_USART6_UART_Init+0x58>)
 8001442:	220c      	movs	r2, #12
 8001444:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001446:	4b0b      	ldr	r3, [pc, #44]	; (8001474 <MX_USART6_UART_Init+0x58>)
 8001448:	2200      	movs	r2, #0
 800144a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800144c:	4b09      	ldr	r3, [pc, #36]	; (8001474 <MX_USART6_UART_Init+0x58>)
 800144e:	2200      	movs	r2, #0
 8001450:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001452:	4b08      	ldr	r3, [pc, #32]	; (8001474 <MX_USART6_UART_Init+0x58>)
 8001454:	2200      	movs	r2, #0
 8001456:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001458:	4b06      	ldr	r3, [pc, #24]	; (8001474 <MX_USART6_UART_Init+0x58>)
 800145a:	2200      	movs	r2, #0
 800145c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800145e:	4805      	ldr	r0, [pc, #20]	; (8001474 <MX_USART6_UART_Init+0x58>)
 8001460:	f004 faee 	bl	8005a40 <HAL_UART_Init>
 8001464:	4603      	mov	r3, r0
 8001466:	2b00      	cmp	r3, #0
 8001468:	d001      	beq.n	800146e <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 800146a:	f000 f8f9 	bl	8001660 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800146e:	bf00      	nop
 8001470:	bd80      	pop	{r7, pc}
 8001472:	bf00      	nop
 8001474:	200002f0 	.word	0x200002f0
 8001478:	40011400 	.word	0x40011400

0800147c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b082      	sub	sp, #8
 8001480:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001482:	4b0c      	ldr	r3, [pc, #48]	; (80014b4 <MX_DMA_Init+0x38>)
 8001484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001486:	4a0b      	ldr	r2, [pc, #44]	; (80014b4 <MX_DMA_Init+0x38>)
 8001488:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800148c:	6313      	str	r3, [r2, #48]	; 0x30
 800148e:	4b09      	ldr	r3, [pc, #36]	; (80014b4 <MX_DMA_Init+0x38>)
 8001490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001492:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001496:	607b      	str	r3, [r7, #4]
 8001498:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800149a:	2200      	movs	r2, #0
 800149c:	2100      	movs	r1, #0
 800149e:	2010      	movs	r0, #16
 80014a0:	f000 fcdf 	bl	8001e62 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80014a4:	2010      	movs	r0, #16
 80014a6:	f000 fcf8 	bl	8001e9a <HAL_NVIC_EnableIRQ>

}
 80014aa:	bf00      	nop
 80014ac:	3708      	adds	r7, #8
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}
 80014b2:	bf00      	nop
 80014b4:	40023800 	.word	0x40023800

080014b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b08a      	sub	sp, #40	; 0x28
 80014bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014be:	f107 0314 	add.w	r3, r7, #20
 80014c2:	2200      	movs	r2, #0
 80014c4:	601a      	str	r2, [r3, #0]
 80014c6:	605a      	str	r2, [r3, #4]
 80014c8:	609a      	str	r2, [r3, #8]
 80014ca:	60da      	str	r2, [r3, #12]
 80014cc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80014ce:	4b2a      	ldr	r3, [pc, #168]	; (8001578 <MX_GPIO_Init+0xc0>)
 80014d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014d2:	4a29      	ldr	r2, [pc, #164]	; (8001578 <MX_GPIO_Init+0xc0>)
 80014d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80014d8:	6313      	str	r3, [r2, #48]	; 0x30
 80014da:	4b27      	ldr	r3, [pc, #156]	; (8001578 <MX_GPIO_Init+0xc0>)
 80014dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80014e2:	613b      	str	r3, [r7, #16]
 80014e4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014e6:	4b24      	ldr	r3, [pc, #144]	; (8001578 <MX_GPIO_Init+0xc0>)
 80014e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ea:	4a23      	ldr	r2, [pc, #140]	; (8001578 <MX_GPIO_Init+0xc0>)
 80014ec:	f043 0301 	orr.w	r3, r3, #1
 80014f0:	6313      	str	r3, [r2, #48]	; 0x30
 80014f2:	4b21      	ldr	r3, [pc, #132]	; (8001578 <MX_GPIO_Init+0xc0>)
 80014f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f6:	f003 0301 	and.w	r3, r3, #1
 80014fa:	60fb      	str	r3, [r7, #12]
 80014fc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80014fe:	4b1e      	ldr	r3, [pc, #120]	; (8001578 <MX_GPIO_Init+0xc0>)
 8001500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001502:	4a1d      	ldr	r2, [pc, #116]	; (8001578 <MX_GPIO_Init+0xc0>)
 8001504:	f043 0310 	orr.w	r3, r3, #16
 8001508:	6313      	str	r3, [r2, #48]	; 0x30
 800150a:	4b1b      	ldr	r3, [pc, #108]	; (8001578 <MX_GPIO_Init+0xc0>)
 800150c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800150e:	f003 0310 	and.w	r3, r3, #16
 8001512:	60bb      	str	r3, [r7, #8]
 8001514:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001516:	4b18      	ldr	r3, [pc, #96]	; (8001578 <MX_GPIO_Init+0xc0>)
 8001518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800151a:	4a17      	ldr	r2, [pc, #92]	; (8001578 <MX_GPIO_Init+0xc0>)
 800151c:	f043 0304 	orr.w	r3, r3, #4
 8001520:	6313      	str	r3, [r2, #48]	; 0x30
 8001522:	4b15      	ldr	r3, [pc, #84]	; (8001578 <MX_GPIO_Init+0xc0>)
 8001524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001526:	f003 0304 	and.w	r3, r3, #4
 800152a:	607b      	str	r3, [r7, #4]
 800152c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, DIV_OUT_Pin|GPIO_PIN_5, GPIO_PIN_RESET);
 800152e:	2200      	movs	r2, #0
 8001530:	2122      	movs	r1, #34	; 0x22
 8001532:	4812      	ldr	r0, [pc, #72]	; (800157c <MX_GPIO_Init+0xc4>)
 8001534:	f001 f9e0 	bl	80028f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SIG_IN_Pin */
  GPIO_InitStruct.Pin = SIG_IN_Pin;
 8001538:	2301      	movs	r3, #1
 800153a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800153c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001540:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001542:	2300      	movs	r3, #0
 8001544:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SIG_IN_GPIO_Port, &GPIO_InitStruct);
 8001546:	f107 0314 	add.w	r3, r7, #20
 800154a:	4619      	mov	r1, r3
 800154c:	480b      	ldr	r0, [pc, #44]	; (800157c <MX_GPIO_Init+0xc4>)
 800154e:	f001 f837 	bl	80025c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : DIV_OUT_Pin PC5 */
  GPIO_InitStruct.Pin = DIV_OUT_Pin|GPIO_PIN_5;
 8001552:	2322      	movs	r3, #34	; 0x22
 8001554:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001556:	2301      	movs	r3, #1
 8001558:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800155a:	2300      	movs	r3, #0
 800155c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800155e:	2303      	movs	r3, #3
 8001560:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001562:	f107 0314 	add.w	r3, r7, #20
 8001566:	4619      	mov	r1, r3
 8001568:	4804      	ldr	r0, [pc, #16]	; (800157c <MX_GPIO_Init+0xc4>)
 800156a:	f001 f829 	bl	80025c0 <HAL_GPIO_Init>

}
 800156e:	bf00      	nop
 8001570:	3728      	adds	r7, #40	; 0x28
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}
 8001576:	bf00      	nop
 8001578:	40023800 	.word	0x40023800
 800157c:	40020800 	.word	0x40020800

08001580 <HAL_TIM_OC_DelayElapsedCallback>:
		}
	}

}

void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim) {
 8001580:	b480      	push	{r7}
 8001582:	b083      	sub	sp, #12
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2){
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	7f1b      	ldrb	r3, [r3, #28]
 800158c:	2b02      	cmp	r3, #2
 800158e:	d124      	bne.n	80015da <HAL_TIM_OC_DelayElapsedCallback+0x5a>
		period = (uint32_t) (fperiod + fperiodErr);
 8001590:	4b15      	ldr	r3, [pc, #84]	; (80015e8 <HAL_TIM_OC_DelayElapsedCallback+0x68>)
 8001592:	ed93 7a00 	vldr	s14, [r3]
 8001596:	4b15      	ldr	r3, [pc, #84]	; (80015ec <HAL_TIM_OC_DelayElapsedCallback+0x6c>)
 8001598:	edd3 7a00 	vldr	s15, [r3]
 800159c:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80015a4:	ee17 2a90 	vmov	r2, s15
 80015a8:	4b11      	ldr	r3, [pc, #68]	; (80015f0 <HAL_TIM_OC_DelayElapsedCallback+0x70>)
 80015aa:	601a      	str	r2, [r3, #0]
		TIM2->CCR2 += period;
 80015ac:	4b10      	ldr	r3, [pc, #64]	; (80015f0 <HAL_TIM_OC_DelayElapsedCallback+0x70>)
 80015ae:	681a      	ldr	r2, [r3, #0]
 80015b0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80015b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015b6:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80015ba:	4413      	add	r3, r2
 80015bc:	638b      	str	r3, [r1, #56]	; 0x38
		fperiodErr = fperiod - period;
 80015be:	4b0a      	ldr	r3, [pc, #40]	; (80015e8 <HAL_TIM_OC_DelayElapsedCallback+0x68>)
 80015c0:	ed93 7a00 	vldr	s14, [r3]
 80015c4:	4b0a      	ldr	r3, [pc, #40]	; (80015f0 <HAL_TIM_OC_DelayElapsedCallback+0x70>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	ee07 3a90 	vmov	s15, r3
 80015cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80015d0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80015d4:	4b05      	ldr	r3, [pc, #20]	; (80015ec <HAL_TIM_OC_DelayElapsedCallback+0x6c>)
 80015d6:	edc3 7a00 	vstr	s15, [r3]
	}
}
 80015da:	bf00      	nop
 80015dc:	370c      	adds	r7, #12
 80015de:	46bd      	mov	sp, r7
 80015e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e4:	4770      	bx	lr
 80015e6:	bf00      	nop
 80015e8:	20000388 	.word	0x20000388
 80015ec:	2000038c 	.word	0x2000038c
 80015f0:	20000384 	.word	0x20000384

080015f4 <HAL_TIM_IC_CaptureCallback>:


void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 80015f4:	b480      	push	{r7}
 80015f6:	b083      	sub	sp, #12
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1) {
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	7f1b      	ldrb	r3, [r3, #28]
 8001600:	2b01      	cmp	r3, #1
 8001602:	d11b      	bne.n	800163c <HAL_TIM_IC_CaptureCallback+0x48>
		// This is the time at which the input pulse had the second rising edge.
		//currentTime= htim->Instance->CCR1;
		   CH1_diffCapture = CH1_capture- last_CH1_capture;
 8001604:	4b10      	ldr	r3, [pc, #64]	; (8001648 <HAL_TIM_IC_CaptureCallback+0x54>)
 8001606:	681a      	ldr	r2, [r3, #0]
 8001608:	4b10      	ldr	r3, [pc, #64]	; (800164c <HAL_TIM_IC_CaptureCallback+0x58>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	1ad3      	subs	r3, r2, r3
 800160e:	4a10      	ldr	r2, [pc, #64]	; (8001650 <HAL_TIM_IC_CaptureCallback+0x5c>)
 8001610:	6013      	str	r3, [r2, #0]
		   last_CH1_capture = CH1_capture;
 8001612:	4b0d      	ldr	r3, [pc, #52]	; (8001648 <HAL_TIM_IC_CaptureCallback+0x54>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	4a0d      	ldr	r2, [pc, #52]	; (800164c <HAL_TIM_IC_CaptureCallback+0x58>)
 8001618:	6013      	str	r3, [r2, #0]

		fperiod = (float) CH1_diffCapture*ratio;
 800161a:	4b0d      	ldr	r3, [pc, #52]	; (8001650 <HAL_TIM_IC_CaptureCallback+0x5c>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	ee07 3a90 	vmov	s15, r3
 8001622:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001626:	4b0b      	ldr	r3, [pc, #44]	; (8001654 <HAL_TIM_IC_CaptureCallback+0x60>)
 8001628:	edd3 7a00 	vldr	s15, [r3]
 800162c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001630:	4b09      	ldr	r3, [pc, #36]	; (8001658 <HAL_TIM_IC_CaptureCallback+0x64>)
 8001632:	edc3 7a00 	vstr	s15, [r3]
		CH1_captureDone = 1;
 8001636:	4b09      	ldr	r3, [pc, #36]	; (800165c <HAL_TIM_IC_CaptureCallback+0x68>)
 8001638:	2201      	movs	r2, #1
 800163a:	701a      	strb	r2, [r3, #0]
			GPIOC->BSRR = ((GPIOC->ODR & DIV_OUT_Pin) << 16) | (~GPIOC->ODR & DIV_OUT_Pin);
			DIV_counter=0;
		}
#endif
	}
}
 800163c:	bf00      	nop
 800163e:	370c      	adds	r7, #12
 8001640:	46bd      	mov	sp, r7
 8001642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001646:	4770      	bx	lr
 8001648:	20000378 	.word	0x20000378
 800164c:	20000374 	.word	0x20000374
 8001650:	20000380 	.word	0x20000380
 8001654:	20000398 	.word	0x20000398
 8001658:	20000388 	.word	0x20000388
 800165c:	2000037c 	.word	0x2000037c

08001660 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	while (1)
	{
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_7);
 8001664:	2180      	movs	r1, #128	; 0x80
 8001666:	4804      	ldr	r0, [pc, #16]	; (8001678 <Error_Handler+0x18>)
 8001668:	f001 f95f 	bl	800292a <HAL_GPIO_TogglePin>
		HAL_Delay(500);
 800166c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001670:	f000 faf8 	bl	8001c64 <HAL_Delay>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_7);
 8001674:	e7f6      	b.n	8001664 <Error_Handler+0x4>
 8001676:	bf00      	nop
 8001678:	40020000 	.word	0x40020000

0800167c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800167c:	b480      	push	{r7}
 800167e:	b083      	sub	sp, #12
 8001680:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001682:	4b0f      	ldr	r3, [pc, #60]	; (80016c0 <HAL_MspInit+0x44>)
 8001684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001686:	4a0e      	ldr	r2, [pc, #56]	; (80016c0 <HAL_MspInit+0x44>)
 8001688:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800168c:	6413      	str	r3, [r2, #64]	; 0x40
 800168e:	4b0c      	ldr	r3, [pc, #48]	; (80016c0 <HAL_MspInit+0x44>)
 8001690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001692:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001696:	607b      	str	r3, [r7, #4]
 8001698:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800169a:	4b09      	ldr	r3, [pc, #36]	; (80016c0 <HAL_MspInit+0x44>)
 800169c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800169e:	4a08      	ldr	r2, [pc, #32]	; (80016c0 <HAL_MspInit+0x44>)
 80016a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016a4:	6453      	str	r3, [r2, #68]	; 0x44
 80016a6:	4b06      	ldr	r3, [pc, #24]	; (80016c0 <HAL_MspInit+0x44>)
 80016a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016ae:	603b      	str	r3, [r7, #0]
 80016b0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016b2:	bf00      	nop
 80016b4:	370c      	adds	r7, #12
 80016b6:	46bd      	mov	sp, r7
 80016b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016bc:	4770      	bx	lr
 80016be:	bf00      	nop
 80016c0:	40023800 	.word	0x40023800

080016c4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b08a      	sub	sp, #40	; 0x28
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016cc:	f107 0314 	add.w	r3, r7, #20
 80016d0:	2200      	movs	r2, #0
 80016d2:	601a      	str	r2, [r3, #0]
 80016d4:	605a      	str	r2, [r3, #4]
 80016d6:	609a      	str	r2, [r3, #8]
 80016d8:	60da      	str	r2, [r3, #12]
 80016da:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80016e4:	d162      	bne.n	80017ac <HAL_TIM_Base_MspInit+0xe8>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80016e6:	4b3c      	ldr	r3, [pc, #240]	; (80017d8 <HAL_TIM_Base_MspInit+0x114>)
 80016e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ea:	4a3b      	ldr	r2, [pc, #236]	; (80017d8 <HAL_TIM_Base_MspInit+0x114>)
 80016ec:	f043 0301 	orr.w	r3, r3, #1
 80016f0:	6413      	str	r3, [r2, #64]	; 0x40
 80016f2:	4b39      	ldr	r3, [pc, #228]	; (80017d8 <HAL_TIM_Base_MspInit+0x114>)
 80016f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016f6:	f003 0301 	and.w	r3, r3, #1
 80016fa:	613b      	str	r3, [r7, #16]
 80016fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016fe:	4b36      	ldr	r3, [pc, #216]	; (80017d8 <HAL_TIM_Base_MspInit+0x114>)
 8001700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001702:	4a35      	ldr	r2, [pc, #212]	; (80017d8 <HAL_TIM_Base_MspInit+0x114>)
 8001704:	f043 0301 	orr.w	r3, r3, #1
 8001708:	6313      	str	r3, [r2, #48]	; 0x30
 800170a:	4b33      	ldr	r3, [pc, #204]	; (80017d8 <HAL_TIM_Base_MspInit+0x114>)
 800170c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800170e:	f003 0301 	and.w	r3, r3, #1
 8001712:	60fb      	str	r3, [r7, #12]
 8001714:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001716:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800171a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800171c:	2302      	movs	r3, #2
 800171e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001720:	2300      	movs	r3, #0
 8001722:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001724:	2300      	movs	r3, #0
 8001726:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001728:	2301      	movs	r3, #1
 800172a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800172c:	f107 0314 	add.w	r3, r7, #20
 8001730:	4619      	mov	r1, r3
 8001732:	482a      	ldr	r0, [pc, #168]	; (80017dc <HAL_TIM_Base_MspInit+0x118>)
 8001734:	f000 ff44 	bl	80025c0 <HAL_GPIO_Init>

    /* TIM2 DMA Init */
    /* TIM2_CH1 Init */
    hdma_tim2_ch1.Instance = DMA1_Stream5;
 8001738:	4b29      	ldr	r3, [pc, #164]	; (80017e0 <HAL_TIM_Base_MspInit+0x11c>)
 800173a:	4a2a      	ldr	r2, [pc, #168]	; (80017e4 <HAL_TIM_Base_MspInit+0x120>)
 800173c:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch1.Init.Channel = DMA_CHANNEL_3;
 800173e:	4b28      	ldr	r3, [pc, #160]	; (80017e0 <HAL_TIM_Base_MspInit+0x11c>)
 8001740:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8001744:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001746:	4b26      	ldr	r3, [pc, #152]	; (80017e0 <HAL_TIM_Base_MspInit+0x11c>)
 8001748:	2200      	movs	r2, #0
 800174a:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800174c:	4b24      	ldr	r3, [pc, #144]	; (80017e0 <HAL_TIM_Base_MspInit+0x11c>)
 800174e:	2200      	movs	r2, #0
 8001750:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001752:	4b23      	ldr	r3, [pc, #140]	; (80017e0 <HAL_TIM_Base_MspInit+0x11c>)
 8001754:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001758:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800175a:	4b21      	ldr	r3, [pc, #132]	; (80017e0 <HAL_TIM_Base_MspInit+0x11c>)
 800175c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001760:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001762:	4b1f      	ldr	r3, [pc, #124]	; (80017e0 <HAL_TIM_Base_MspInit+0x11c>)
 8001764:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001768:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch1.Init.Mode = DMA_CIRCULAR;
 800176a:	4b1d      	ldr	r3, [pc, #116]	; (80017e0 <HAL_TIM_Base_MspInit+0x11c>)
 800176c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001770:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8001772:	4b1b      	ldr	r3, [pc, #108]	; (80017e0 <HAL_TIM_Base_MspInit+0x11c>)
 8001774:	2200      	movs	r2, #0
 8001776:	621a      	str	r2, [r3, #32]
    hdma_tim2_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001778:	4b19      	ldr	r3, [pc, #100]	; (80017e0 <HAL_TIM_Base_MspInit+0x11c>)
 800177a:	2200      	movs	r2, #0
 800177c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK)
 800177e:	4818      	ldr	r0, [pc, #96]	; (80017e0 <HAL_TIM_Base_MspInit+0x11c>)
 8001780:	f000 fba6 	bl	8001ed0 <HAL_DMA_Init>
 8001784:	4603      	mov	r3, r0
 8001786:	2b00      	cmp	r3, #0
 8001788:	d001      	beq.n	800178e <HAL_TIM_Base_MspInit+0xca>
    {
      Error_Handler();
 800178a:	f7ff ff69 	bl	8001660 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim2_ch1);
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	4a13      	ldr	r2, [pc, #76]	; (80017e0 <HAL_TIM_Base_MspInit+0x11c>)
 8001792:	625a      	str	r2, [r3, #36]	; 0x24
 8001794:	4a12      	ldr	r2, [pc, #72]	; (80017e0 <HAL_TIM_Base_MspInit+0x11c>)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	6393      	str	r3, [r2, #56]	; 0x38

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800179a:	2200      	movs	r2, #0
 800179c:	2100      	movs	r1, #0
 800179e:	201c      	movs	r0, #28
 80017a0:	f000 fb5f 	bl	8001e62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80017a4:	201c      	movs	r0, #28
 80017a6:	f000 fb78 	bl	8001e9a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }

}
 80017aa:	e010      	b.n	80017ce <HAL_TIM_Base_MspInit+0x10a>
  else if(htim_base->Instance==TIM9)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	4a0d      	ldr	r2, [pc, #52]	; (80017e8 <HAL_TIM_Base_MspInit+0x124>)
 80017b2:	4293      	cmp	r3, r2
 80017b4:	d10b      	bne.n	80017ce <HAL_TIM_Base_MspInit+0x10a>
    __HAL_RCC_TIM9_CLK_ENABLE();
 80017b6:	4b08      	ldr	r3, [pc, #32]	; (80017d8 <HAL_TIM_Base_MspInit+0x114>)
 80017b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017ba:	4a07      	ldr	r2, [pc, #28]	; (80017d8 <HAL_TIM_Base_MspInit+0x114>)
 80017bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017c0:	6453      	str	r3, [r2, #68]	; 0x44
 80017c2:	4b05      	ldr	r3, [pc, #20]	; (80017d8 <HAL_TIM_Base_MspInit+0x114>)
 80017c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017ca:	60bb      	str	r3, [r7, #8]
 80017cc:	68bb      	ldr	r3, [r7, #8]
}
 80017ce:	bf00      	nop
 80017d0:	3728      	adds	r7, #40	; 0x28
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}
 80017d6:	bf00      	nop
 80017d8:	40023800 	.word	0x40023800
 80017dc:	40020000 	.word	0x40020000
 80017e0:	20000290 	.word	0x20000290
 80017e4:	40026088 	.word	0x40026088
 80017e8:	40014000 	.word	0x40014000

080017ec <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b08a      	sub	sp, #40	; 0x28
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017f4:	f107 0314 	add.w	r3, r7, #20
 80017f8:	2200      	movs	r2, #0
 80017fa:	601a      	str	r2, [r3, #0]
 80017fc:	605a      	str	r2, [r3, #4]
 80017fe:	609a      	str	r2, [r3, #8]
 8001800:	60da      	str	r2, [r3, #12]
 8001802:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800180c:	d11c      	bne.n	8001848 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800180e:	4b21      	ldr	r3, [pc, #132]	; (8001894 <HAL_TIM_MspPostInit+0xa8>)
 8001810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001812:	4a20      	ldr	r2, [pc, #128]	; (8001894 <HAL_TIM_MspPostInit+0xa8>)
 8001814:	f043 0301 	orr.w	r3, r3, #1
 8001818:	6313      	str	r3, [r2, #48]	; 0x30
 800181a:	4b1e      	ldr	r3, [pc, #120]	; (8001894 <HAL_TIM_MspPostInit+0xa8>)
 800181c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800181e:	f003 0301 	and.w	r3, r3, #1
 8001822:	613b      	str	r3, [r7, #16]
 8001824:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001826:	2302      	movs	r3, #2
 8001828:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800182a:	2302      	movs	r3, #2
 800182c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800182e:	2300      	movs	r3, #0
 8001830:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001832:	2300      	movs	r3, #0
 8001834:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001836:	2301      	movs	r3, #1
 8001838:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800183a:	f107 0314 	add.w	r3, r7, #20
 800183e:	4619      	mov	r1, r3
 8001840:	4815      	ldr	r0, [pc, #84]	; (8001898 <HAL_TIM_MspPostInit+0xac>)
 8001842:	f000 febd 	bl	80025c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM9_MspPostInit 1 */

  /* USER CODE END TIM9_MspPostInit 1 */
  }

}
 8001846:	e020      	b.n	800188a <HAL_TIM_MspPostInit+0x9e>
  else if(htim->Instance==TIM9)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	4a13      	ldr	r2, [pc, #76]	; (800189c <HAL_TIM_MspPostInit+0xb0>)
 800184e:	4293      	cmp	r3, r2
 8001850:	d11b      	bne.n	800188a <HAL_TIM_MspPostInit+0x9e>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001852:	4b10      	ldr	r3, [pc, #64]	; (8001894 <HAL_TIM_MspPostInit+0xa8>)
 8001854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001856:	4a0f      	ldr	r2, [pc, #60]	; (8001894 <HAL_TIM_MspPostInit+0xa8>)
 8001858:	f043 0310 	orr.w	r3, r3, #16
 800185c:	6313      	str	r3, [r2, #48]	; 0x30
 800185e:	4b0d      	ldr	r3, [pc, #52]	; (8001894 <HAL_TIM_MspPostInit+0xa8>)
 8001860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001862:	f003 0310 	and.w	r3, r3, #16
 8001866:	60fb      	str	r3, [r7, #12]
 8001868:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800186a:	2320      	movs	r3, #32
 800186c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800186e:	2302      	movs	r3, #2
 8001870:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001872:	2300      	movs	r3, #0
 8001874:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001876:	2300      	movs	r3, #0
 8001878:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 800187a:	2303      	movs	r3, #3
 800187c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800187e:	f107 0314 	add.w	r3, r7, #20
 8001882:	4619      	mov	r1, r3
 8001884:	4806      	ldr	r0, [pc, #24]	; (80018a0 <HAL_TIM_MspPostInit+0xb4>)
 8001886:	f000 fe9b 	bl	80025c0 <HAL_GPIO_Init>
}
 800188a:	bf00      	nop
 800188c:	3728      	adds	r7, #40	; 0x28
 800188e:	46bd      	mov	sp, r7
 8001890:	bd80      	pop	{r7, pc}
 8001892:	bf00      	nop
 8001894:	40023800 	.word	0x40023800
 8001898:	40020000 	.word	0x40020000
 800189c:	40014000 	.word	0x40014000
 80018a0:	40021000 	.word	0x40021000

080018a4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b0aa      	sub	sp, #168	; 0xa8
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018ac:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80018b0:	2200      	movs	r2, #0
 80018b2:	601a      	str	r2, [r3, #0]
 80018b4:	605a      	str	r2, [r3, #4]
 80018b6:	609a      	str	r2, [r3, #8]
 80018b8:	60da      	str	r2, [r3, #12]
 80018ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80018bc:	f107 0314 	add.w	r3, r7, #20
 80018c0:	2280      	movs	r2, #128	; 0x80
 80018c2:	2100      	movs	r1, #0
 80018c4:	4618      	mov	r0, r3
 80018c6:	f004 fdc5 	bl	8006454 <memset>
  if(huart->Instance==USART6)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	4a22      	ldr	r2, [pc, #136]	; (8001958 <HAL_UART_MspInit+0xb4>)
 80018d0:	4293      	cmp	r3, r2
 80018d2:	d13c      	bne.n	800194e <HAL_UART_MspInit+0xaa>
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 80018d4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80018d8:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 80018da:	2300      	movs	r3, #0
 80018dc:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80018de:	f107 0314 	add.w	r3, r7, #20
 80018e2:	4618      	mov	r0, r3
 80018e4:	f001 fd16 	bl	8003314 <HAL_RCCEx_PeriphCLKConfig>
 80018e8:	4603      	mov	r3, r0
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d001      	beq.n	80018f2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80018ee:	f7ff feb7 	bl	8001660 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 80018f2:	4b1a      	ldr	r3, [pc, #104]	; (800195c <HAL_UART_MspInit+0xb8>)
 80018f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018f6:	4a19      	ldr	r2, [pc, #100]	; (800195c <HAL_UART_MspInit+0xb8>)
 80018f8:	f043 0320 	orr.w	r3, r3, #32
 80018fc:	6453      	str	r3, [r2, #68]	; 0x44
 80018fe:	4b17      	ldr	r3, [pc, #92]	; (800195c <HAL_UART_MspInit+0xb8>)
 8001900:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001902:	f003 0320 	and.w	r3, r3, #32
 8001906:	613b      	str	r3, [r7, #16]
 8001908:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 800190a:	4b14      	ldr	r3, [pc, #80]	; (800195c <HAL_UART_MspInit+0xb8>)
 800190c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800190e:	4a13      	ldr	r2, [pc, #76]	; (800195c <HAL_UART_MspInit+0xb8>)
 8001910:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001914:	6313      	str	r3, [r2, #48]	; 0x30
 8001916:	4b11      	ldr	r3, [pc, #68]	; (800195c <HAL_UART_MspInit+0xb8>)
 8001918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800191a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800191e:	60fb      	str	r3, [r7, #12]
 8001920:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PG14     ------> USART6_TX
    PG9     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_9;
 8001922:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 8001926:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800192a:	2302      	movs	r3, #2
 800192c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001930:	2300      	movs	r3, #0
 8001932:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001936:	2303      	movs	r3, #3
 8001938:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800193c:	2308      	movs	r3, #8
 800193e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001942:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001946:	4619      	mov	r1, r3
 8001948:	4805      	ldr	r0, [pc, #20]	; (8001960 <HAL_UART_MspInit+0xbc>)
 800194a:	f000 fe39 	bl	80025c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 800194e:	bf00      	nop
 8001950:	37a8      	adds	r7, #168	; 0xa8
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}
 8001956:	bf00      	nop
 8001958:	40011400 	.word	0x40011400
 800195c:	40023800 	.word	0x40023800
 8001960:	40021800 	.word	0x40021800

08001964 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001964:	b480      	push	{r7}
 8001966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001968:	e7fe      	b.n	8001968 <NMI_Handler+0x4>

0800196a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800196a:	b480      	push	{r7}
 800196c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800196e:	e7fe      	b.n	800196e <HardFault_Handler+0x4>

08001970 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001970:	b480      	push	{r7}
 8001972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001974:	e7fe      	b.n	8001974 <MemManage_Handler+0x4>

08001976 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001976:	b480      	push	{r7}
 8001978:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800197a:	e7fe      	b.n	800197a <BusFault_Handler+0x4>

0800197c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800197c:	b480      	push	{r7}
 800197e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001980:	e7fe      	b.n	8001980 <UsageFault_Handler+0x4>

08001982 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001982:	b480      	push	{r7}
 8001984:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001986:	bf00      	nop
 8001988:	46bd      	mov	sp, r7
 800198a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198e:	4770      	bx	lr

08001990 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001990:	b480      	push	{r7}
 8001992:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001994:	bf00      	nop
 8001996:	46bd      	mov	sp, r7
 8001998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199c:	4770      	bx	lr

0800199e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800199e:	b480      	push	{r7}
 80019a0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80019a2:	bf00      	nop
 80019a4:	46bd      	mov	sp, r7
 80019a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019aa:	4770      	bx	lr

080019ac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019b0:	f000 f938 	bl	8001c24 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019b4:	bf00      	nop
 80019b6:	bd80      	pop	{r7, pc}

080019b8 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch1);
 80019bc:	4802      	ldr	r0, [pc, #8]	; (80019c8 <DMA1_Stream5_IRQHandler+0x10>)
 80019be:	f000 fb95 	bl	80020ec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80019c2:	bf00      	nop
 80019c4:	bd80      	pop	{r7, pc}
 80019c6:	bf00      	nop
 80019c8:	20000290 	.word	0x20000290

080019cc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80019d0:	4802      	ldr	r0, [pc, #8]	; (80019dc <TIM2_IRQHandler+0x10>)
 80019d2:	f002 fd79 	bl	80044c8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80019d6:	bf00      	nop
 80019d8:	bd80      	pop	{r7, pc}
 80019da:	bf00      	nop
 80019dc:	200001f8 	.word	0x200001f8

080019e0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80019e0:	b480      	push	{r7}
 80019e2:	af00      	add	r7, sp, #0
	return 1;
 80019e4:	2301      	movs	r3, #1
}
 80019e6:	4618      	mov	r0, r3
 80019e8:	46bd      	mov	sp, r7
 80019ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ee:	4770      	bx	lr

080019f0 <_kill>:

int _kill(int pid, int sig)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b082      	sub	sp, #8
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
 80019f8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80019fa:	f004 fd01 	bl	8006400 <__errno>
 80019fe:	4603      	mov	r3, r0
 8001a00:	2216      	movs	r2, #22
 8001a02:	601a      	str	r2, [r3, #0]
	return -1;
 8001a04:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a08:	4618      	mov	r0, r3
 8001a0a:	3708      	adds	r7, #8
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	bd80      	pop	{r7, pc}

08001a10 <_exit>:

void _exit (int status)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b082      	sub	sp, #8
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001a18:	f04f 31ff 	mov.w	r1, #4294967295
 8001a1c:	6878      	ldr	r0, [r7, #4]
 8001a1e:	f7ff ffe7 	bl	80019f0 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001a22:	e7fe      	b.n	8001a22 <_exit+0x12>

08001a24 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b086      	sub	sp, #24
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	60f8      	str	r0, [r7, #12]
 8001a2c:	60b9      	str	r1, [r7, #8]
 8001a2e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a30:	2300      	movs	r3, #0
 8001a32:	617b      	str	r3, [r7, #20]
 8001a34:	e00a      	b.n	8001a4c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001a36:	f3af 8000 	nop.w
 8001a3a:	4601      	mov	r1, r0
 8001a3c:	68bb      	ldr	r3, [r7, #8]
 8001a3e:	1c5a      	adds	r2, r3, #1
 8001a40:	60ba      	str	r2, [r7, #8]
 8001a42:	b2ca      	uxtb	r2, r1
 8001a44:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a46:	697b      	ldr	r3, [r7, #20]
 8001a48:	3301      	adds	r3, #1
 8001a4a:	617b      	str	r3, [r7, #20]
 8001a4c:	697a      	ldr	r2, [r7, #20]
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	429a      	cmp	r2, r3
 8001a52:	dbf0      	blt.n	8001a36 <_read+0x12>
	}

return len;
 8001a54:	687b      	ldr	r3, [r7, #4]
}
 8001a56:	4618      	mov	r0, r3
 8001a58:	3718      	adds	r7, #24
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bd80      	pop	{r7, pc}

08001a5e <_close>:
	}
	return len;
}

int _close(int file)
{
 8001a5e:	b480      	push	{r7}
 8001a60:	b083      	sub	sp, #12
 8001a62:	af00      	add	r7, sp, #0
 8001a64:	6078      	str	r0, [r7, #4]
	return -1;
 8001a66:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	370c      	adds	r7, #12
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a74:	4770      	bx	lr

08001a76 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001a76:	b480      	push	{r7}
 8001a78:	b083      	sub	sp, #12
 8001a7a:	af00      	add	r7, sp, #0
 8001a7c:	6078      	str	r0, [r7, #4]
 8001a7e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001a86:	605a      	str	r2, [r3, #4]
	return 0;
 8001a88:	2300      	movs	r3, #0
}
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	370c      	adds	r7, #12
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a94:	4770      	bx	lr

08001a96 <_isatty>:

int _isatty(int file)
{
 8001a96:	b480      	push	{r7}
 8001a98:	b083      	sub	sp, #12
 8001a9a:	af00      	add	r7, sp, #0
 8001a9c:	6078      	str	r0, [r7, #4]
	return 1;
 8001a9e:	2301      	movs	r3, #1
}
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	370c      	adds	r7, #12
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aaa:	4770      	bx	lr

08001aac <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001aac:	b480      	push	{r7}
 8001aae:	b085      	sub	sp, #20
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	60f8      	str	r0, [r7, #12]
 8001ab4:	60b9      	str	r1, [r7, #8]
 8001ab6:	607a      	str	r2, [r7, #4]
	return 0;
 8001ab8:	2300      	movs	r3, #0
}
 8001aba:	4618      	mov	r0, r3
 8001abc:	3714      	adds	r7, #20
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac4:	4770      	bx	lr
	...

08001ac8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b086      	sub	sp, #24
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ad0:	4a14      	ldr	r2, [pc, #80]	; (8001b24 <_sbrk+0x5c>)
 8001ad2:	4b15      	ldr	r3, [pc, #84]	; (8001b28 <_sbrk+0x60>)
 8001ad4:	1ad3      	subs	r3, r2, r3
 8001ad6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ad8:	697b      	ldr	r3, [r7, #20]
 8001ada:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001adc:	4b13      	ldr	r3, [pc, #76]	; (8001b2c <_sbrk+0x64>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d102      	bne.n	8001aea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ae4:	4b11      	ldr	r3, [pc, #68]	; (8001b2c <_sbrk+0x64>)
 8001ae6:	4a12      	ldr	r2, [pc, #72]	; (8001b30 <_sbrk+0x68>)
 8001ae8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001aea:	4b10      	ldr	r3, [pc, #64]	; (8001b2c <_sbrk+0x64>)
 8001aec:	681a      	ldr	r2, [r3, #0]
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	4413      	add	r3, r2
 8001af2:	693a      	ldr	r2, [r7, #16]
 8001af4:	429a      	cmp	r2, r3
 8001af6:	d207      	bcs.n	8001b08 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001af8:	f004 fc82 	bl	8006400 <__errno>
 8001afc:	4603      	mov	r3, r0
 8001afe:	220c      	movs	r2, #12
 8001b00:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b02:	f04f 33ff 	mov.w	r3, #4294967295
 8001b06:	e009      	b.n	8001b1c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b08:	4b08      	ldr	r3, [pc, #32]	; (8001b2c <_sbrk+0x64>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b0e:	4b07      	ldr	r3, [pc, #28]	; (8001b2c <_sbrk+0x64>)
 8001b10:	681a      	ldr	r2, [r3, #0]
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	4413      	add	r3, r2
 8001b16:	4a05      	ldr	r2, [pc, #20]	; (8001b2c <_sbrk+0x64>)
 8001b18:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b1a:	68fb      	ldr	r3, [r7, #12]
}
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	3718      	adds	r7, #24
 8001b20:	46bd      	mov	sp, r7
 8001b22:	bd80      	pop	{r7, pc}
 8001b24:	20040000 	.word	0x20040000
 8001b28:	00000400 	.word	0x00000400
 8001b2c:	2000039c 	.word	0x2000039c
 8001b30:	200003b8 	.word	0x200003b8

08001b34 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b34:	b480      	push	{r7}
 8001b36:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b38:	4b06      	ldr	r3, [pc, #24]	; (8001b54 <SystemInit+0x20>)
 8001b3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b3e:	4a05      	ldr	r2, [pc, #20]	; (8001b54 <SystemInit+0x20>)
 8001b40:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b44:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b48:	bf00      	nop
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b50:	4770      	bx	lr
 8001b52:	bf00      	nop
 8001b54:	e000ed00 	.word	0xe000ed00

08001b58 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001b58:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b90 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001b5c:	480d      	ldr	r0, [pc, #52]	; (8001b94 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001b5e:	490e      	ldr	r1, [pc, #56]	; (8001b98 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001b60:	4a0e      	ldr	r2, [pc, #56]	; (8001b9c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001b62:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b64:	e002      	b.n	8001b6c <LoopCopyDataInit>

08001b66 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b66:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b68:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b6a:	3304      	adds	r3, #4

08001b6c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b6c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b6e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b70:	d3f9      	bcc.n	8001b66 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b72:	4a0b      	ldr	r2, [pc, #44]	; (8001ba0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001b74:	4c0b      	ldr	r4, [pc, #44]	; (8001ba4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001b76:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b78:	e001      	b.n	8001b7e <LoopFillZerobss>

08001b7a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b7a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b7c:	3204      	adds	r2, #4

08001b7e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b7e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b80:	d3fb      	bcc.n	8001b7a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001b82:	f7ff ffd7 	bl	8001b34 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b86:	f004 fc41 	bl	800640c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b8a:	f7ff fa1b 	bl	8000fc4 <main>
  bx  lr    
 8001b8e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001b90:	20040000 	.word	0x20040000
  ldr r0, =_sdata
 8001b94:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b98:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8001b9c:	080093e4 	.word	0x080093e4
  ldr r2, =_sbss
 8001ba0:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8001ba4:	200003b4 	.word	0x200003b4

08001ba8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ba8:	e7fe      	b.n	8001ba8 <ADC_IRQHandler>

08001baa <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001baa:	b580      	push	{r7, lr}
 8001bac:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001bae:	2003      	movs	r0, #3
 8001bb0:	f000 f94c 	bl	8001e4c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001bb4:	2000      	movs	r0, #0
 8001bb6:	f000 f805 	bl	8001bc4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001bba:	f7ff fd5f 	bl	800167c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001bbe:	2300      	movs	r3, #0
}
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	bd80      	pop	{r7, pc}

08001bc4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b082      	sub	sp, #8
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001bcc:	4b12      	ldr	r3, [pc, #72]	; (8001c18 <HAL_InitTick+0x54>)
 8001bce:	681a      	ldr	r2, [r3, #0]
 8001bd0:	4b12      	ldr	r3, [pc, #72]	; (8001c1c <HAL_InitTick+0x58>)
 8001bd2:	781b      	ldrb	r3, [r3, #0]
 8001bd4:	4619      	mov	r1, r3
 8001bd6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001bda:	fbb3 f3f1 	udiv	r3, r3, r1
 8001bde:	fbb2 f3f3 	udiv	r3, r2, r3
 8001be2:	4618      	mov	r0, r3
 8001be4:	f000 f967 	bl	8001eb6 <HAL_SYSTICK_Config>
 8001be8:	4603      	mov	r3, r0
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d001      	beq.n	8001bf2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001bee:	2301      	movs	r3, #1
 8001bf0:	e00e      	b.n	8001c10 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	2b0f      	cmp	r3, #15
 8001bf6:	d80a      	bhi.n	8001c0e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	6879      	ldr	r1, [r7, #4]
 8001bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8001c00:	f000 f92f 	bl	8001e62 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c04:	4a06      	ldr	r2, [pc, #24]	; (8001c20 <HAL_InitTick+0x5c>)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	e000      	b.n	8001c10 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c0e:	2301      	movs	r3, #1
}
 8001c10:	4618      	mov	r0, r3
 8001c12:	3708      	adds	r7, #8
 8001c14:	46bd      	mov	sp, r7
 8001c16:	bd80      	pop	{r7, pc}
 8001c18:	20000000 	.word	0x20000000
 8001c1c:	20000008 	.word	0x20000008
 8001c20:	20000004 	.word	0x20000004

08001c24 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c24:	b480      	push	{r7}
 8001c26:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c28:	4b06      	ldr	r3, [pc, #24]	; (8001c44 <HAL_IncTick+0x20>)
 8001c2a:	781b      	ldrb	r3, [r3, #0]
 8001c2c:	461a      	mov	r2, r3
 8001c2e:	4b06      	ldr	r3, [pc, #24]	; (8001c48 <HAL_IncTick+0x24>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	4413      	add	r3, r2
 8001c34:	4a04      	ldr	r2, [pc, #16]	; (8001c48 <HAL_IncTick+0x24>)
 8001c36:	6013      	str	r3, [r2, #0]
}
 8001c38:	bf00      	nop
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c40:	4770      	bx	lr
 8001c42:	bf00      	nop
 8001c44:	20000008 	.word	0x20000008
 8001c48:	200003a0 	.word	0x200003a0

08001c4c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	af00      	add	r7, sp, #0
  return uwTick;
 8001c50:	4b03      	ldr	r3, [pc, #12]	; (8001c60 <HAL_GetTick+0x14>)
 8001c52:	681b      	ldr	r3, [r3, #0]
}
 8001c54:	4618      	mov	r0, r3
 8001c56:	46bd      	mov	sp, r7
 8001c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5c:	4770      	bx	lr
 8001c5e:	bf00      	nop
 8001c60:	200003a0 	.word	0x200003a0

08001c64 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b084      	sub	sp, #16
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c6c:	f7ff ffee 	bl	8001c4c <HAL_GetTick>
 8001c70:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c7c:	d005      	beq.n	8001c8a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c7e:	4b0a      	ldr	r3, [pc, #40]	; (8001ca8 <HAL_Delay+0x44>)
 8001c80:	781b      	ldrb	r3, [r3, #0]
 8001c82:	461a      	mov	r2, r3
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	4413      	add	r3, r2
 8001c88:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001c8a:	bf00      	nop
 8001c8c:	f7ff ffde 	bl	8001c4c <HAL_GetTick>
 8001c90:	4602      	mov	r2, r0
 8001c92:	68bb      	ldr	r3, [r7, #8]
 8001c94:	1ad3      	subs	r3, r2, r3
 8001c96:	68fa      	ldr	r2, [r7, #12]
 8001c98:	429a      	cmp	r2, r3
 8001c9a:	d8f7      	bhi.n	8001c8c <HAL_Delay+0x28>
  {
  }
}
 8001c9c:	bf00      	nop
 8001c9e:	bf00      	nop
 8001ca0:	3710      	adds	r7, #16
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bd80      	pop	{r7, pc}
 8001ca6:	bf00      	nop
 8001ca8:	20000008 	.word	0x20000008

08001cac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cac:	b480      	push	{r7}
 8001cae:	b085      	sub	sp, #20
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	f003 0307 	and.w	r3, r3, #7
 8001cba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001cbc:	4b0b      	ldr	r3, [pc, #44]	; (8001cec <__NVIC_SetPriorityGrouping+0x40>)
 8001cbe:	68db      	ldr	r3, [r3, #12]
 8001cc0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001cc2:	68ba      	ldr	r2, [r7, #8]
 8001cc4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001cc8:	4013      	ands	r3, r2
 8001cca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001cd0:	68bb      	ldr	r3, [r7, #8]
 8001cd2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001cd4:	4b06      	ldr	r3, [pc, #24]	; (8001cf0 <__NVIC_SetPriorityGrouping+0x44>)
 8001cd6:	4313      	orrs	r3, r2
 8001cd8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001cda:	4a04      	ldr	r2, [pc, #16]	; (8001cec <__NVIC_SetPriorityGrouping+0x40>)
 8001cdc:	68bb      	ldr	r3, [r7, #8]
 8001cde:	60d3      	str	r3, [r2, #12]
}
 8001ce0:	bf00      	nop
 8001ce2:	3714      	adds	r7, #20
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cea:	4770      	bx	lr
 8001cec:	e000ed00 	.word	0xe000ed00
 8001cf0:	05fa0000 	.word	0x05fa0000

08001cf4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001cf8:	4b04      	ldr	r3, [pc, #16]	; (8001d0c <__NVIC_GetPriorityGrouping+0x18>)
 8001cfa:	68db      	ldr	r3, [r3, #12]
 8001cfc:	0a1b      	lsrs	r3, r3, #8
 8001cfe:	f003 0307 	and.w	r3, r3, #7
}
 8001d02:	4618      	mov	r0, r3
 8001d04:	46bd      	mov	sp, r7
 8001d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0a:	4770      	bx	lr
 8001d0c:	e000ed00 	.word	0xe000ed00

08001d10 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d10:	b480      	push	{r7}
 8001d12:	b083      	sub	sp, #12
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	4603      	mov	r3, r0
 8001d18:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	db0b      	blt.n	8001d3a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d22:	79fb      	ldrb	r3, [r7, #7]
 8001d24:	f003 021f 	and.w	r2, r3, #31
 8001d28:	4907      	ldr	r1, [pc, #28]	; (8001d48 <__NVIC_EnableIRQ+0x38>)
 8001d2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d2e:	095b      	lsrs	r3, r3, #5
 8001d30:	2001      	movs	r0, #1
 8001d32:	fa00 f202 	lsl.w	r2, r0, r2
 8001d36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001d3a:	bf00      	nop
 8001d3c:	370c      	adds	r7, #12
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d44:	4770      	bx	lr
 8001d46:	bf00      	nop
 8001d48:	e000e100 	.word	0xe000e100

08001d4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	b083      	sub	sp, #12
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	4603      	mov	r3, r0
 8001d54:	6039      	str	r1, [r7, #0]
 8001d56:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	db0a      	blt.n	8001d76 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	b2da      	uxtb	r2, r3
 8001d64:	490c      	ldr	r1, [pc, #48]	; (8001d98 <__NVIC_SetPriority+0x4c>)
 8001d66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d6a:	0112      	lsls	r2, r2, #4
 8001d6c:	b2d2      	uxtb	r2, r2
 8001d6e:	440b      	add	r3, r1
 8001d70:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d74:	e00a      	b.n	8001d8c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d76:	683b      	ldr	r3, [r7, #0]
 8001d78:	b2da      	uxtb	r2, r3
 8001d7a:	4908      	ldr	r1, [pc, #32]	; (8001d9c <__NVIC_SetPriority+0x50>)
 8001d7c:	79fb      	ldrb	r3, [r7, #7]
 8001d7e:	f003 030f 	and.w	r3, r3, #15
 8001d82:	3b04      	subs	r3, #4
 8001d84:	0112      	lsls	r2, r2, #4
 8001d86:	b2d2      	uxtb	r2, r2
 8001d88:	440b      	add	r3, r1
 8001d8a:	761a      	strb	r2, [r3, #24]
}
 8001d8c:	bf00      	nop
 8001d8e:	370c      	adds	r7, #12
 8001d90:	46bd      	mov	sp, r7
 8001d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d96:	4770      	bx	lr
 8001d98:	e000e100 	.word	0xe000e100
 8001d9c:	e000ed00 	.word	0xe000ed00

08001da0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001da0:	b480      	push	{r7}
 8001da2:	b089      	sub	sp, #36	; 0x24
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	60f8      	str	r0, [r7, #12]
 8001da8:	60b9      	str	r1, [r7, #8]
 8001daa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	f003 0307 	and.w	r3, r3, #7
 8001db2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001db4:	69fb      	ldr	r3, [r7, #28]
 8001db6:	f1c3 0307 	rsb	r3, r3, #7
 8001dba:	2b04      	cmp	r3, #4
 8001dbc:	bf28      	it	cs
 8001dbe:	2304      	movcs	r3, #4
 8001dc0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001dc2:	69fb      	ldr	r3, [r7, #28]
 8001dc4:	3304      	adds	r3, #4
 8001dc6:	2b06      	cmp	r3, #6
 8001dc8:	d902      	bls.n	8001dd0 <NVIC_EncodePriority+0x30>
 8001dca:	69fb      	ldr	r3, [r7, #28]
 8001dcc:	3b03      	subs	r3, #3
 8001dce:	e000      	b.n	8001dd2 <NVIC_EncodePriority+0x32>
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dd4:	f04f 32ff 	mov.w	r2, #4294967295
 8001dd8:	69bb      	ldr	r3, [r7, #24]
 8001dda:	fa02 f303 	lsl.w	r3, r2, r3
 8001dde:	43da      	mvns	r2, r3
 8001de0:	68bb      	ldr	r3, [r7, #8]
 8001de2:	401a      	ands	r2, r3
 8001de4:	697b      	ldr	r3, [r7, #20]
 8001de6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001de8:	f04f 31ff 	mov.w	r1, #4294967295
 8001dec:	697b      	ldr	r3, [r7, #20]
 8001dee:	fa01 f303 	lsl.w	r3, r1, r3
 8001df2:	43d9      	mvns	r1, r3
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001df8:	4313      	orrs	r3, r2
         );
}
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	3724      	adds	r7, #36	; 0x24
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e04:	4770      	bx	lr
	...

08001e08 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b082      	sub	sp, #8
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	3b01      	subs	r3, #1
 8001e14:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e18:	d301      	bcc.n	8001e1e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	e00f      	b.n	8001e3e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e1e:	4a0a      	ldr	r2, [pc, #40]	; (8001e48 <SysTick_Config+0x40>)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	3b01      	subs	r3, #1
 8001e24:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e26:	210f      	movs	r1, #15
 8001e28:	f04f 30ff 	mov.w	r0, #4294967295
 8001e2c:	f7ff ff8e 	bl	8001d4c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e30:	4b05      	ldr	r3, [pc, #20]	; (8001e48 <SysTick_Config+0x40>)
 8001e32:	2200      	movs	r2, #0
 8001e34:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e36:	4b04      	ldr	r3, [pc, #16]	; (8001e48 <SysTick_Config+0x40>)
 8001e38:	2207      	movs	r2, #7
 8001e3a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e3c:	2300      	movs	r3, #0
}
 8001e3e:	4618      	mov	r0, r3
 8001e40:	3708      	adds	r7, #8
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bd80      	pop	{r7, pc}
 8001e46:	bf00      	nop
 8001e48:	e000e010 	.word	0xe000e010

08001e4c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b082      	sub	sp, #8
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e54:	6878      	ldr	r0, [r7, #4]
 8001e56:	f7ff ff29 	bl	8001cac <__NVIC_SetPriorityGrouping>
}
 8001e5a:	bf00      	nop
 8001e5c:	3708      	adds	r7, #8
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bd80      	pop	{r7, pc}

08001e62 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e62:	b580      	push	{r7, lr}
 8001e64:	b086      	sub	sp, #24
 8001e66:	af00      	add	r7, sp, #0
 8001e68:	4603      	mov	r3, r0
 8001e6a:	60b9      	str	r1, [r7, #8]
 8001e6c:	607a      	str	r2, [r7, #4]
 8001e6e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001e70:	2300      	movs	r3, #0
 8001e72:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e74:	f7ff ff3e 	bl	8001cf4 <__NVIC_GetPriorityGrouping>
 8001e78:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e7a:	687a      	ldr	r2, [r7, #4]
 8001e7c:	68b9      	ldr	r1, [r7, #8]
 8001e7e:	6978      	ldr	r0, [r7, #20]
 8001e80:	f7ff ff8e 	bl	8001da0 <NVIC_EncodePriority>
 8001e84:	4602      	mov	r2, r0
 8001e86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e8a:	4611      	mov	r1, r2
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	f7ff ff5d 	bl	8001d4c <__NVIC_SetPriority>
}
 8001e92:	bf00      	nop
 8001e94:	3718      	adds	r7, #24
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bd80      	pop	{r7, pc}

08001e9a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e9a:	b580      	push	{r7, lr}
 8001e9c:	b082      	sub	sp, #8
 8001e9e:	af00      	add	r7, sp, #0
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ea4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	f7ff ff31 	bl	8001d10 <__NVIC_EnableIRQ>
}
 8001eae:	bf00      	nop
 8001eb0:	3708      	adds	r7, #8
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bd80      	pop	{r7, pc}

08001eb6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001eb6:	b580      	push	{r7, lr}
 8001eb8:	b082      	sub	sp, #8
 8001eba:	af00      	add	r7, sp, #0
 8001ebc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ebe:	6878      	ldr	r0, [r7, #4]
 8001ec0:	f7ff ffa2 	bl	8001e08 <SysTick_Config>
 8001ec4:	4603      	mov	r3, r0
}
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	3708      	adds	r7, #8
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bd80      	pop	{r7, pc}
	...

08001ed0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b086      	sub	sp, #24
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001edc:	f7ff feb6 	bl	8001c4c <HAL_GetTick>
 8001ee0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d101      	bne.n	8001eec <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001ee8:	2301      	movs	r3, #1
 8001eea:	e099      	b.n	8002020 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	2202      	movs	r2, #2
 8001ef0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	681a      	ldr	r2, [r3, #0]
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f022 0201 	bic.w	r2, r2, #1
 8001f0a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f0c:	e00f      	b.n	8001f2e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001f0e:	f7ff fe9d 	bl	8001c4c <HAL_GetTick>
 8001f12:	4602      	mov	r2, r0
 8001f14:	693b      	ldr	r3, [r7, #16]
 8001f16:	1ad3      	subs	r3, r2, r3
 8001f18:	2b05      	cmp	r3, #5
 8001f1a:	d908      	bls.n	8001f2e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	2220      	movs	r2, #32
 8001f20:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	2203      	movs	r2, #3
 8001f26:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001f2a:	2303      	movs	r3, #3
 8001f2c:	e078      	b.n	8002020 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f003 0301 	and.w	r3, r3, #1
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d1e8      	bne.n	8001f0e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001f44:	697a      	ldr	r2, [r7, #20]
 8001f46:	4b38      	ldr	r3, [pc, #224]	; (8002028 <HAL_DMA_Init+0x158>)
 8001f48:	4013      	ands	r3, r2
 8001f4a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	685a      	ldr	r2, [r3, #4]
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	689b      	ldr	r3, [r3, #8]
 8001f54:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001f5a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	691b      	ldr	r3, [r3, #16]
 8001f60:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f66:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	699b      	ldr	r3, [r3, #24]
 8001f6c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f72:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	6a1b      	ldr	r3, [r3, #32]
 8001f78:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001f7a:	697a      	ldr	r2, [r7, #20]
 8001f7c:	4313      	orrs	r3, r2
 8001f7e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f84:	2b04      	cmp	r3, #4
 8001f86:	d107      	bne.n	8001f98 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f90:	4313      	orrs	r3, r2
 8001f92:	697a      	ldr	r2, [r7, #20]
 8001f94:	4313      	orrs	r3, r2
 8001f96:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	697a      	ldr	r2, [r7, #20]
 8001f9e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	695b      	ldr	r3, [r3, #20]
 8001fa6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001fa8:	697b      	ldr	r3, [r7, #20]
 8001faa:	f023 0307 	bic.w	r3, r3, #7
 8001fae:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fb4:	697a      	ldr	r2, [r7, #20]
 8001fb6:	4313      	orrs	r3, r2
 8001fb8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fbe:	2b04      	cmp	r3, #4
 8001fc0:	d117      	bne.n	8001ff2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fc6:	697a      	ldr	r2, [r7, #20]
 8001fc8:	4313      	orrs	r3, r2
 8001fca:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d00e      	beq.n	8001ff2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001fd4:	6878      	ldr	r0, [r7, #4]
 8001fd6:	f000 fa77 	bl	80024c8 <DMA_CheckFifoParam>
 8001fda:	4603      	mov	r3, r0
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d008      	beq.n	8001ff2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2240      	movs	r2, #64	; 0x40
 8001fe4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	2201      	movs	r2, #1
 8001fea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001fee:	2301      	movs	r3, #1
 8001ff0:	e016      	b.n	8002020 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	697a      	ldr	r2, [r7, #20]
 8001ff8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001ffa:	6878      	ldr	r0, [r7, #4]
 8001ffc:	f000 fa2e 	bl	800245c <DMA_CalcBaseAndBitshift>
 8002000:	4603      	mov	r3, r0
 8002002:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002008:	223f      	movs	r2, #63	; 0x3f
 800200a:	409a      	lsls	r2, r3
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	2200      	movs	r2, #0
 8002014:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	2201      	movs	r2, #1
 800201a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800201e:	2300      	movs	r3, #0
}
 8002020:	4618      	mov	r0, r3
 8002022:	3718      	adds	r7, #24
 8002024:	46bd      	mov	sp, r7
 8002026:	bd80      	pop	{r7, pc}
 8002028:	e010803f 	.word	0xe010803f

0800202c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b086      	sub	sp, #24
 8002030:	af00      	add	r7, sp, #0
 8002032:	60f8      	str	r0, [r7, #12]
 8002034:	60b9      	str	r1, [r7, #8]
 8002036:	607a      	str	r2, [r7, #4]
 8002038:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800203a:	2300      	movs	r3, #0
 800203c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002042:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800204a:	2b01      	cmp	r3, #1
 800204c:	d101      	bne.n	8002052 <HAL_DMA_Start_IT+0x26>
 800204e:	2302      	movs	r3, #2
 8002050:	e048      	b.n	80020e4 <HAL_DMA_Start_IT+0xb8>
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	2201      	movs	r2, #1
 8002056:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002060:	b2db      	uxtb	r3, r3
 8002062:	2b01      	cmp	r3, #1
 8002064:	d137      	bne.n	80020d6 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	2202      	movs	r2, #2
 800206a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	2200      	movs	r2, #0
 8002072:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	687a      	ldr	r2, [r7, #4]
 8002078:	68b9      	ldr	r1, [r7, #8]
 800207a:	68f8      	ldr	r0, [r7, #12]
 800207c:	f000 f9c0 	bl	8002400 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002084:	223f      	movs	r2, #63	; 0x3f
 8002086:	409a      	lsls	r2, r3
 8002088:	693b      	ldr	r3, [r7, #16]
 800208a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	681a      	ldr	r2, [r3, #0]
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f042 0216 	orr.w	r2, r2, #22
 800209a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	695a      	ldr	r2, [r3, #20]
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80020aa:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d007      	beq.n	80020c4 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	681a      	ldr	r2, [r3, #0]
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f042 0208 	orr.w	r2, r2, #8
 80020c2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	681a      	ldr	r2, [r3, #0]
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f042 0201 	orr.w	r2, r2, #1
 80020d2:	601a      	str	r2, [r3, #0]
 80020d4:	e005      	b.n	80020e2 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	2200      	movs	r2, #0
 80020da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80020de:	2302      	movs	r3, #2
 80020e0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80020e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80020e4:	4618      	mov	r0, r3
 80020e6:	3718      	adds	r7, #24
 80020e8:	46bd      	mov	sp, r7
 80020ea:	bd80      	pop	{r7, pc}

080020ec <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b086      	sub	sp, #24
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 80020f4:	2300      	movs	r3, #0
 80020f6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 80020f8:	4b8e      	ldr	r3, [pc, #568]	; (8002334 <HAL_DMA_IRQHandler+0x248>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	4a8e      	ldr	r2, [pc, #568]	; (8002338 <HAL_DMA_IRQHandler+0x24c>)
 80020fe:	fba2 2303 	umull	r2, r3, r2, r3
 8002102:	0a9b      	lsrs	r3, r3, #10
 8002104:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800210a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800210c:	693b      	ldr	r3, [r7, #16]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002116:	2208      	movs	r2, #8
 8002118:	409a      	lsls	r2, r3
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	4013      	ands	r3, r2
 800211e:	2b00      	cmp	r3, #0
 8002120:	d01a      	beq.n	8002158 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f003 0304 	and.w	r3, r3, #4
 800212c:	2b00      	cmp	r3, #0
 800212e:	d013      	beq.n	8002158 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	681a      	ldr	r2, [r3, #0]
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f022 0204 	bic.w	r2, r2, #4
 800213e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002144:	2208      	movs	r2, #8
 8002146:	409a      	lsls	r2, r3
 8002148:	693b      	ldr	r3, [r7, #16]
 800214a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002150:	f043 0201 	orr.w	r2, r3, #1
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800215c:	2201      	movs	r2, #1
 800215e:	409a      	lsls	r2, r3
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	4013      	ands	r3, r2
 8002164:	2b00      	cmp	r3, #0
 8002166:	d012      	beq.n	800218e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	695b      	ldr	r3, [r3, #20]
 800216e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002172:	2b00      	cmp	r3, #0
 8002174:	d00b      	beq.n	800218e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800217a:	2201      	movs	r2, #1
 800217c:	409a      	lsls	r2, r3
 800217e:	693b      	ldr	r3, [r7, #16]
 8002180:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002186:	f043 0202 	orr.w	r2, r3, #2
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002192:	2204      	movs	r2, #4
 8002194:	409a      	lsls	r2, r3
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	4013      	ands	r3, r2
 800219a:	2b00      	cmp	r3, #0
 800219c:	d012      	beq.n	80021c4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f003 0302 	and.w	r3, r3, #2
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d00b      	beq.n	80021c4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021b0:	2204      	movs	r2, #4
 80021b2:	409a      	lsls	r2, r3
 80021b4:	693b      	ldr	r3, [r7, #16]
 80021b6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021bc:	f043 0204 	orr.w	r2, r3, #4
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021c8:	2210      	movs	r2, #16
 80021ca:	409a      	lsls	r2, r3
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	4013      	ands	r3, r2
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d043      	beq.n	800225c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f003 0308 	and.w	r3, r3, #8
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d03c      	beq.n	800225c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021e6:	2210      	movs	r2, #16
 80021e8:	409a      	lsls	r2, r3
 80021ea:	693b      	ldr	r3, [r7, #16]
 80021ec:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d018      	beq.n	800222e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002206:	2b00      	cmp	r3, #0
 8002208:	d108      	bne.n	800221c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800220e:	2b00      	cmp	r3, #0
 8002210:	d024      	beq.n	800225c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002216:	6878      	ldr	r0, [r7, #4]
 8002218:	4798      	blx	r3
 800221a:	e01f      	b.n	800225c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002220:	2b00      	cmp	r3, #0
 8002222:	d01b      	beq.n	800225c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002228:	6878      	ldr	r0, [r7, #4]
 800222a:	4798      	blx	r3
 800222c:	e016      	b.n	800225c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002238:	2b00      	cmp	r3, #0
 800223a:	d107      	bne.n	800224c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	681a      	ldr	r2, [r3, #0]
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f022 0208 	bic.w	r2, r2, #8
 800224a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002250:	2b00      	cmp	r3, #0
 8002252:	d003      	beq.n	800225c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002258:	6878      	ldr	r0, [r7, #4]
 800225a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002260:	2220      	movs	r2, #32
 8002262:	409a      	lsls	r2, r3
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	4013      	ands	r3, r2
 8002268:	2b00      	cmp	r3, #0
 800226a:	f000 808f 	beq.w	800238c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f003 0310 	and.w	r3, r3, #16
 8002278:	2b00      	cmp	r3, #0
 800227a:	f000 8087 	beq.w	800238c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002282:	2220      	movs	r2, #32
 8002284:	409a      	lsls	r2, r3
 8002286:	693b      	ldr	r3, [r7, #16]
 8002288:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002290:	b2db      	uxtb	r3, r3
 8002292:	2b05      	cmp	r3, #5
 8002294:	d136      	bne.n	8002304 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	681a      	ldr	r2, [r3, #0]
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f022 0216 	bic.w	r2, r2, #22
 80022a4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	695a      	ldr	r2, [r3, #20]
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80022b4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d103      	bne.n	80022c6 <HAL_DMA_IRQHandler+0x1da>
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d007      	beq.n	80022d6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	681a      	ldr	r2, [r3, #0]
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f022 0208 	bic.w	r2, r2, #8
 80022d4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022da:	223f      	movs	r2, #63	; 0x3f
 80022dc:	409a      	lsls	r2, r3
 80022de:	693b      	ldr	r3, [r7, #16]
 80022e0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	2201      	movs	r2, #1
 80022e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	2200      	movs	r2, #0
 80022ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d07e      	beq.n	80023f8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80022fe:	6878      	ldr	r0, [r7, #4]
 8002300:	4798      	blx	r3
        }
        return;
 8002302:	e079      	b.n	80023f8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800230e:	2b00      	cmp	r3, #0
 8002310:	d01d      	beq.n	800234e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800231c:	2b00      	cmp	r3, #0
 800231e:	d10d      	bne.n	800233c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002324:	2b00      	cmp	r3, #0
 8002326:	d031      	beq.n	800238c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800232c:	6878      	ldr	r0, [r7, #4]
 800232e:	4798      	blx	r3
 8002330:	e02c      	b.n	800238c <HAL_DMA_IRQHandler+0x2a0>
 8002332:	bf00      	nop
 8002334:	20000000 	.word	0x20000000
 8002338:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002340:	2b00      	cmp	r3, #0
 8002342:	d023      	beq.n	800238c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002348:	6878      	ldr	r0, [r7, #4]
 800234a:	4798      	blx	r3
 800234c:	e01e      	b.n	800238c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002358:	2b00      	cmp	r3, #0
 800235a:	d10f      	bne.n	800237c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	681a      	ldr	r2, [r3, #0]
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f022 0210 	bic.w	r2, r2, #16
 800236a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2201      	movs	r2, #1
 8002370:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	2200      	movs	r2, #0
 8002378:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002380:	2b00      	cmp	r3, #0
 8002382:	d003      	beq.n	800238c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002388:	6878      	ldr	r0, [r7, #4]
 800238a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002390:	2b00      	cmp	r3, #0
 8002392:	d032      	beq.n	80023fa <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002398:	f003 0301 	and.w	r3, r3, #1
 800239c:	2b00      	cmp	r3, #0
 800239e:	d022      	beq.n	80023e6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	2205      	movs	r2, #5
 80023a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	681a      	ldr	r2, [r3, #0]
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f022 0201 	bic.w	r2, r2, #1
 80023b6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80023b8:	68bb      	ldr	r3, [r7, #8]
 80023ba:	3301      	adds	r3, #1
 80023bc:	60bb      	str	r3, [r7, #8]
 80023be:	697a      	ldr	r2, [r7, #20]
 80023c0:	429a      	cmp	r2, r3
 80023c2:	d307      	bcc.n	80023d4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f003 0301 	and.w	r3, r3, #1
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d1f2      	bne.n	80023b8 <HAL_DMA_IRQHandler+0x2cc>
 80023d2:	e000      	b.n	80023d6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80023d4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	2201      	movs	r2, #1
 80023da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	2200      	movs	r2, #0
 80023e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d005      	beq.n	80023fa <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023f2:	6878      	ldr	r0, [r7, #4]
 80023f4:	4798      	blx	r3
 80023f6:	e000      	b.n	80023fa <HAL_DMA_IRQHandler+0x30e>
        return;
 80023f8:	bf00      	nop
    }
  }
}
 80023fa:	3718      	adds	r7, #24
 80023fc:	46bd      	mov	sp, r7
 80023fe:	bd80      	pop	{r7, pc}

08002400 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002400:	b480      	push	{r7}
 8002402:	b085      	sub	sp, #20
 8002404:	af00      	add	r7, sp, #0
 8002406:	60f8      	str	r0, [r7, #12]
 8002408:	60b9      	str	r1, [r7, #8]
 800240a:	607a      	str	r2, [r7, #4]
 800240c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	681a      	ldr	r2, [r3, #0]
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800241c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	683a      	ldr	r2, [r7, #0]
 8002424:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	689b      	ldr	r3, [r3, #8]
 800242a:	2b40      	cmp	r3, #64	; 0x40
 800242c:	d108      	bne.n	8002440 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	687a      	ldr	r2, [r7, #4]
 8002434:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	68ba      	ldr	r2, [r7, #8]
 800243c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800243e:	e007      	b.n	8002450 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	68ba      	ldr	r2, [r7, #8]
 8002446:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	687a      	ldr	r2, [r7, #4]
 800244e:	60da      	str	r2, [r3, #12]
}
 8002450:	bf00      	nop
 8002452:	3714      	adds	r7, #20
 8002454:	46bd      	mov	sp, r7
 8002456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245a:	4770      	bx	lr

0800245c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800245c:	b480      	push	{r7}
 800245e:	b085      	sub	sp, #20
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	b2db      	uxtb	r3, r3
 800246a:	3b10      	subs	r3, #16
 800246c:	4a13      	ldr	r2, [pc, #76]	; (80024bc <DMA_CalcBaseAndBitshift+0x60>)
 800246e:	fba2 2303 	umull	r2, r3, r2, r3
 8002472:	091b      	lsrs	r3, r3, #4
 8002474:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002476:	4a12      	ldr	r2, [pc, #72]	; (80024c0 <DMA_CalcBaseAndBitshift+0x64>)
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	4413      	add	r3, r2
 800247c:	781b      	ldrb	r3, [r3, #0]
 800247e:	461a      	mov	r2, r3
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	2b03      	cmp	r3, #3
 8002488:	d908      	bls.n	800249c <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	461a      	mov	r2, r3
 8002490:	4b0c      	ldr	r3, [pc, #48]	; (80024c4 <DMA_CalcBaseAndBitshift+0x68>)
 8002492:	4013      	ands	r3, r2
 8002494:	1d1a      	adds	r2, r3, #4
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	659a      	str	r2, [r3, #88]	; 0x58
 800249a:	e006      	b.n	80024aa <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	461a      	mov	r2, r3
 80024a2:	4b08      	ldr	r3, [pc, #32]	; (80024c4 <DMA_CalcBaseAndBitshift+0x68>)
 80024a4:	4013      	ands	r3, r2
 80024a6:	687a      	ldr	r2, [r7, #4]
 80024a8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80024ae:	4618      	mov	r0, r3
 80024b0:	3714      	adds	r7, #20
 80024b2:	46bd      	mov	sp, r7
 80024b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b8:	4770      	bx	lr
 80024ba:	bf00      	nop
 80024bc:	aaaaaaab 	.word	0xaaaaaaab
 80024c0:	08008ff4 	.word	0x08008ff4
 80024c4:	fffffc00 	.word	0xfffffc00

080024c8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80024c8:	b480      	push	{r7}
 80024ca:	b085      	sub	sp, #20
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80024d0:	2300      	movs	r3, #0
 80024d2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024d8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	699b      	ldr	r3, [r3, #24]
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d11f      	bne.n	8002522 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80024e2:	68bb      	ldr	r3, [r7, #8]
 80024e4:	2b03      	cmp	r3, #3
 80024e6:	d856      	bhi.n	8002596 <DMA_CheckFifoParam+0xce>
 80024e8:	a201      	add	r2, pc, #4	; (adr r2, 80024f0 <DMA_CheckFifoParam+0x28>)
 80024ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024ee:	bf00      	nop
 80024f0:	08002501 	.word	0x08002501
 80024f4:	08002513 	.word	0x08002513
 80024f8:	08002501 	.word	0x08002501
 80024fc:	08002597 	.word	0x08002597
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002504:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002508:	2b00      	cmp	r3, #0
 800250a:	d046      	beq.n	800259a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800250c:	2301      	movs	r3, #1
 800250e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002510:	e043      	b.n	800259a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002516:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800251a:	d140      	bne.n	800259e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800251c:	2301      	movs	r3, #1
 800251e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002520:	e03d      	b.n	800259e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	699b      	ldr	r3, [r3, #24]
 8002526:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800252a:	d121      	bne.n	8002570 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800252c:	68bb      	ldr	r3, [r7, #8]
 800252e:	2b03      	cmp	r3, #3
 8002530:	d837      	bhi.n	80025a2 <DMA_CheckFifoParam+0xda>
 8002532:	a201      	add	r2, pc, #4	; (adr r2, 8002538 <DMA_CheckFifoParam+0x70>)
 8002534:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002538:	08002549 	.word	0x08002549
 800253c:	0800254f 	.word	0x0800254f
 8002540:	08002549 	.word	0x08002549
 8002544:	08002561 	.word	0x08002561
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002548:	2301      	movs	r3, #1
 800254a:	73fb      	strb	r3, [r7, #15]
      break;
 800254c:	e030      	b.n	80025b0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002552:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002556:	2b00      	cmp	r3, #0
 8002558:	d025      	beq.n	80025a6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800255a:	2301      	movs	r3, #1
 800255c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800255e:	e022      	b.n	80025a6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002564:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002568:	d11f      	bne.n	80025aa <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800256a:	2301      	movs	r3, #1
 800256c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800256e:	e01c      	b.n	80025aa <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002570:	68bb      	ldr	r3, [r7, #8]
 8002572:	2b02      	cmp	r3, #2
 8002574:	d903      	bls.n	800257e <DMA_CheckFifoParam+0xb6>
 8002576:	68bb      	ldr	r3, [r7, #8]
 8002578:	2b03      	cmp	r3, #3
 800257a:	d003      	beq.n	8002584 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800257c:	e018      	b.n	80025b0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800257e:	2301      	movs	r3, #1
 8002580:	73fb      	strb	r3, [r7, #15]
      break;
 8002582:	e015      	b.n	80025b0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002588:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800258c:	2b00      	cmp	r3, #0
 800258e:	d00e      	beq.n	80025ae <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002590:	2301      	movs	r3, #1
 8002592:	73fb      	strb	r3, [r7, #15]
      break;
 8002594:	e00b      	b.n	80025ae <DMA_CheckFifoParam+0xe6>
      break;
 8002596:	bf00      	nop
 8002598:	e00a      	b.n	80025b0 <DMA_CheckFifoParam+0xe8>
      break;
 800259a:	bf00      	nop
 800259c:	e008      	b.n	80025b0 <DMA_CheckFifoParam+0xe8>
      break;
 800259e:	bf00      	nop
 80025a0:	e006      	b.n	80025b0 <DMA_CheckFifoParam+0xe8>
      break;
 80025a2:	bf00      	nop
 80025a4:	e004      	b.n	80025b0 <DMA_CheckFifoParam+0xe8>
      break;
 80025a6:	bf00      	nop
 80025a8:	e002      	b.n	80025b0 <DMA_CheckFifoParam+0xe8>
      break;   
 80025aa:	bf00      	nop
 80025ac:	e000      	b.n	80025b0 <DMA_CheckFifoParam+0xe8>
      break;
 80025ae:	bf00      	nop
    }
  } 
  
  return status; 
 80025b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80025b2:	4618      	mov	r0, r3
 80025b4:	3714      	adds	r7, #20
 80025b6:	46bd      	mov	sp, r7
 80025b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025bc:	4770      	bx	lr
 80025be:	bf00      	nop

080025c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80025c0:	b480      	push	{r7}
 80025c2:	b089      	sub	sp, #36	; 0x24
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
 80025c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80025ca:	2300      	movs	r3, #0
 80025cc:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80025ce:	2300      	movs	r3, #0
 80025d0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80025d2:	2300      	movs	r3, #0
 80025d4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80025d6:	2300      	movs	r3, #0
 80025d8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80025da:	2300      	movs	r3, #0
 80025dc:	61fb      	str	r3, [r7, #28]
 80025de:	e169      	b.n	80028b4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80025e0:	2201      	movs	r2, #1
 80025e2:	69fb      	ldr	r3, [r7, #28]
 80025e4:	fa02 f303 	lsl.w	r3, r2, r3
 80025e8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	697a      	ldr	r2, [r7, #20]
 80025f0:	4013      	ands	r3, r2
 80025f2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80025f4:	693a      	ldr	r2, [r7, #16]
 80025f6:	697b      	ldr	r3, [r7, #20]
 80025f8:	429a      	cmp	r2, r3
 80025fa:	f040 8158 	bne.w	80028ae <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	685b      	ldr	r3, [r3, #4]
 8002602:	f003 0303 	and.w	r3, r3, #3
 8002606:	2b01      	cmp	r3, #1
 8002608:	d005      	beq.n	8002616 <HAL_GPIO_Init+0x56>
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	685b      	ldr	r3, [r3, #4]
 800260e:	f003 0303 	and.w	r3, r3, #3
 8002612:	2b02      	cmp	r3, #2
 8002614:	d130      	bne.n	8002678 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	689b      	ldr	r3, [r3, #8]
 800261a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800261c:	69fb      	ldr	r3, [r7, #28]
 800261e:	005b      	lsls	r3, r3, #1
 8002620:	2203      	movs	r2, #3
 8002622:	fa02 f303 	lsl.w	r3, r2, r3
 8002626:	43db      	mvns	r3, r3
 8002628:	69ba      	ldr	r2, [r7, #24]
 800262a:	4013      	ands	r3, r2
 800262c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	68da      	ldr	r2, [r3, #12]
 8002632:	69fb      	ldr	r3, [r7, #28]
 8002634:	005b      	lsls	r3, r3, #1
 8002636:	fa02 f303 	lsl.w	r3, r2, r3
 800263a:	69ba      	ldr	r2, [r7, #24]
 800263c:	4313      	orrs	r3, r2
 800263e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	69ba      	ldr	r2, [r7, #24]
 8002644:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	685b      	ldr	r3, [r3, #4]
 800264a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800264c:	2201      	movs	r2, #1
 800264e:	69fb      	ldr	r3, [r7, #28]
 8002650:	fa02 f303 	lsl.w	r3, r2, r3
 8002654:	43db      	mvns	r3, r3
 8002656:	69ba      	ldr	r2, [r7, #24]
 8002658:	4013      	ands	r3, r2
 800265a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	685b      	ldr	r3, [r3, #4]
 8002660:	091b      	lsrs	r3, r3, #4
 8002662:	f003 0201 	and.w	r2, r3, #1
 8002666:	69fb      	ldr	r3, [r7, #28]
 8002668:	fa02 f303 	lsl.w	r3, r2, r3
 800266c:	69ba      	ldr	r2, [r7, #24]
 800266e:	4313      	orrs	r3, r2
 8002670:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	69ba      	ldr	r2, [r7, #24]
 8002676:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	685b      	ldr	r3, [r3, #4]
 800267c:	f003 0303 	and.w	r3, r3, #3
 8002680:	2b03      	cmp	r3, #3
 8002682:	d017      	beq.n	80026b4 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	68db      	ldr	r3, [r3, #12]
 8002688:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800268a:	69fb      	ldr	r3, [r7, #28]
 800268c:	005b      	lsls	r3, r3, #1
 800268e:	2203      	movs	r2, #3
 8002690:	fa02 f303 	lsl.w	r3, r2, r3
 8002694:	43db      	mvns	r3, r3
 8002696:	69ba      	ldr	r2, [r7, #24]
 8002698:	4013      	ands	r3, r2
 800269a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	689a      	ldr	r2, [r3, #8]
 80026a0:	69fb      	ldr	r3, [r7, #28]
 80026a2:	005b      	lsls	r3, r3, #1
 80026a4:	fa02 f303 	lsl.w	r3, r2, r3
 80026a8:	69ba      	ldr	r2, [r7, #24]
 80026aa:	4313      	orrs	r3, r2
 80026ac:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	69ba      	ldr	r2, [r7, #24]
 80026b2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	685b      	ldr	r3, [r3, #4]
 80026b8:	f003 0303 	and.w	r3, r3, #3
 80026bc:	2b02      	cmp	r3, #2
 80026be:	d123      	bne.n	8002708 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80026c0:	69fb      	ldr	r3, [r7, #28]
 80026c2:	08da      	lsrs	r2, r3, #3
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	3208      	adds	r2, #8
 80026c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80026cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80026ce:	69fb      	ldr	r3, [r7, #28]
 80026d0:	f003 0307 	and.w	r3, r3, #7
 80026d4:	009b      	lsls	r3, r3, #2
 80026d6:	220f      	movs	r2, #15
 80026d8:	fa02 f303 	lsl.w	r3, r2, r3
 80026dc:	43db      	mvns	r3, r3
 80026de:	69ba      	ldr	r2, [r7, #24]
 80026e0:	4013      	ands	r3, r2
 80026e2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	691a      	ldr	r2, [r3, #16]
 80026e8:	69fb      	ldr	r3, [r7, #28]
 80026ea:	f003 0307 	and.w	r3, r3, #7
 80026ee:	009b      	lsls	r3, r3, #2
 80026f0:	fa02 f303 	lsl.w	r3, r2, r3
 80026f4:	69ba      	ldr	r2, [r7, #24]
 80026f6:	4313      	orrs	r3, r2
 80026f8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80026fa:	69fb      	ldr	r3, [r7, #28]
 80026fc:	08da      	lsrs	r2, r3, #3
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	3208      	adds	r2, #8
 8002702:	69b9      	ldr	r1, [r7, #24]
 8002704:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800270e:	69fb      	ldr	r3, [r7, #28]
 8002710:	005b      	lsls	r3, r3, #1
 8002712:	2203      	movs	r2, #3
 8002714:	fa02 f303 	lsl.w	r3, r2, r3
 8002718:	43db      	mvns	r3, r3
 800271a:	69ba      	ldr	r2, [r7, #24]
 800271c:	4013      	ands	r3, r2
 800271e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	685b      	ldr	r3, [r3, #4]
 8002724:	f003 0203 	and.w	r2, r3, #3
 8002728:	69fb      	ldr	r3, [r7, #28]
 800272a:	005b      	lsls	r3, r3, #1
 800272c:	fa02 f303 	lsl.w	r3, r2, r3
 8002730:	69ba      	ldr	r2, [r7, #24]
 8002732:	4313      	orrs	r3, r2
 8002734:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	69ba      	ldr	r2, [r7, #24]
 800273a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	685b      	ldr	r3, [r3, #4]
 8002740:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002744:	2b00      	cmp	r3, #0
 8002746:	f000 80b2 	beq.w	80028ae <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800274a:	4b60      	ldr	r3, [pc, #384]	; (80028cc <HAL_GPIO_Init+0x30c>)
 800274c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800274e:	4a5f      	ldr	r2, [pc, #380]	; (80028cc <HAL_GPIO_Init+0x30c>)
 8002750:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002754:	6453      	str	r3, [r2, #68]	; 0x44
 8002756:	4b5d      	ldr	r3, [pc, #372]	; (80028cc <HAL_GPIO_Init+0x30c>)
 8002758:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800275a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800275e:	60fb      	str	r3, [r7, #12]
 8002760:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002762:	4a5b      	ldr	r2, [pc, #364]	; (80028d0 <HAL_GPIO_Init+0x310>)
 8002764:	69fb      	ldr	r3, [r7, #28]
 8002766:	089b      	lsrs	r3, r3, #2
 8002768:	3302      	adds	r3, #2
 800276a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800276e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002770:	69fb      	ldr	r3, [r7, #28]
 8002772:	f003 0303 	and.w	r3, r3, #3
 8002776:	009b      	lsls	r3, r3, #2
 8002778:	220f      	movs	r2, #15
 800277a:	fa02 f303 	lsl.w	r3, r2, r3
 800277e:	43db      	mvns	r3, r3
 8002780:	69ba      	ldr	r2, [r7, #24]
 8002782:	4013      	ands	r3, r2
 8002784:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	4a52      	ldr	r2, [pc, #328]	; (80028d4 <HAL_GPIO_Init+0x314>)
 800278a:	4293      	cmp	r3, r2
 800278c:	d02b      	beq.n	80027e6 <HAL_GPIO_Init+0x226>
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	4a51      	ldr	r2, [pc, #324]	; (80028d8 <HAL_GPIO_Init+0x318>)
 8002792:	4293      	cmp	r3, r2
 8002794:	d025      	beq.n	80027e2 <HAL_GPIO_Init+0x222>
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	4a50      	ldr	r2, [pc, #320]	; (80028dc <HAL_GPIO_Init+0x31c>)
 800279a:	4293      	cmp	r3, r2
 800279c:	d01f      	beq.n	80027de <HAL_GPIO_Init+0x21e>
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	4a4f      	ldr	r2, [pc, #316]	; (80028e0 <HAL_GPIO_Init+0x320>)
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d019      	beq.n	80027da <HAL_GPIO_Init+0x21a>
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	4a4e      	ldr	r2, [pc, #312]	; (80028e4 <HAL_GPIO_Init+0x324>)
 80027aa:	4293      	cmp	r3, r2
 80027ac:	d013      	beq.n	80027d6 <HAL_GPIO_Init+0x216>
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	4a4d      	ldr	r2, [pc, #308]	; (80028e8 <HAL_GPIO_Init+0x328>)
 80027b2:	4293      	cmp	r3, r2
 80027b4:	d00d      	beq.n	80027d2 <HAL_GPIO_Init+0x212>
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	4a4c      	ldr	r2, [pc, #304]	; (80028ec <HAL_GPIO_Init+0x32c>)
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d007      	beq.n	80027ce <HAL_GPIO_Init+0x20e>
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	4a4b      	ldr	r2, [pc, #300]	; (80028f0 <HAL_GPIO_Init+0x330>)
 80027c2:	4293      	cmp	r3, r2
 80027c4:	d101      	bne.n	80027ca <HAL_GPIO_Init+0x20a>
 80027c6:	2307      	movs	r3, #7
 80027c8:	e00e      	b.n	80027e8 <HAL_GPIO_Init+0x228>
 80027ca:	2308      	movs	r3, #8
 80027cc:	e00c      	b.n	80027e8 <HAL_GPIO_Init+0x228>
 80027ce:	2306      	movs	r3, #6
 80027d0:	e00a      	b.n	80027e8 <HAL_GPIO_Init+0x228>
 80027d2:	2305      	movs	r3, #5
 80027d4:	e008      	b.n	80027e8 <HAL_GPIO_Init+0x228>
 80027d6:	2304      	movs	r3, #4
 80027d8:	e006      	b.n	80027e8 <HAL_GPIO_Init+0x228>
 80027da:	2303      	movs	r3, #3
 80027dc:	e004      	b.n	80027e8 <HAL_GPIO_Init+0x228>
 80027de:	2302      	movs	r3, #2
 80027e0:	e002      	b.n	80027e8 <HAL_GPIO_Init+0x228>
 80027e2:	2301      	movs	r3, #1
 80027e4:	e000      	b.n	80027e8 <HAL_GPIO_Init+0x228>
 80027e6:	2300      	movs	r3, #0
 80027e8:	69fa      	ldr	r2, [r7, #28]
 80027ea:	f002 0203 	and.w	r2, r2, #3
 80027ee:	0092      	lsls	r2, r2, #2
 80027f0:	4093      	lsls	r3, r2
 80027f2:	69ba      	ldr	r2, [r7, #24]
 80027f4:	4313      	orrs	r3, r2
 80027f6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80027f8:	4935      	ldr	r1, [pc, #212]	; (80028d0 <HAL_GPIO_Init+0x310>)
 80027fa:	69fb      	ldr	r3, [r7, #28]
 80027fc:	089b      	lsrs	r3, r3, #2
 80027fe:	3302      	adds	r3, #2
 8002800:	69ba      	ldr	r2, [r7, #24]
 8002802:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002806:	4b3b      	ldr	r3, [pc, #236]	; (80028f4 <HAL_GPIO_Init+0x334>)
 8002808:	689b      	ldr	r3, [r3, #8]
 800280a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800280c:	693b      	ldr	r3, [r7, #16]
 800280e:	43db      	mvns	r3, r3
 8002810:	69ba      	ldr	r2, [r7, #24]
 8002812:	4013      	ands	r3, r2
 8002814:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	685b      	ldr	r3, [r3, #4]
 800281a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800281e:	2b00      	cmp	r3, #0
 8002820:	d003      	beq.n	800282a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002822:	69ba      	ldr	r2, [r7, #24]
 8002824:	693b      	ldr	r3, [r7, #16]
 8002826:	4313      	orrs	r3, r2
 8002828:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800282a:	4a32      	ldr	r2, [pc, #200]	; (80028f4 <HAL_GPIO_Init+0x334>)
 800282c:	69bb      	ldr	r3, [r7, #24]
 800282e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002830:	4b30      	ldr	r3, [pc, #192]	; (80028f4 <HAL_GPIO_Init+0x334>)
 8002832:	68db      	ldr	r3, [r3, #12]
 8002834:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002836:	693b      	ldr	r3, [r7, #16]
 8002838:	43db      	mvns	r3, r3
 800283a:	69ba      	ldr	r2, [r7, #24]
 800283c:	4013      	ands	r3, r2
 800283e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	685b      	ldr	r3, [r3, #4]
 8002844:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002848:	2b00      	cmp	r3, #0
 800284a:	d003      	beq.n	8002854 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800284c:	69ba      	ldr	r2, [r7, #24]
 800284e:	693b      	ldr	r3, [r7, #16]
 8002850:	4313      	orrs	r3, r2
 8002852:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002854:	4a27      	ldr	r2, [pc, #156]	; (80028f4 <HAL_GPIO_Init+0x334>)
 8002856:	69bb      	ldr	r3, [r7, #24]
 8002858:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800285a:	4b26      	ldr	r3, [pc, #152]	; (80028f4 <HAL_GPIO_Init+0x334>)
 800285c:	685b      	ldr	r3, [r3, #4]
 800285e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002860:	693b      	ldr	r3, [r7, #16]
 8002862:	43db      	mvns	r3, r3
 8002864:	69ba      	ldr	r2, [r7, #24]
 8002866:	4013      	ands	r3, r2
 8002868:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	685b      	ldr	r3, [r3, #4]
 800286e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002872:	2b00      	cmp	r3, #0
 8002874:	d003      	beq.n	800287e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002876:	69ba      	ldr	r2, [r7, #24]
 8002878:	693b      	ldr	r3, [r7, #16]
 800287a:	4313      	orrs	r3, r2
 800287c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800287e:	4a1d      	ldr	r2, [pc, #116]	; (80028f4 <HAL_GPIO_Init+0x334>)
 8002880:	69bb      	ldr	r3, [r7, #24]
 8002882:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002884:	4b1b      	ldr	r3, [pc, #108]	; (80028f4 <HAL_GPIO_Init+0x334>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800288a:	693b      	ldr	r3, [r7, #16]
 800288c:	43db      	mvns	r3, r3
 800288e:	69ba      	ldr	r2, [r7, #24]
 8002890:	4013      	ands	r3, r2
 8002892:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	685b      	ldr	r3, [r3, #4]
 8002898:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800289c:	2b00      	cmp	r3, #0
 800289e:	d003      	beq.n	80028a8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80028a0:	69ba      	ldr	r2, [r7, #24]
 80028a2:	693b      	ldr	r3, [r7, #16]
 80028a4:	4313      	orrs	r3, r2
 80028a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80028a8:	4a12      	ldr	r2, [pc, #72]	; (80028f4 <HAL_GPIO_Init+0x334>)
 80028aa:	69bb      	ldr	r3, [r7, #24]
 80028ac:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80028ae:	69fb      	ldr	r3, [r7, #28]
 80028b0:	3301      	adds	r3, #1
 80028b2:	61fb      	str	r3, [r7, #28]
 80028b4:	69fb      	ldr	r3, [r7, #28]
 80028b6:	2b0f      	cmp	r3, #15
 80028b8:	f67f ae92 	bls.w	80025e0 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80028bc:	bf00      	nop
 80028be:	bf00      	nop
 80028c0:	3724      	adds	r7, #36	; 0x24
 80028c2:	46bd      	mov	sp, r7
 80028c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c8:	4770      	bx	lr
 80028ca:	bf00      	nop
 80028cc:	40023800 	.word	0x40023800
 80028d0:	40013800 	.word	0x40013800
 80028d4:	40020000 	.word	0x40020000
 80028d8:	40020400 	.word	0x40020400
 80028dc:	40020800 	.word	0x40020800
 80028e0:	40020c00 	.word	0x40020c00
 80028e4:	40021000 	.word	0x40021000
 80028e8:	40021400 	.word	0x40021400
 80028ec:	40021800 	.word	0x40021800
 80028f0:	40021c00 	.word	0x40021c00
 80028f4:	40013c00 	.word	0x40013c00

080028f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80028f8:	b480      	push	{r7}
 80028fa:	b083      	sub	sp, #12
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
 8002900:	460b      	mov	r3, r1
 8002902:	807b      	strh	r3, [r7, #2]
 8002904:	4613      	mov	r3, r2
 8002906:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002908:	787b      	ldrb	r3, [r7, #1]
 800290a:	2b00      	cmp	r3, #0
 800290c:	d003      	beq.n	8002916 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800290e:	887a      	ldrh	r2, [r7, #2]
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002914:	e003      	b.n	800291e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002916:	887b      	ldrh	r3, [r7, #2]
 8002918:	041a      	lsls	r2, r3, #16
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	619a      	str	r2, [r3, #24]
}
 800291e:	bf00      	nop
 8002920:	370c      	adds	r7, #12
 8002922:	46bd      	mov	sp, r7
 8002924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002928:	4770      	bx	lr

0800292a <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800292a:	b480      	push	{r7}
 800292c:	b085      	sub	sp, #20
 800292e:	af00      	add	r7, sp, #0
 8002930:	6078      	str	r0, [r7, #4]
 8002932:	460b      	mov	r3, r1
 8002934:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	695b      	ldr	r3, [r3, #20]
 800293a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800293c:	887a      	ldrh	r2, [r7, #2]
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	4013      	ands	r3, r2
 8002942:	041a      	lsls	r2, r3, #16
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	43d9      	mvns	r1, r3
 8002948:	887b      	ldrh	r3, [r7, #2]
 800294a:	400b      	ands	r3, r1
 800294c:	431a      	orrs	r2, r3
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	619a      	str	r2, [r3, #24]
}
 8002952:	bf00      	nop
 8002954:	3714      	adds	r7, #20
 8002956:	46bd      	mov	sp, r7
 8002958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295c:	4770      	bx	lr
	...

08002960 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b082      	sub	sp, #8
 8002964:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8002966:	2300      	movs	r3, #0
 8002968:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800296a:	4b23      	ldr	r3, [pc, #140]	; (80029f8 <HAL_PWREx_EnableOverDrive+0x98>)
 800296c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800296e:	4a22      	ldr	r2, [pc, #136]	; (80029f8 <HAL_PWREx_EnableOverDrive+0x98>)
 8002970:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002974:	6413      	str	r3, [r2, #64]	; 0x40
 8002976:	4b20      	ldr	r3, [pc, #128]	; (80029f8 <HAL_PWREx_EnableOverDrive+0x98>)
 8002978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800297a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800297e:	603b      	str	r3, [r7, #0]
 8002980:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002982:	4b1e      	ldr	r3, [pc, #120]	; (80029fc <HAL_PWREx_EnableOverDrive+0x9c>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	4a1d      	ldr	r2, [pc, #116]	; (80029fc <HAL_PWREx_EnableOverDrive+0x9c>)
 8002988:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800298c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800298e:	f7ff f95d 	bl	8001c4c <HAL_GetTick>
 8002992:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002994:	e009      	b.n	80029aa <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002996:	f7ff f959 	bl	8001c4c <HAL_GetTick>
 800299a:	4602      	mov	r2, r0
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	1ad3      	subs	r3, r2, r3
 80029a0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80029a4:	d901      	bls.n	80029aa <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80029a6:	2303      	movs	r3, #3
 80029a8:	e022      	b.n	80029f0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80029aa:	4b14      	ldr	r3, [pc, #80]	; (80029fc <HAL_PWREx_EnableOverDrive+0x9c>)
 80029ac:	685b      	ldr	r3, [r3, #4]
 80029ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029b6:	d1ee      	bne.n	8002996 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80029b8:	4b10      	ldr	r3, [pc, #64]	; (80029fc <HAL_PWREx_EnableOverDrive+0x9c>)
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4a0f      	ldr	r2, [pc, #60]	; (80029fc <HAL_PWREx_EnableOverDrive+0x9c>)
 80029be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80029c2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80029c4:	f7ff f942 	bl	8001c4c <HAL_GetTick>
 80029c8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80029ca:	e009      	b.n	80029e0 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80029cc:	f7ff f93e 	bl	8001c4c <HAL_GetTick>
 80029d0:	4602      	mov	r2, r0
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	1ad3      	subs	r3, r2, r3
 80029d6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80029da:	d901      	bls.n	80029e0 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80029dc:	2303      	movs	r3, #3
 80029de:	e007      	b.n	80029f0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80029e0:	4b06      	ldr	r3, [pc, #24]	; (80029fc <HAL_PWREx_EnableOverDrive+0x9c>)
 80029e2:	685b      	ldr	r3, [r3, #4]
 80029e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029e8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80029ec:	d1ee      	bne.n	80029cc <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80029ee:	2300      	movs	r3, #0
}
 80029f0:	4618      	mov	r0, r3
 80029f2:	3708      	adds	r7, #8
 80029f4:	46bd      	mov	sp, r7
 80029f6:	bd80      	pop	{r7, pc}
 80029f8:	40023800 	.word	0x40023800
 80029fc:	40007000 	.word	0x40007000

08002a00 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b086      	sub	sp, #24
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002a08:	2300      	movs	r3, #0
 8002a0a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d101      	bne.n	8002a16 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002a12:	2301      	movs	r3, #1
 8002a14:	e291      	b.n	8002f3a <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f003 0301 	and.w	r3, r3, #1
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	f000 8087 	beq.w	8002b32 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002a24:	4b96      	ldr	r3, [pc, #600]	; (8002c80 <HAL_RCC_OscConfig+0x280>)
 8002a26:	689b      	ldr	r3, [r3, #8]
 8002a28:	f003 030c 	and.w	r3, r3, #12
 8002a2c:	2b04      	cmp	r3, #4
 8002a2e:	d00c      	beq.n	8002a4a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a30:	4b93      	ldr	r3, [pc, #588]	; (8002c80 <HAL_RCC_OscConfig+0x280>)
 8002a32:	689b      	ldr	r3, [r3, #8]
 8002a34:	f003 030c 	and.w	r3, r3, #12
 8002a38:	2b08      	cmp	r3, #8
 8002a3a:	d112      	bne.n	8002a62 <HAL_RCC_OscConfig+0x62>
 8002a3c:	4b90      	ldr	r3, [pc, #576]	; (8002c80 <HAL_RCC_OscConfig+0x280>)
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a44:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002a48:	d10b      	bne.n	8002a62 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a4a:	4b8d      	ldr	r3, [pc, #564]	; (8002c80 <HAL_RCC_OscConfig+0x280>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d06c      	beq.n	8002b30 <HAL_RCC_OscConfig+0x130>
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	685b      	ldr	r3, [r3, #4]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d168      	bne.n	8002b30 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002a5e:	2301      	movs	r3, #1
 8002a60:	e26b      	b.n	8002f3a <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	685b      	ldr	r3, [r3, #4]
 8002a66:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a6a:	d106      	bne.n	8002a7a <HAL_RCC_OscConfig+0x7a>
 8002a6c:	4b84      	ldr	r3, [pc, #528]	; (8002c80 <HAL_RCC_OscConfig+0x280>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4a83      	ldr	r2, [pc, #524]	; (8002c80 <HAL_RCC_OscConfig+0x280>)
 8002a72:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a76:	6013      	str	r3, [r2, #0]
 8002a78:	e02e      	b.n	8002ad8 <HAL_RCC_OscConfig+0xd8>
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	685b      	ldr	r3, [r3, #4]
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d10c      	bne.n	8002a9c <HAL_RCC_OscConfig+0x9c>
 8002a82:	4b7f      	ldr	r3, [pc, #508]	; (8002c80 <HAL_RCC_OscConfig+0x280>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	4a7e      	ldr	r2, [pc, #504]	; (8002c80 <HAL_RCC_OscConfig+0x280>)
 8002a88:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a8c:	6013      	str	r3, [r2, #0]
 8002a8e:	4b7c      	ldr	r3, [pc, #496]	; (8002c80 <HAL_RCC_OscConfig+0x280>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	4a7b      	ldr	r2, [pc, #492]	; (8002c80 <HAL_RCC_OscConfig+0x280>)
 8002a94:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a98:	6013      	str	r3, [r2, #0]
 8002a9a:	e01d      	b.n	8002ad8 <HAL_RCC_OscConfig+0xd8>
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	685b      	ldr	r3, [r3, #4]
 8002aa0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002aa4:	d10c      	bne.n	8002ac0 <HAL_RCC_OscConfig+0xc0>
 8002aa6:	4b76      	ldr	r3, [pc, #472]	; (8002c80 <HAL_RCC_OscConfig+0x280>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	4a75      	ldr	r2, [pc, #468]	; (8002c80 <HAL_RCC_OscConfig+0x280>)
 8002aac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ab0:	6013      	str	r3, [r2, #0]
 8002ab2:	4b73      	ldr	r3, [pc, #460]	; (8002c80 <HAL_RCC_OscConfig+0x280>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	4a72      	ldr	r2, [pc, #456]	; (8002c80 <HAL_RCC_OscConfig+0x280>)
 8002ab8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002abc:	6013      	str	r3, [r2, #0]
 8002abe:	e00b      	b.n	8002ad8 <HAL_RCC_OscConfig+0xd8>
 8002ac0:	4b6f      	ldr	r3, [pc, #444]	; (8002c80 <HAL_RCC_OscConfig+0x280>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	4a6e      	ldr	r2, [pc, #440]	; (8002c80 <HAL_RCC_OscConfig+0x280>)
 8002ac6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002aca:	6013      	str	r3, [r2, #0]
 8002acc:	4b6c      	ldr	r3, [pc, #432]	; (8002c80 <HAL_RCC_OscConfig+0x280>)
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4a6b      	ldr	r2, [pc, #428]	; (8002c80 <HAL_RCC_OscConfig+0x280>)
 8002ad2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ad6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	685b      	ldr	r3, [r3, #4]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d013      	beq.n	8002b08 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ae0:	f7ff f8b4 	bl	8001c4c <HAL_GetTick>
 8002ae4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ae6:	e008      	b.n	8002afa <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ae8:	f7ff f8b0 	bl	8001c4c <HAL_GetTick>
 8002aec:	4602      	mov	r2, r0
 8002aee:	693b      	ldr	r3, [r7, #16]
 8002af0:	1ad3      	subs	r3, r2, r3
 8002af2:	2b64      	cmp	r3, #100	; 0x64
 8002af4:	d901      	bls.n	8002afa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002af6:	2303      	movs	r3, #3
 8002af8:	e21f      	b.n	8002f3a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002afa:	4b61      	ldr	r3, [pc, #388]	; (8002c80 <HAL_RCC_OscConfig+0x280>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d0f0      	beq.n	8002ae8 <HAL_RCC_OscConfig+0xe8>
 8002b06:	e014      	b.n	8002b32 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b08:	f7ff f8a0 	bl	8001c4c <HAL_GetTick>
 8002b0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b0e:	e008      	b.n	8002b22 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b10:	f7ff f89c 	bl	8001c4c <HAL_GetTick>
 8002b14:	4602      	mov	r2, r0
 8002b16:	693b      	ldr	r3, [r7, #16]
 8002b18:	1ad3      	subs	r3, r2, r3
 8002b1a:	2b64      	cmp	r3, #100	; 0x64
 8002b1c:	d901      	bls.n	8002b22 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002b1e:	2303      	movs	r3, #3
 8002b20:	e20b      	b.n	8002f3a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b22:	4b57      	ldr	r3, [pc, #348]	; (8002c80 <HAL_RCC_OscConfig+0x280>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d1f0      	bne.n	8002b10 <HAL_RCC_OscConfig+0x110>
 8002b2e:	e000      	b.n	8002b32 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b30:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f003 0302 	and.w	r3, r3, #2
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d069      	beq.n	8002c12 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002b3e:	4b50      	ldr	r3, [pc, #320]	; (8002c80 <HAL_RCC_OscConfig+0x280>)
 8002b40:	689b      	ldr	r3, [r3, #8]
 8002b42:	f003 030c 	and.w	r3, r3, #12
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d00b      	beq.n	8002b62 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b4a:	4b4d      	ldr	r3, [pc, #308]	; (8002c80 <HAL_RCC_OscConfig+0x280>)
 8002b4c:	689b      	ldr	r3, [r3, #8]
 8002b4e:	f003 030c 	and.w	r3, r3, #12
 8002b52:	2b08      	cmp	r3, #8
 8002b54:	d11c      	bne.n	8002b90 <HAL_RCC_OscConfig+0x190>
 8002b56:	4b4a      	ldr	r3, [pc, #296]	; (8002c80 <HAL_RCC_OscConfig+0x280>)
 8002b58:	685b      	ldr	r3, [r3, #4]
 8002b5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d116      	bne.n	8002b90 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b62:	4b47      	ldr	r3, [pc, #284]	; (8002c80 <HAL_RCC_OscConfig+0x280>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f003 0302 	and.w	r3, r3, #2
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d005      	beq.n	8002b7a <HAL_RCC_OscConfig+0x17a>
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	68db      	ldr	r3, [r3, #12]
 8002b72:	2b01      	cmp	r3, #1
 8002b74:	d001      	beq.n	8002b7a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002b76:	2301      	movs	r3, #1
 8002b78:	e1df      	b.n	8002f3a <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b7a:	4b41      	ldr	r3, [pc, #260]	; (8002c80 <HAL_RCC_OscConfig+0x280>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	691b      	ldr	r3, [r3, #16]
 8002b86:	00db      	lsls	r3, r3, #3
 8002b88:	493d      	ldr	r1, [pc, #244]	; (8002c80 <HAL_RCC_OscConfig+0x280>)
 8002b8a:	4313      	orrs	r3, r2
 8002b8c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b8e:	e040      	b.n	8002c12 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	68db      	ldr	r3, [r3, #12]
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d023      	beq.n	8002be0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b98:	4b39      	ldr	r3, [pc, #228]	; (8002c80 <HAL_RCC_OscConfig+0x280>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4a38      	ldr	r2, [pc, #224]	; (8002c80 <HAL_RCC_OscConfig+0x280>)
 8002b9e:	f043 0301 	orr.w	r3, r3, #1
 8002ba2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ba4:	f7ff f852 	bl	8001c4c <HAL_GetTick>
 8002ba8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002baa:	e008      	b.n	8002bbe <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002bac:	f7ff f84e 	bl	8001c4c <HAL_GetTick>
 8002bb0:	4602      	mov	r2, r0
 8002bb2:	693b      	ldr	r3, [r7, #16]
 8002bb4:	1ad3      	subs	r3, r2, r3
 8002bb6:	2b02      	cmp	r3, #2
 8002bb8:	d901      	bls.n	8002bbe <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002bba:	2303      	movs	r3, #3
 8002bbc:	e1bd      	b.n	8002f3a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bbe:	4b30      	ldr	r3, [pc, #192]	; (8002c80 <HAL_RCC_OscConfig+0x280>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f003 0302 	and.w	r3, r3, #2
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d0f0      	beq.n	8002bac <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bca:	4b2d      	ldr	r3, [pc, #180]	; (8002c80 <HAL_RCC_OscConfig+0x280>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	691b      	ldr	r3, [r3, #16]
 8002bd6:	00db      	lsls	r3, r3, #3
 8002bd8:	4929      	ldr	r1, [pc, #164]	; (8002c80 <HAL_RCC_OscConfig+0x280>)
 8002bda:	4313      	orrs	r3, r2
 8002bdc:	600b      	str	r3, [r1, #0]
 8002bde:	e018      	b.n	8002c12 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002be0:	4b27      	ldr	r3, [pc, #156]	; (8002c80 <HAL_RCC_OscConfig+0x280>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4a26      	ldr	r2, [pc, #152]	; (8002c80 <HAL_RCC_OscConfig+0x280>)
 8002be6:	f023 0301 	bic.w	r3, r3, #1
 8002bea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bec:	f7ff f82e 	bl	8001c4c <HAL_GetTick>
 8002bf0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002bf2:	e008      	b.n	8002c06 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002bf4:	f7ff f82a 	bl	8001c4c <HAL_GetTick>
 8002bf8:	4602      	mov	r2, r0
 8002bfa:	693b      	ldr	r3, [r7, #16]
 8002bfc:	1ad3      	subs	r3, r2, r3
 8002bfe:	2b02      	cmp	r3, #2
 8002c00:	d901      	bls.n	8002c06 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002c02:	2303      	movs	r3, #3
 8002c04:	e199      	b.n	8002f3a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c06:	4b1e      	ldr	r3, [pc, #120]	; (8002c80 <HAL_RCC_OscConfig+0x280>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f003 0302 	and.w	r3, r3, #2
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d1f0      	bne.n	8002bf4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f003 0308 	and.w	r3, r3, #8
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d038      	beq.n	8002c90 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	695b      	ldr	r3, [r3, #20]
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d019      	beq.n	8002c5a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c26:	4b16      	ldr	r3, [pc, #88]	; (8002c80 <HAL_RCC_OscConfig+0x280>)
 8002c28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c2a:	4a15      	ldr	r2, [pc, #84]	; (8002c80 <HAL_RCC_OscConfig+0x280>)
 8002c2c:	f043 0301 	orr.w	r3, r3, #1
 8002c30:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c32:	f7ff f80b 	bl	8001c4c <HAL_GetTick>
 8002c36:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c38:	e008      	b.n	8002c4c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c3a:	f7ff f807 	bl	8001c4c <HAL_GetTick>
 8002c3e:	4602      	mov	r2, r0
 8002c40:	693b      	ldr	r3, [r7, #16]
 8002c42:	1ad3      	subs	r3, r2, r3
 8002c44:	2b02      	cmp	r3, #2
 8002c46:	d901      	bls.n	8002c4c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002c48:	2303      	movs	r3, #3
 8002c4a:	e176      	b.n	8002f3a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c4c:	4b0c      	ldr	r3, [pc, #48]	; (8002c80 <HAL_RCC_OscConfig+0x280>)
 8002c4e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c50:	f003 0302 	and.w	r3, r3, #2
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d0f0      	beq.n	8002c3a <HAL_RCC_OscConfig+0x23a>
 8002c58:	e01a      	b.n	8002c90 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c5a:	4b09      	ldr	r3, [pc, #36]	; (8002c80 <HAL_RCC_OscConfig+0x280>)
 8002c5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c5e:	4a08      	ldr	r2, [pc, #32]	; (8002c80 <HAL_RCC_OscConfig+0x280>)
 8002c60:	f023 0301 	bic.w	r3, r3, #1
 8002c64:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c66:	f7fe fff1 	bl	8001c4c <HAL_GetTick>
 8002c6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c6c:	e00a      	b.n	8002c84 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c6e:	f7fe ffed 	bl	8001c4c <HAL_GetTick>
 8002c72:	4602      	mov	r2, r0
 8002c74:	693b      	ldr	r3, [r7, #16]
 8002c76:	1ad3      	subs	r3, r2, r3
 8002c78:	2b02      	cmp	r3, #2
 8002c7a:	d903      	bls.n	8002c84 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002c7c:	2303      	movs	r3, #3
 8002c7e:	e15c      	b.n	8002f3a <HAL_RCC_OscConfig+0x53a>
 8002c80:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c84:	4b91      	ldr	r3, [pc, #580]	; (8002ecc <HAL_RCC_OscConfig+0x4cc>)
 8002c86:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c88:	f003 0302 	and.w	r3, r3, #2
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d1ee      	bne.n	8002c6e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f003 0304 	and.w	r3, r3, #4
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	f000 80a4 	beq.w	8002de6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c9e:	4b8b      	ldr	r3, [pc, #556]	; (8002ecc <HAL_RCC_OscConfig+0x4cc>)
 8002ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ca2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d10d      	bne.n	8002cc6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002caa:	4b88      	ldr	r3, [pc, #544]	; (8002ecc <HAL_RCC_OscConfig+0x4cc>)
 8002cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cae:	4a87      	ldr	r2, [pc, #540]	; (8002ecc <HAL_RCC_OscConfig+0x4cc>)
 8002cb0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002cb4:	6413      	str	r3, [r2, #64]	; 0x40
 8002cb6:	4b85      	ldr	r3, [pc, #532]	; (8002ecc <HAL_RCC_OscConfig+0x4cc>)
 8002cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cbe:	60bb      	str	r3, [r7, #8]
 8002cc0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002cc2:	2301      	movs	r3, #1
 8002cc4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002cc6:	4b82      	ldr	r3, [pc, #520]	; (8002ed0 <HAL_RCC_OscConfig+0x4d0>)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d118      	bne.n	8002d04 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002cd2:	4b7f      	ldr	r3, [pc, #508]	; (8002ed0 <HAL_RCC_OscConfig+0x4d0>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	4a7e      	ldr	r2, [pc, #504]	; (8002ed0 <HAL_RCC_OscConfig+0x4d0>)
 8002cd8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cdc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002cde:	f7fe ffb5 	bl	8001c4c <HAL_GetTick>
 8002ce2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ce4:	e008      	b.n	8002cf8 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ce6:	f7fe ffb1 	bl	8001c4c <HAL_GetTick>
 8002cea:	4602      	mov	r2, r0
 8002cec:	693b      	ldr	r3, [r7, #16]
 8002cee:	1ad3      	subs	r3, r2, r3
 8002cf0:	2b64      	cmp	r3, #100	; 0x64
 8002cf2:	d901      	bls.n	8002cf8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002cf4:	2303      	movs	r3, #3
 8002cf6:	e120      	b.n	8002f3a <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002cf8:	4b75      	ldr	r3, [pc, #468]	; (8002ed0 <HAL_RCC_OscConfig+0x4d0>)
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d0f0      	beq.n	8002ce6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	689b      	ldr	r3, [r3, #8]
 8002d08:	2b01      	cmp	r3, #1
 8002d0a:	d106      	bne.n	8002d1a <HAL_RCC_OscConfig+0x31a>
 8002d0c:	4b6f      	ldr	r3, [pc, #444]	; (8002ecc <HAL_RCC_OscConfig+0x4cc>)
 8002d0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d10:	4a6e      	ldr	r2, [pc, #440]	; (8002ecc <HAL_RCC_OscConfig+0x4cc>)
 8002d12:	f043 0301 	orr.w	r3, r3, #1
 8002d16:	6713      	str	r3, [r2, #112]	; 0x70
 8002d18:	e02d      	b.n	8002d76 <HAL_RCC_OscConfig+0x376>
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	689b      	ldr	r3, [r3, #8]
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d10c      	bne.n	8002d3c <HAL_RCC_OscConfig+0x33c>
 8002d22:	4b6a      	ldr	r3, [pc, #424]	; (8002ecc <HAL_RCC_OscConfig+0x4cc>)
 8002d24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d26:	4a69      	ldr	r2, [pc, #420]	; (8002ecc <HAL_RCC_OscConfig+0x4cc>)
 8002d28:	f023 0301 	bic.w	r3, r3, #1
 8002d2c:	6713      	str	r3, [r2, #112]	; 0x70
 8002d2e:	4b67      	ldr	r3, [pc, #412]	; (8002ecc <HAL_RCC_OscConfig+0x4cc>)
 8002d30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d32:	4a66      	ldr	r2, [pc, #408]	; (8002ecc <HAL_RCC_OscConfig+0x4cc>)
 8002d34:	f023 0304 	bic.w	r3, r3, #4
 8002d38:	6713      	str	r3, [r2, #112]	; 0x70
 8002d3a:	e01c      	b.n	8002d76 <HAL_RCC_OscConfig+0x376>
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	689b      	ldr	r3, [r3, #8]
 8002d40:	2b05      	cmp	r3, #5
 8002d42:	d10c      	bne.n	8002d5e <HAL_RCC_OscConfig+0x35e>
 8002d44:	4b61      	ldr	r3, [pc, #388]	; (8002ecc <HAL_RCC_OscConfig+0x4cc>)
 8002d46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d48:	4a60      	ldr	r2, [pc, #384]	; (8002ecc <HAL_RCC_OscConfig+0x4cc>)
 8002d4a:	f043 0304 	orr.w	r3, r3, #4
 8002d4e:	6713      	str	r3, [r2, #112]	; 0x70
 8002d50:	4b5e      	ldr	r3, [pc, #376]	; (8002ecc <HAL_RCC_OscConfig+0x4cc>)
 8002d52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d54:	4a5d      	ldr	r2, [pc, #372]	; (8002ecc <HAL_RCC_OscConfig+0x4cc>)
 8002d56:	f043 0301 	orr.w	r3, r3, #1
 8002d5a:	6713      	str	r3, [r2, #112]	; 0x70
 8002d5c:	e00b      	b.n	8002d76 <HAL_RCC_OscConfig+0x376>
 8002d5e:	4b5b      	ldr	r3, [pc, #364]	; (8002ecc <HAL_RCC_OscConfig+0x4cc>)
 8002d60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d62:	4a5a      	ldr	r2, [pc, #360]	; (8002ecc <HAL_RCC_OscConfig+0x4cc>)
 8002d64:	f023 0301 	bic.w	r3, r3, #1
 8002d68:	6713      	str	r3, [r2, #112]	; 0x70
 8002d6a:	4b58      	ldr	r3, [pc, #352]	; (8002ecc <HAL_RCC_OscConfig+0x4cc>)
 8002d6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d6e:	4a57      	ldr	r2, [pc, #348]	; (8002ecc <HAL_RCC_OscConfig+0x4cc>)
 8002d70:	f023 0304 	bic.w	r3, r3, #4
 8002d74:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	689b      	ldr	r3, [r3, #8]
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d015      	beq.n	8002daa <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d7e:	f7fe ff65 	bl	8001c4c <HAL_GetTick>
 8002d82:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d84:	e00a      	b.n	8002d9c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d86:	f7fe ff61 	bl	8001c4c <HAL_GetTick>
 8002d8a:	4602      	mov	r2, r0
 8002d8c:	693b      	ldr	r3, [r7, #16]
 8002d8e:	1ad3      	subs	r3, r2, r3
 8002d90:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d94:	4293      	cmp	r3, r2
 8002d96:	d901      	bls.n	8002d9c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002d98:	2303      	movs	r3, #3
 8002d9a:	e0ce      	b.n	8002f3a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d9c:	4b4b      	ldr	r3, [pc, #300]	; (8002ecc <HAL_RCC_OscConfig+0x4cc>)
 8002d9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002da0:	f003 0302 	and.w	r3, r3, #2
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d0ee      	beq.n	8002d86 <HAL_RCC_OscConfig+0x386>
 8002da8:	e014      	b.n	8002dd4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002daa:	f7fe ff4f 	bl	8001c4c <HAL_GetTick>
 8002dae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002db0:	e00a      	b.n	8002dc8 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002db2:	f7fe ff4b 	bl	8001c4c <HAL_GetTick>
 8002db6:	4602      	mov	r2, r0
 8002db8:	693b      	ldr	r3, [r7, #16]
 8002dba:	1ad3      	subs	r3, r2, r3
 8002dbc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dc0:	4293      	cmp	r3, r2
 8002dc2:	d901      	bls.n	8002dc8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002dc4:	2303      	movs	r3, #3
 8002dc6:	e0b8      	b.n	8002f3a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002dc8:	4b40      	ldr	r3, [pc, #256]	; (8002ecc <HAL_RCC_OscConfig+0x4cc>)
 8002dca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dcc:	f003 0302 	and.w	r3, r3, #2
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d1ee      	bne.n	8002db2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002dd4:	7dfb      	ldrb	r3, [r7, #23]
 8002dd6:	2b01      	cmp	r3, #1
 8002dd8:	d105      	bne.n	8002de6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002dda:	4b3c      	ldr	r3, [pc, #240]	; (8002ecc <HAL_RCC_OscConfig+0x4cc>)
 8002ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dde:	4a3b      	ldr	r2, [pc, #236]	; (8002ecc <HAL_RCC_OscConfig+0x4cc>)
 8002de0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002de4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	699b      	ldr	r3, [r3, #24]
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	f000 80a4 	beq.w	8002f38 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002df0:	4b36      	ldr	r3, [pc, #216]	; (8002ecc <HAL_RCC_OscConfig+0x4cc>)
 8002df2:	689b      	ldr	r3, [r3, #8]
 8002df4:	f003 030c 	and.w	r3, r3, #12
 8002df8:	2b08      	cmp	r3, #8
 8002dfa:	d06b      	beq.n	8002ed4 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	699b      	ldr	r3, [r3, #24]
 8002e00:	2b02      	cmp	r3, #2
 8002e02:	d149      	bne.n	8002e98 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e04:	4b31      	ldr	r3, [pc, #196]	; (8002ecc <HAL_RCC_OscConfig+0x4cc>)
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4a30      	ldr	r2, [pc, #192]	; (8002ecc <HAL_RCC_OscConfig+0x4cc>)
 8002e0a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002e0e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e10:	f7fe ff1c 	bl	8001c4c <HAL_GetTick>
 8002e14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e16:	e008      	b.n	8002e2a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e18:	f7fe ff18 	bl	8001c4c <HAL_GetTick>
 8002e1c:	4602      	mov	r2, r0
 8002e1e:	693b      	ldr	r3, [r7, #16]
 8002e20:	1ad3      	subs	r3, r2, r3
 8002e22:	2b02      	cmp	r3, #2
 8002e24:	d901      	bls.n	8002e2a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002e26:	2303      	movs	r3, #3
 8002e28:	e087      	b.n	8002f3a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e2a:	4b28      	ldr	r3, [pc, #160]	; (8002ecc <HAL_RCC_OscConfig+0x4cc>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d1f0      	bne.n	8002e18 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	69da      	ldr	r2, [r3, #28]
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6a1b      	ldr	r3, [r3, #32]
 8002e3e:	431a      	orrs	r2, r3
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e44:	019b      	lsls	r3, r3, #6
 8002e46:	431a      	orrs	r2, r3
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e4c:	085b      	lsrs	r3, r3, #1
 8002e4e:	3b01      	subs	r3, #1
 8002e50:	041b      	lsls	r3, r3, #16
 8002e52:	431a      	orrs	r2, r3
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e58:	061b      	lsls	r3, r3, #24
 8002e5a:	4313      	orrs	r3, r2
 8002e5c:	4a1b      	ldr	r2, [pc, #108]	; (8002ecc <HAL_RCC_OscConfig+0x4cc>)
 8002e5e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002e62:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e64:	4b19      	ldr	r3, [pc, #100]	; (8002ecc <HAL_RCC_OscConfig+0x4cc>)
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	4a18      	ldr	r2, [pc, #96]	; (8002ecc <HAL_RCC_OscConfig+0x4cc>)
 8002e6a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e6e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e70:	f7fe feec 	bl	8001c4c <HAL_GetTick>
 8002e74:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e76:	e008      	b.n	8002e8a <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e78:	f7fe fee8 	bl	8001c4c <HAL_GetTick>
 8002e7c:	4602      	mov	r2, r0
 8002e7e:	693b      	ldr	r3, [r7, #16]
 8002e80:	1ad3      	subs	r3, r2, r3
 8002e82:	2b02      	cmp	r3, #2
 8002e84:	d901      	bls.n	8002e8a <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8002e86:	2303      	movs	r3, #3
 8002e88:	e057      	b.n	8002f3a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e8a:	4b10      	ldr	r3, [pc, #64]	; (8002ecc <HAL_RCC_OscConfig+0x4cc>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d0f0      	beq.n	8002e78 <HAL_RCC_OscConfig+0x478>
 8002e96:	e04f      	b.n	8002f38 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e98:	4b0c      	ldr	r3, [pc, #48]	; (8002ecc <HAL_RCC_OscConfig+0x4cc>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	4a0b      	ldr	r2, [pc, #44]	; (8002ecc <HAL_RCC_OscConfig+0x4cc>)
 8002e9e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002ea2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ea4:	f7fe fed2 	bl	8001c4c <HAL_GetTick>
 8002ea8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002eaa:	e008      	b.n	8002ebe <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002eac:	f7fe fece 	bl	8001c4c <HAL_GetTick>
 8002eb0:	4602      	mov	r2, r0
 8002eb2:	693b      	ldr	r3, [r7, #16]
 8002eb4:	1ad3      	subs	r3, r2, r3
 8002eb6:	2b02      	cmp	r3, #2
 8002eb8:	d901      	bls.n	8002ebe <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8002eba:	2303      	movs	r3, #3
 8002ebc:	e03d      	b.n	8002f3a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ebe:	4b03      	ldr	r3, [pc, #12]	; (8002ecc <HAL_RCC_OscConfig+0x4cc>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d1f0      	bne.n	8002eac <HAL_RCC_OscConfig+0x4ac>
 8002eca:	e035      	b.n	8002f38 <HAL_RCC_OscConfig+0x538>
 8002ecc:	40023800 	.word	0x40023800
 8002ed0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002ed4:	4b1b      	ldr	r3, [pc, #108]	; (8002f44 <HAL_RCC_OscConfig+0x544>)
 8002ed6:	685b      	ldr	r3, [r3, #4]
 8002ed8:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	699b      	ldr	r3, [r3, #24]
 8002ede:	2b01      	cmp	r3, #1
 8002ee0:	d028      	beq.n	8002f34 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002eec:	429a      	cmp	r2, r3
 8002eee:	d121      	bne.n	8002f34 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002efa:	429a      	cmp	r2, r3
 8002efc:	d11a      	bne.n	8002f34 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002efe:	68fa      	ldr	r2, [r7, #12]
 8002f00:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002f04:	4013      	ands	r3, r2
 8002f06:	687a      	ldr	r2, [r7, #4]
 8002f08:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002f0a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002f0c:	4293      	cmp	r3, r2
 8002f0e:	d111      	bne.n	8002f34 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f1a:	085b      	lsrs	r3, r3, #1
 8002f1c:	3b01      	subs	r3, #1
 8002f1e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002f20:	429a      	cmp	r2, r3
 8002f22:	d107      	bne.n	8002f34 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f2e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002f30:	429a      	cmp	r2, r3
 8002f32:	d001      	beq.n	8002f38 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8002f34:	2301      	movs	r3, #1
 8002f36:	e000      	b.n	8002f3a <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8002f38:	2300      	movs	r3, #0
}
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	3718      	adds	r7, #24
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	bd80      	pop	{r7, pc}
 8002f42:	bf00      	nop
 8002f44:	40023800 	.word	0x40023800

08002f48 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b084      	sub	sp, #16
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
 8002f50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002f52:	2300      	movs	r3, #0
 8002f54:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d101      	bne.n	8002f60 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002f5c:	2301      	movs	r3, #1
 8002f5e:	e0d0      	b.n	8003102 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002f60:	4b6a      	ldr	r3, [pc, #424]	; (800310c <HAL_RCC_ClockConfig+0x1c4>)
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f003 030f 	and.w	r3, r3, #15
 8002f68:	683a      	ldr	r2, [r7, #0]
 8002f6a:	429a      	cmp	r2, r3
 8002f6c:	d910      	bls.n	8002f90 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f6e:	4b67      	ldr	r3, [pc, #412]	; (800310c <HAL_RCC_ClockConfig+0x1c4>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f023 020f 	bic.w	r2, r3, #15
 8002f76:	4965      	ldr	r1, [pc, #404]	; (800310c <HAL_RCC_ClockConfig+0x1c4>)
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	4313      	orrs	r3, r2
 8002f7c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f7e:	4b63      	ldr	r3, [pc, #396]	; (800310c <HAL_RCC_ClockConfig+0x1c4>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f003 030f 	and.w	r3, r3, #15
 8002f86:	683a      	ldr	r2, [r7, #0]
 8002f88:	429a      	cmp	r2, r3
 8002f8a:	d001      	beq.n	8002f90 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002f8c:	2301      	movs	r3, #1
 8002f8e:	e0b8      	b.n	8003102 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f003 0302 	and.w	r3, r3, #2
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d020      	beq.n	8002fde <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f003 0304 	and.w	r3, r3, #4
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d005      	beq.n	8002fb4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002fa8:	4b59      	ldr	r3, [pc, #356]	; (8003110 <HAL_RCC_ClockConfig+0x1c8>)
 8002faa:	689b      	ldr	r3, [r3, #8]
 8002fac:	4a58      	ldr	r2, [pc, #352]	; (8003110 <HAL_RCC_ClockConfig+0x1c8>)
 8002fae:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002fb2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f003 0308 	and.w	r3, r3, #8
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d005      	beq.n	8002fcc <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002fc0:	4b53      	ldr	r3, [pc, #332]	; (8003110 <HAL_RCC_ClockConfig+0x1c8>)
 8002fc2:	689b      	ldr	r3, [r3, #8]
 8002fc4:	4a52      	ldr	r2, [pc, #328]	; (8003110 <HAL_RCC_ClockConfig+0x1c8>)
 8002fc6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002fca:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002fcc:	4b50      	ldr	r3, [pc, #320]	; (8003110 <HAL_RCC_ClockConfig+0x1c8>)
 8002fce:	689b      	ldr	r3, [r3, #8]
 8002fd0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	689b      	ldr	r3, [r3, #8]
 8002fd8:	494d      	ldr	r1, [pc, #308]	; (8003110 <HAL_RCC_ClockConfig+0x1c8>)
 8002fda:	4313      	orrs	r3, r2
 8002fdc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f003 0301 	and.w	r3, r3, #1
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d040      	beq.n	800306c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	685b      	ldr	r3, [r3, #4]
 8002fee:	2b01      	cmp	r3, #1
 8002ff0:	d107      	bne.n	8003002 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ff2:	4b47      	ldr	r3, [pc, #284]	; (8003110 <HAL_RCC_ClockConfig+0x1c8>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d115      	bne.n	800302a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002ffe:	2301      	movs	r3, #1
 8003000:	e07f      	b.n	8003102 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	685b      	ldr	r3, [r3, #4]
 8003006:	2b02      	cmp	r3, #2
 8003008:	d107      	bne.n	800301a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800300a:	4b41      	ldr	r3, [pc, #260]	; (8003110 <HAL_RCC_ClockConfig+0x1c8>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003012:	2b00      	cmp	r3, #0
 8003014:	d109      	bne.n	800302a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003016:	2301      	movs	r3, #1
 8003018:	e073      	b.n	8003102 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800301a:	4b3d      	ldr	r3, [pc, #244]	; (8003110 <HAL_RCC_ClockConfig+0x1c8>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f003 0302 	and.w	r3, r3, #2
 8003022:	2b00      	cmp	r3, #0
 8003024:	d101      	bne.n	800302a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003026:	2301      	movs	r3, #1
 8003028:	e06b      	b.n	8003102 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800302a:	4b39      	ldr	r3, [pc, #228]	; (8003110 <HAL_RCC_ClockConfig+0x1c8>)
 800302c:	689b      	ldr	r3, [r3, #8]
 800302e:	f023 0203 	bic.w	r2, r3, #3
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	685b      	ldr	r3, [r3, #4]
 8003036:	4936      	ldr	r1, [pc, #216]	; (8003110 <HAL_RCC_ClockConfig+0x1c8>)
 8003038:	4313      	orrs	r3, r2
 800303a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800303c:	f7fe fe06 	bl	8001c4c <HAL_GetTick>
 8003040:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003042:	e00a      	b.n	800305a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003044:	f7fe fe02 	bl	8001c4c <HAL_GetTick>
 8003048:	4602      	mov	r2, r0
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	1ad3      	subs	r3, r2, r3
 800304e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003052:	4293      	cmp	r3, r2
 8003054:	d901      	bls.n	800305a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003056:	2303      	movs	r3, #3
 8003058:	e053      	b.n	8003102 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800305a:	4b2d      	ldr	r3, [pc, #180]	; (8003110 <HAL_RCC_ClockConfig+0x1c8>)
 800305c:	689b      	ldr	r3, [r3, #8]
 800305e:	f003 020c 	and.w	r2, r3, #12
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	685b      	ldr	r3, [r3, #4]
 8003066:	009b      	lsls	r3, r3, #2
 8003068:	429a      	cmp	r2, r3
 800306a:	d1eb      	bne.n	8003044 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800306c:	4b27      	ldr	r3, [pc, #156]	; (800310c <HAL_RCC_ClockConfig+0x1c4>)
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f003 030f 	and.w	r3, r3, #15
 8003074:	683a      	ldr	r2, [r7, #0]
 8003076:	429a      	cmp	r2, r3
 8003078:	d210      	bcs.n	800309c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800307a:	4b24      	ldr	r3, [pc, #144]	; (800310c <HAL_RCC_ClockConfig+0x1c4>)
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f023 020f 	bic.w	r2, r3, #15
 8003082:	4922      	ldr	r1, [pc, #136]	; (800310c <HAL_RCC_ClockConfig+0x1c4>)
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	4313      	orrs	r3, r2
 8003088:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800308a:	4b20      	ldr	r3, [pc, #128]	; (800310c <HAL_RCC_ClockConfig+0x1c4>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f003 030f 	and.w	r3, r3, #15
 8003092:	683a      	ldr	r2, [r7, #0]
 8003094:	429a      	cmp	r2, r3
 8003096:	d001      	beq.n	800309c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003098:	2301      	movs	r3, #1
 800309a:	e032      	b.n	8003102 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f003 0304 	and.w	r3, r3, #4
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d008      	beq.n	80030ba <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80030a8:	4b19      	ldr	r3, [pc, #100]	; (8003110 <HAL_RCC_ClockConfig+0x1c8>)
 80030aa:	689b      	ldr	r3, [r3, #8]
 80030ac:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	68db      	ldr	r3, [r3, #12]
 80030b4:	4916      	ldr	r1, [pc, #88]	; (8003110 <HAL_RCC_ClockConfig+0x1c8>)
 80030b6:	4313      	orrs	r3, r2
 80030b8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f003 0308 	and.w	r3, r3, #8
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d009      	beq.n	80030da <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80030c6:	4b12      	ldr	r3, [pc, #72]	; (8003110 <HAL_RCC_ClockConfig+0x1c8>)
 80030c8:	689b      	ldr	r3, [r3, #8]
 80030ca:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	691b      	ldr	r3, [r3, #16]
 80030d2:	00db      	lsls	r3, r3, #3
 80030d4:	490e      	ldr	r1, [pc, #56]	; (8003110 <HAL_RCC_ClockConfig+0x1c8>)
 80030d6:	4313      	orrs	r3, r2
 80030d8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80030da:	f000 f821 	bl	8003120 <HAL_RCC_GetSysClockFreq>
 80030de:	4602      	mov	r2, r0
 80030e0:	4b0b      	ldr	r3, [pc, #44]	; (8003110 <HAL_RCC_ClockConfig+0x1c8>)
 80030e2:	689b      	ldr	r3, [r3, #8]
 80030e4:	091b      	lsrs	r3, r3, #4
 80030e6:	f003 030f 	and.w	r3, r3, #15
 80030ea:	490a      	ldr	r1, [pc, #40]	; (8003114 <HAL_RCC_ClockConfig+0x1cc>)
 80030ec:	5ccb      	ldrb	r3, [r1, r3]
 80030ee:	fa22 f303 	lsr.w	r3, r2, r3
 80030f2:	4a09      	ldr	r2, [pc, #36]	; (8003118 <HAL_RCC_ClockConfig+0x1d0>)
 80030f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80030f6:	4b09      	ldr	r3, [pc, #36]	; (800311c <HAL_RCC_ClockConfig+0x1d4>)
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	4618      	mov	r0, r3
 80030fc:	f7fe fd62 	bl	8001bc4 <HAL_InitTick>

  return HAL_OK;
 8003100:	2300      	movs	r3, #0
}
 8003102:	4618      	mov	r0, r3
 8003104:	3710      	adds	r7, #16
 8003106:	46bd      	mov	sp, r7
 8003108:	bd80      	pop	{r7, pc}
 800310a:	bf00      	nop
 800310c:	40023c00 	.word	0x40023c00
 8003110:	40023800 	.word	0x40023800
 8003114:	08008fdc 	.word	0x08008fdc
 8003118:	20000000 	.word	0x20000000
 800311c:	20000004 	.word	0x20000004

08003120 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003120:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003124:	b090      	sub	sp, #64	; 0x40
 8003126:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003128:	2300      	movs	r3, #0
 800312a:	637b      	str	r3, [r7, #52]	; 0x34
 800312c:	2300      	movs	r3, #0
 800312e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003130:	2300      	movs	r3, #0
 8003132:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8003134:	2300      	movs	r3, #0
 8003136:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003138:	4b59      	ldr	r3, [pc, #356]	; (80032a0 <HAL_RCC_GetSysClockFreq+0x180>)
 800313a:	689b      	ldr	r3, [r3, #8]
 800313c:	f003 030c 	and.w	r3, r3, #12
 8003140:	2b08      	cmp	r3, #8
 8003142:	d00d      	beq.n	8003160 <HAL_RCC_GetSysClockFreq+0x40>
 8003144:	2b08      	cmp	r3, #8
 8003146:	f200 80a1 	bhi.w	800328c <HAL_RCC_GetSysClockFreq+0x16c>
 800314a:	2b00      	cmp	r3, #0
 800314c:	d002      	beq.n	8003154 <HAL_RCC_GetSysClockFreq+0x34>
 800314e:	2b04      	cmp	r3, #4
 8003150:	d003      	beq.n	800315a <HAL_RCC_GetSysClockFreq+0x3a>
 8003152:	e09b      	b.n	800328c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003154:	4b53      	ldr	r3, [pc, #332]	; (80032a4 <HAL_RCC_GetSysClockFreq+0x184>)
 8003156:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003158:	e09b      	b.n	8003292 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800315a:	4b53      	ldr	r3, [pc, #332]	; (80032a8 <HAL_RCC_GetSysClockFreq+0x188>)
 800315c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800315e:	e098      	b.n	8003292 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003160:	4b4f      	ldr	r3, [pc, #316]	; (80032a0 <HAL_RCC_GetSysClockFreq+0x180>)
 8003162:	685b      	ldr	r3, [r3, #4]
 8003164:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003168:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800316a:	4b4d      	ldr	r3, [pc, #308]	; (80032a0 <HAL_RCC_GetSysClockFreq+0x180>)
 800316c:	685b      	ldr	r3, [r3, #4]
 800316e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003172:	2b00      	cmp	r3, #0
 8003174:	d028      	beq.n	80031c8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003176:	4b4a      	ldr	r3, [pc, #296]	; (80032a0 <HAL_RCC_GetSysClockFreq+0x180>)
 8003178:	685b      	ldr	r3, [r3, #4]
 800317a:	099b      	lsrs	r3, r3, #6
 800317c:	2200      	movs	r2, #0
 800317e:	623b      	str	r3, [r7, #32]
 8003180:	627a      	str	r2, [r7, #36]	; 0x24
 8003182:	6a3b      	ldr	r3, [r7, #32]
 8003184:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003188:	2100      	movs	r1, #0
 800318a:	4b47      	ldr	r3, [pc, #284]	; (80032a8 <HAL_RCC_GetSysClockFreq+0x188>)
 800318c:	fb03 f201 	mul.w	r2, r3, r1
 8003190:	2300      	movs	r3, #0
 8003192:	fb00 f303 	mul.w	r3, r0, r3
 8003196:	4413      	add	r3, r2
 8003198:	4a43      	ldr	r2, [pc, #268]	; (80032a8 <HAL_RCC_GetSysClockFreq+0x188>)
 800319a:	fba0 1202 	umull	r1, r2, r0, r2
 800319e:	62fa      	str	r2, [r7, #44]	; 0x2c
 80031a0:	460a      	mov	r2, r1
 80031a2:	62ba      	str	r2, [r7, #40]	; 0x28
 80031a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80031a6:	4413      	add	r3, r2
 80031a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80031aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031ac:	2200      	movs	r2, #0
 80031ae:	61bb      	str	r3, [r7, #24]
 80031b0:	61fa      	str	r2, [r7, #28]
 80031b2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80031b6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80031ba:	f7fd fd6d 	bl	8000c98 <__aeabi_uldivmod>
 80031be:	4602      	mov	r2, r0
 80031c0:	460b      	mov	r3, r1
 80031c2:	4613      	mov	r3, r2
 80031c4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80031c6:	e053      	b.n	8003270 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80031c8:	4b35      	ldr	r3, [pc, #212]	; (80032a0 <HAL_RCC_GetSysClockFreq+0x180>)
 80031ca:	685b      	ldr	r3, [r3, #4]
 80031cc:	099b      	lsrs	r3, r3, #6
 80031ce:	2200      	movs	r2, #0
 80031d0:	613b      	str	r3, [r7, #16]
 80031d2:	617a      	str	r2, [r7, #20]
 80031d4:	693b      	ldr	r3, [r7, #16]
 80031d6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80031da:	f04f 0b00 	mov.w	fp, #0
 80031de:	4652      	mov	r2, sl
 80031e0:	465b      	mov	r3, fp
 80031e2:	f04f 0000 	mov.w	r0, #0
 80031e6:	f04f 0100 	mov.w	r1, #0
 80031ea:	0159      	lsls	r1, r3, #5
 80031ec:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80031f0:	0150      	lsls	r0, r2, #5
 80031f2:	4602      	mov	r2, r0
 80031f4:	460b      	mov	r3, r1
 80031f6:	ebb2 080a 	subs.w	r8, r2, sl
 80031fa:	eb63 090b 	sbc.w	r9, r3, fp
 80031fe:	f04f 0200 	mov.w	r2, #0
 8003202:	f04f 0300 	mov.w	r3, #0
 8003206:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800320a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800320e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003212:	ebb2 0408 	subs.w	r4, r2, r8
 8003216:	eb63 0509 	sbc.w	r5, r3, r9
 800321a:	f04f 0200 	mov.w	r2, #0
 800321e:	f04f 0300 	mov.w	r3, #0
 8003222:	00eb      	lsls	r3, r5, #3
 8003224:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003228:	00e2      	lsls	r2, r4, #3
 800322a:	4614      	mov	r4, r2
 800322c:	461d      	mov	r5, r3
 800322e:	eb14 030a 	adds.w	r3, r4, sl
 8003232:	603b      	str	r3, [r7, #0]
 8003234:	eb45 030b 	adc.w	r3, r5, fp
 8003238:	607b      	str	r3, [r7, #4]
 800323a:	f04f 0200 	mov.w	r2, #0
 800323e:	f04f 0300 	mov.w	r3, #0
 8003242:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003246:	4629      	mov	r1, r5
 8003248:	028b      	lsls	r3, r1, #10
 800324a:	4621      	mov	r1, r4
 800324c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003250:	4621      	mov	r1, r4
 8003252:	028a      	lsls	r2, r1, #10
 8003254:	4610      	mov	r0, r2
 8003256:	4619      	mov	r1, r3
 8003258:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800325a:	2200      	movs	r2, #0
 800325c:	60bb      	str	r3, [r7, #8]
 800325e:	60fa      	str	r2, [r7, #12]
 8003260:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003264:	f7fd fd18 	bl	8000c98 <__aeabi_uldivmod>
 8003268:	4602      	mov	r2, r0
 800326a:	460b      	mov	r3, r1
 800326c:	4613      	mov	r3, r2
 800326e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003270:	4b0b      	ldr	r3, [pc, #44]	; (80032a0 <HAL_RCC_GetSysClockFreq+0x180>)
 8003272:	685b      	ldr	r3, [r3, #4]
 8003274:	0c1b      	lsrs	r3, r3, #16
 8003276:	f003 0303 	and.w	r3, r3, #3
 800327a:	3301      	adds	r3, #1
 800327c:	005b      	lsls	r3, r3, #1
 800327e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8003280:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003282:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003284:	fbb2 f3f3 	udiv	r3, r2, r3
 8003288:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800328a:	e002      	b.n	8003292 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800328c:	4b05      	ldr	r3, [pc, #20]	; (80032a4 <HAL_RCC_GetSysClockFreq+0x184>)
 800328e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003290:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003292:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003294:	4618      	mov	r0, r3
 8003296:	3740      	adds	r7, #64	; 0x40
 8003298:	46bd      	mov	sp, r7
 800329a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800329e:	bf00      	nop
 80032a0:	40023800 	.word	0x40023800
 80032a4:	00f42400 	.word	0x00f42400
 80032a8:	017d7840 	.word	0x017d7840

080032ac <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80032ac:	b480      	push	{r7}
 80032ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80032b0:	4b03      	ldr	r3, [pc, #12]	; (80032c0 <HAL_RCC_GetHCLKFreq+0x14>)
 80032b2:	681b      	ldr	r3, [r3, #0]
}
 80032b4:	4618      	mov	r0, r3
 80032b6:	46bd      	mov	sp, r7
 80032b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032bc:	4770      	bx	lr
 80032be:	bf00      	nop
 80032c0:	20000000 	.word	0x20000000

080032c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80032c8:	f7ff fff0 	bl	80032ac <HAL_RCC_GetHCLKFreq>
 80032cc:	4602      	mov	r2, r0
 80032ce:	4b05      	ldr	r3, [pc, #20]	; (80032e4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80032d0:	689b      	ldr	r3, [r3, #8]
 80032d2:	0a9b      	lsrs	r3, r3, #10
 80032d4:	f003 0307 	and.w	r3, r3, #7
 80032d8:	4903      	ldr	r1, [pc, #12]	; (80032e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80032da:	5ccb      	ldrb	r3, [r1, r3]
 80032dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80032e0:	4618      	mov	r0, r3
 80032e2:	bd80      	pop	{r7, pc}
 80032e4:	40023800 	.word	0x40023800
 80032e8:	08008fec 	.word	0x08008fec

080032ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80032f0:	f7ff ffdc 	bl	80032ac <HAL_RCC_GetHCLKFreq>
 80032f4:	4602      	mov	r2, r0
 80032f6:	4b05      	ldr	r3, [pc, #20]	; (800330c <HAL_RCC_GetPCLK2Freq+0x20>)
 80032f8:	689b      	ldr	r3, [r3, #8]
 80032fa:	0b5b      	lsrs	r3, r3, #13
 80032fc:	f003 0307 	and.w	r3, r3, #7
 8003300:	4903      	ldr	r1, [pc, #12]	; (8003310 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003302:	5ccb      	ldrb	r3, [r1, r3]
 8003304:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003308:	4618      	mov	r0, r3
 800330a:	bd80      	pop	{r7, pc}
 800330c:	40023800 	.word	0x40023800
 8003310:	08008fec 	.word	0x08008fec

08003314 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003314:	b580      	push	{r7, lr}
 8003316:	b088      	sub	sp, #32
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800331c:	2300      	movs	r3, #0
 800331e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003320:	2300      	movs	r3, #0
 8003322:	613b      	str	r3, [r7, #16]
  uint32_t plli2sused = 0;
 8003324:	2300      	movs	r3, #0
 8003326:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003328:	2300      	movs	r3, #0
 800332a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f003 0301 	and.w	r3, r3, #1
 8003334:	2b00      	cmp	r3, #0
 8003336:	d012      	beq.n	800335e <HAL_RCCEx_PeriphCLKConfig+0x4a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003338:	4b65      	ldr	r3, [pc, #404]	; (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800333a:	689b      	ldr	r3, [r3, #8]
 800333c:	4a64      	ldr	r2, [pc, #400]	; (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800333e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003342:	6093      	str	r3, [r2, #8]
 8003344:	4b62      	ldr	r3, [pc, #392]	; (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003346:	689a      	ldr	r2, [r3, #8]
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800334c:	4960      	ldr	r1, [pc, #384]	; (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800334e:	4313      	orrs	r3, r2
 8003350:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003356:	2b00      	cmp	r3, #0
 8003358:	d101      	bne.n	800335e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      plli2sused = 1;
 800335a:	2301      	movs	r3, #1
 800335c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003366:	2b00      	cmp	r3, #0
 8003368:	d017      	beq.n	800339a <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800336a:	4b59      	ldr	r3, [pc, #356]	; (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800336c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003370:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003378:	4955      	ldr	r1, [pc, #340]	; (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800337a:	4313      	orrs	r3, r2
 800337c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003384:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003388:	d101      	bne.n	800338e <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
      plli2sused = 1;
 800338a:	2301      	movs	r3, #1
 800338c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003392:	2b00      	cmp	r3, #0
 8003394:	d101      	bne.n	800339a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      pllsaiused = 1;
 8003396:	2301      	movs	r3, #1
 8003398:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d017      	beq.n	80033d6 <HAL_RCCEx_PeriphCLKConfig+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80033a6:	4b4a      	ldr	r3, [pc, #296]	; (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80033a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80033ac:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033b4:	4946      	ldr	r1, [pc, #280]	; (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80033b6:	4313      	orrs	r3, r2
 80033b8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033c0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80033c4:	d101      	bne.n	80033ca <HAL_RCCEx_PeriphCLKConfig+0xb6>
    {
      plli2sused = 1;
 80033c6:	2301      	movs	r3, #1
 80033c8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d101      	bne.n	80033d6 <HAL_RCCEx_PeriphCLKConfig+0xc2>
    {
      pllsaiused = 1;
 80033d2:	2301      	movs	r3, #1
 80033d4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f003 0320 	and.w	r3, r3, #32
 80033de:	2b00      	cmp	r3, #0
 80033e0:	f000 808b 	beq.w	80034fa <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80033e4:	4b3a      	ldr	r3, [pc, #232]	; (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80033e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033e8:	4a39      	ldr	r2, [pc, #228]	; (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80033ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033ee:	6413      	str	r3, [r2, #64]	; 0x40
 80033f0:	4b37      	ldr	r3, [pc, #220]	; (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80033f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033f8:	60fb      	str	r3, [r7, #12]
 80033fa:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80033fc:	4b35      	ldr	r3, [pc, #212]	; (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	4a34      	ldr	r2, [pc, #208]	; (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003402:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003406:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003408:	f7fe fc20 	bl	8001c4c <HAL_GetTick>
 800340c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800340e:	e008      	b.n	8003422 <HAL_RCCEx_PeriphCLKConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003410:	f7fe fc1c 	bl	8001c4c <HAL_GetTick>
 8003414:	4602      	mov	r2, r0
 8003416:	697b      	ldr	r3, [r7, #20]
 8003418:	1ad3      	subs	r3, r2, r3
 800341a:	2b64      	cmp	r3, #100	; 0x64
 800341c:	d901      	bls.n	8003422 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800341e:	2303      	movs	r3, #3
 8003420:	e2bc      	b.n	800399c <HAL_RCCEx_PeriphCLKConfig+0x688>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003422:	4b2c      	ldr	r3, [pc, #176]	; (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800342a:	2b00      	cmp	r3, #0
 800342c:	d0f0      	beq.n	8003410 <HAL_RCCEx_PeriphCLKConfig+0xfc>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800342e:	4b28      	ldr	r3, [pc, #160]	; (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003430:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003432:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003436:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003438:	693b      	ldr	r3, [r7, #16]
 800343a:	2b00      	cmp	r3, #0
 800343c:	d035      	beq.n	80034aa <HAL_RCCEx_PeriphCLKConfig+0x196>
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003442:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003446:	693a      	ldr	r2, [r7, #16]
 8003448:	429a      	cmp	r2, r3
 800344a:	d02e      	beq.n	80034aa <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800344c:	4b20      	ldr	r3, [pc, #128]	; (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800344e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003450:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003454:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003456:	4b1e      	ldr	r3, [pc, #120]	; (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003458:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800345a:	4a1d      	ldr	r2, [pc, #116]	; (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800345c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003460:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003462:	4b1b      	ldr	r3, [pc, #108]	; (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003464:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003466:	4a1a      	ldr	r2, [pc, #104]	; (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003468:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800346c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800346e:	4a18      	ldr	r2, [pc, #96]	; (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003470:	693b      	ldr	r3, [r7, #16]
 8003472:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003474:	4b16      	ldr	r3, [pc, #88]	; (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003476:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003478:	f003 0301 	and.w	r3, r3, #1
 800347c:	2b01      	cmp	r3, #1
 800347e:	d114      	bne.n	80034aa <HAL_RCCEx_PeriphCLKConfig+0x196>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003480:	f7fe fbe4 	bl	8001c4c <HAL_GetTick>
 8003484:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003486:	e00a      	b.n	800349e <HAL_RCCEx_PeriphCLKConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003488:	f7fe fbe0 	bl	8001c4c <HAL_GetTick>
 800348c:	4602      	mov	r2, r0
 800348e:	697b      	ldr	r3, [r7, #20]
 8003490:	1ad3      	subs	r3, r2, r3
 8003492:	f241 3288 	movw	r2, #5000	; 0x1388
 8003496:	4293      	cmp	r3, r2
 8003498:	d901      	bls.n	800349e <HAL_RCCEx_PeriphCLKConfig+0x18a>
          {
            return HAL_TIMEOUT;
 800349a:	2303      	movs	r3, #3
 800349c:	e27e      	b.n	800399c <HAL_RCCEx_PeriphCLKConfig+0x688>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800349e:	4b0c      	ldr	r3, [pc, #48]	; (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80034a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034a2:	f003 0302 	and.w	r3, r3, #2
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d0ee      	beq.n	8003488 <HAL_RCCEx_PeriphCLKConfig+0x174>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80034b2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80034b6:	d111      	bne.n	80034dc <HAL_RCCEx_PeriphCLKConfig+0x1c8>
 80034b8:	4b05      	ldr	r3, [pc, #20]	; (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80034ba:	689b      	ldr	r3, [r3, #8]
 80034bc:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80034c4:	4b04      	ldr	r3, [pc, #16]	; (80034d8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80034c6:	400b      	ands	r3, r1
 80034c8:	4901      	ldr	r1, [pc, #4]	; (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80034ca:	4313      	orrs	r3, r2
 80034cc:	608b      	str	r3, [r1, #8]
 80034ce:	e00b      	b.n	80034e8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 80034d0:	40023800 	.word	0x40023800
 80034d4:	40007000 	.word	0x40007000
 80034d8:	0ffffcff 	.word	0x0ffffcff
 80034dc:	4ba4      	ldr	r3, [pc, #656]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80034de:	689b      	ldr	r3, [r3, #8]
 80034e0:	4aa3      	ldr	r2, [pc, #652]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80034e2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80034e6:	6093      	str	r3, [r2, #8]
 80034e8:	4ba1      	ldr	r3, [pc, #644]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80034ea:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034f4:	499e      	ldr	r1, [pc, #632]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80034f6:	4313      	orrs	r3, r2
 80034f8:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f003 0310 	and.w	r3, r3, #16
 8003502:	2b00      	cmp	r3, #0
 8003504:	d010      	beq.n	8003528 <HAL_RCCEx_PeriphCLKConfig+0x214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003506:	4b9a      	ldr	r3, [pc, #616]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003508:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800350c:	4a98      	ldr	r2, [pc, #608]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800350e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003512:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003516:	4b96      	ldr	r3, [pc, #600]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003518:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003520:	4993      	ldr	r1, [pc, #588]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003522:	4313      	orrs	r3, r2
 8003524:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003530:	2b00      	cmp	r3, #0
 8003532:	d00a      	beq.n	800354a <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003534:	4b8e      	ldr	r3, [pc, #568]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003536:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800353a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003542:	498b      	ldr	r1, [pc, #556]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003544:	4313      	orrs	r3, r2
 8003546:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003552:	2b00      	cmp	r3, #0
 8003554:	d00a      	beq.n	800356c <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003556:	4b86      	ldr	r3, [pc, #536]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003558:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800355c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003564:	4982      	ldr	r1, [pc, #520]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003566:	4313      	orrs	r3, r2
 8003568:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003574:	2b00      	cmp	r3, #0
 8003576:	d00a      	beq.n	800358e <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003578:	4b7d      	ldr	r3, [pc, #500]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800357a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800357e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003586:	497a      	ldr	r1, [pc, #488]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003588:	4313      	orrs	r3, r2
 800358a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003596:	2b00      	cmp	r3, #0
 8003598:	d00a      	beq.n	80035b0 <HAL_RCCEx_PeriphCLKConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800359a:	4b75      	ldr	r3, [pc, #468]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800359c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035a0:	f023 0203 	bic.w	r2, r3, #3
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035a8:	4971      	ldr	r1, [pc, #452]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80035aa:	4313      	orrs	r3, r2
 80035ac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d00a      	beq.n	80035d2 <HAL_RCCEx_PeriphCLKConfig+0x2be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80035bc:	4b6c      	ldr	r3, [pc, #432]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80035be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035c2:	f023 020c 	bic.w	r2, r3, #12
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ca:	4969      	ldr	r1, [pc, #420]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80035cc:	4313      	orrs	r3, r2
 80035ce:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d00a      	beq.n	80035f4 <HAL_RCCEx_PeriphCLKConfig+0x2e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80035de:	4b64      	ldr	r3, [pc, #400]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80035e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035e4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035ec:	4960      	ldr	r1, [pc, #384]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80035ee:	4313      	orrs	r3, r2
 80035f0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d00a      	beq.n	8003616 <HAL_RCCEx_PeriphCLKConfig+0x302>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003600:	4b5b      	ldr	r3, [pc, #364]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003602:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003606:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800360e:	4958      	ldr	r1, [pc, #352]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003610:	4313      	orrs	r3, r2
 8003612:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800361e:	2b00      	cmp	r3, #0
 8003620:	d00a      	beq.n	8003638 <HAL_RCCEx_PeriphCLKConfig+0x324>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003622:	4b53      	ldr	r3, [pc, #332]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003624:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003628:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003630:	494f      	ldr	r1, [pc, #316]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003632:	4313      	orrs	r3, r2
 8003634:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003640:	2b00      	cmp	r3, #0
 8003642:	d00a      	beq.n	800365a <HAL_RCCEx_PeriphCLKConfig+0x346>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003644:	4b4a      	ldr	r3, [pc, #296]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003646:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800364a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003652:	4947      	ldr	r1, [pc, #284]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003654:	4313      	orrs	r3, r2
 8003656:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003662:	2b00      	cmp	r3, #0
 8003664:	d00a      	beq.n	800367c <HAL_RCCEx_PeriphCLKConfig+0x368>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003666:	4b42      	ldr	r3, [pc, #264]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003668:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800366c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003674:	493e      	ldr	r1, [pc, #248]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003676:	4313      	orrs	r3, r2
 8003678:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003684:	2b00      	cmp	r3, #0
 8003686:	d00a      	beq.n	800369e <HAL_RCCEx_PeriphCLKConfig+0x38a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003688:	4b39      	ldr	r3, [pc, #228]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800368a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800368e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003696:	4936      	ldr	r1, [pc, #216]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003698:	4313      	orrs	r3, r2
 800369a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d011      	beq.n	80036ce <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80036aa:	4b31      	ldr	r3, [pc, #196]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80036ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036b0:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036b8:	492d      	ldr	r1, [pc, #180]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80036ba:	4313      	orrs	r3, r2
 80036bc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036c4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80036c8:	d101      	bne.n	80036ce <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      pllsaiused = 1;
 80036ca:	2301      	movs	r3, #1
 80036cc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d00a      	beq.n	80036f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80036da:	4b25      	ldr	r3, [pc, #148]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80036dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036e0:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80036e8:	4921      	ldr	r1, [pc, #132]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80036ea:	4313      	orrs	r3, r2
 80036ec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d00a      	beq.n	8003712 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80036fc:	4b1c      	ldr	r3, [pc, #112]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80036fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003702:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800370a:	4919      	ldr	r1, [pc, #100]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800370c:	4313      	orrs	r3, r2
 800370e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800371a:	2b00      	cmp	r3, #0
 800371c:	d00a      	beq.n	8003734 <HAL_RCCEx_PeriphCLKConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 800371e:	4b14      	ldr	r3, [pc, #80]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003720:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003724:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800372c:	4910      	ldr	r1, [pc, #64]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800372e:	4313      	orrs	r3, r2
 8003730:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2 or I2S */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003734:	69fb      	ldr	r3, [r7, #28]
 8003736:	2b01      	cmp	r3, #1
 8003738:	d006      	beq.n	8003748 <HAL_RCCEx_PeriphCLKConfig+0x434>
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003742:	2b00      	cmp	r3, #0
 8003744:	f000 809d 	beq.w	8003882 <HAL_RCCEx_PeriphCLKConfig+0x56e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003748:	4b09      	ldr	r3, [pc, #36]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	4a08      	ldr	r2, [pc, #32]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800374e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003752:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003754:	f7fe fa7a 	bl	8001c4c <HAL_GetTick>
 8003758:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800375a:	e00b      	b.n	8003774 <HAL_RCCEx_PeriphCLKConfig+0x460>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800375c:	f7fe fa76 	bl	8001c4c <HAL_GetTick>
 8003760:	4602      	mov	r2, r0
 8003762:	697b      	ldr	r3, [r7, #20]
 8003764:	1ad3      	subs	r3, r2, r3
 8003766:	2b64      	cmp	r3, #100	; 0x64
 8003768:	d904      	bls.n	8003774 <HAL_RCCEx_PeriphCLKConfig+0x460>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800376a:	2303      	movs	r3, #3
 800376c:	e116      	b.n	800399c <HAL_RCCEx_PeriphCLKConfig+0x688>
 800376e:	bf00      	nop
 8003770:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003774:	4b8b      	ldr	r3, [pc, #556]	; (80039a4 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800377c:	2b00      	cmp	r3, #0
 800377e:	d1ed      	bne.n	800375c <HAL_RCCEx_PeriphCLKConfig+0x448>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f003 0301 	and.w	r3, r3, #1
 8003788:	2b00      	cmp	r3, #0
 800378a:	d017      	beq.n	80037bc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003790:	2b00      	cmp	r3, #0
 8003792:	d113      	bne.n	80037bc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003794:	4b83      	ldr	r3, [pc, #524]	; (80039a4 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8003796:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800379a:	0e1b      	lsrs	r3, r3, #24
 800379c:	f003 030f 	and.w	r3, r3, #15
 80037a0:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, PeriphClkInit->PLLI2S.PLLI2SR);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	685b      	ldr	r3, [r3, #4]
 80037a6:	019a      	lsls	r2, r3, #6
 80037a8:	693b      	ldr	r3, [r7, #16]
 80037aa:	061b      	lsls	r3, r3, #24
 80037ac:	431a      	orrs	r2, r3
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	689b      	ldr	r3, [r3, #8]
 80037b2:	071b      	lsls	r3, r3, #28
 80037b4:	497b      	ldr	r1, [pc, #492]	; (80039a4 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80037b6:	4313      	orrs	r3, r2
 80037b8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d004      	beq.n	80037d2 <HAL_RCCEx_PeriphCLKConfig+0x4be>
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037cc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80037d0:	d00a      	beq.n	80037e8 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d024      	beq.n	8003828 <HAL_RCCEx_PeriphCLKConfig+0x514>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037e2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80037e6:	d11f      	bne.n	8003828 <HAL_RCCEx_PeriphCLKConfig+0x514>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80037e8:	4b6e      	ldr	r3, [pc, #440]	; (80039a4 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80037ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80037ee:	0f1b      	lsrs	r3, r3, #28
 80037f0:	f003 0307 	and.w	r3, r3, #7
 80037f4:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg0);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	685b      	ldr	r3, [r3, #4]
 80037fa:	019a      	lsls	r2, r3, #6
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	68db      	ldr	r3, [r3, #12]
 8003800:	061b      	lsls	r3, r3, #24
 8003802:	431a      	orrs	r2, r3
 8003804:	693b      	ldr	r3, [r7, #16]
 8003806:	071b      	lsls	r3, r3, #28
 8003808:	4966      	ldr	r1, [pc, #408]	; (80039a4 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800380a:	4313      	orrs	r3, r2
 800380c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003810:	4b64      	ldr	r3, [pc, #400]	; (80039a4 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8003812:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003816:	f023 021f 	bic.w	r2, r3, #31
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	69db      	ldr	r3, [r3, #28]
 800381e:	3b01      	subs	r3, #1
 8003820:	4960      	ldr	r1, [pc, #384]	; (80039a4 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8003822:	4313      	orrs	r3, r2
 8003824:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003830:	2b00      	cmp	r3, #0
 8003832:	d00d      	beq.n	8003850 <HAL_RCCEx_PeriphCLKConfig+0x53c>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	685b      	ldr	r3, [r3, #4]
 8003838:	019a      	lsls	r2, r3, #6
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	68db      	ldr	r3, [r3, #12]
 800383e:	061b      	lsls	r3, r3, #24
 8003840:	431a      	orrs	r2, r3
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	689b      	ldr	r3, [r3, #8]
 8003846:	071b      	lsls	r3, r3, #28
 8003848:	4956      	ldr	r1, [pc, #344]	; (80039a4 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800384a:	4313      	orrs	r3, r2
 800384c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003850:	4b54      	ldr	r3, [pc, #336]	; (80039a4 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	4a53      	ldr	r2, [pc, #332]	; (80039a4 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8003856:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800385a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800385c:	f7fe f9f6 	bl	8001c4c <HAL_GetTick>
 8003860:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003862:	e008      	b.n	8003876 <HAL_RCCEx_PeriphCLKConfig+0x562>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003864:	f7fe f9f2 	bl	8001c4c <HAL_GetTick>
 8003868:	4602      	mov	r2, r0
 800386a:	697b      	ldr	r3, [r7, #20]
 800386c:	1ad3      	subs	r3, r2, r3
 800386e:	2b64      	cmp	r3, #100	; 0x64
 8003870:	d901      	bls.n	8003876 <HAL_RCCEx_PeriphCLKConfig+0x562>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003872:	2303      	movs	r3, #3
 8003874:	e092      	b.n	800399c <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003876:	4b4b      	ldr	r3, [pc, #300]	; (80039a4 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800387e:	2b00      	cmp	r3, #0
 8003880:	d0f0      	beq.n	8003864 <HAL_RCCEx_PeriphCLKConfig+0x550>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003882:	69bb      	ldr	r3, [r7, #24]
 8003884:	2b01      	cmp	r3, #1
 8003886:	f040 8088 	bne.w	800399a <HAL_RCCEx_PeriphCLKConfig+0x686>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800388a:	4b46      	ldr	r3, [pc, #280]	; (80039a4 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	4a45      	ldr	r2, [pc, #276]	; (80039a4 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8003890:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003894:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003896:	f7fe f9d9 	bl	8001c4c <HAL_GetTick>
 800389a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800389c:	e008      	b.n	80038b0 <HAL_RCCEx_PeriphCLKConfig+0x59c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800389e:	f7fe f9d5 	bl	8001c4c <HAL_GetTick>
 80038a2:	4602      	mov	r2, r0
 80038a4:	697b      	ldr	r3, [r7, #20]
 80038a6:	1ad3      	subs	r3, r2, r3
 80038a8:	2b64      	cmp	r3, #100	; 0x64
 80038aa:	d901      	bls.n	80038b0 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80038ac:	2303      	movs	r3, #3
 80038ae:	e075      	b.n	800399c <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80038b0:	4b3c      	ldr	r3, [pc, #240]	; (80039a4 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80038b8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80038bc:	d0ef      	beq.n	800389e <HAL_RCCEx_PeriphCLKConfig+0x58a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d003      	beq.n	80038d2 <HAL_RCCEx_PeriphCLKConfig+0x5be>
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d009      	beq.n	80038e6 <HAL_RCCEx_PeriphCLKConfig+0x5d2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d024      	beq.n	8003928 <HAL_RCCEx_PeriphCLKConfig+0x614>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d120      	bne.n	8003928 <HAL_RCCEx_PeriphCLKConfig+0x614>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80038e6:	4b2f      	ldr	r3, [pc, #188]	; (80039a4 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80038e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038ec:	0c1b      	lsrs	r3, r3, #16
 80038ee:	f003 0303 	and.w	r3, r3, #3
 80038f2:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	691b      	ldr	r3, [r3, #16]
 80038f8:	019a      	lsls	r2, r3, #6
 80038fa:	693b      	ldr	r3, [r7, #16]
 80038fc:	041b      	lsls	r3, r3, #16
 80038fe:	431a      	orrs	r2, r3
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	695b      	ldr	r3, [r3, #20]
 8003904:	061b      	lsls	r3, r3, #24
 8003906:	4927      	ldr	r1, [pc, #156]	; (80039a4 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8003908:	4313      	orrs	r3, r2
 800390a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800390e:	4b25      	ldr	r3, [pc, #148]	; (80039a4 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8003910:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003914:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6a1b      	ldr	r3, [r3, #32]
 800391c:	3b01      	subs	r3, #1
 800391e:	021b      	lsls	r3, r3, #8
 8003920:	4920      	ldr	r1, [pc, #128]	; (80039a4 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8003922:	4313      	orrs	r3, r2
 8003924:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003930:	2b00      	cmp	r3, #0
 8003932:	d018      	beq.n	8003966 <HAL_RCCEx_PeriphCLKConfig+0x652>
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003938:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800393c:	d113      	bne.n	8003966 <HAL_RCCEx_PeriphCLKConfig+0x652>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800393e:	4b19      	ldr	r3, [pc, #100]	; (80039a4 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8003940:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003944:	0e1b      	lsrs	r3, r3, #24
 8003946:	f003 030f 	and.w	r3, r3, #15
 800394a:	613b      	str	r3, [r7, #16]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	691b      	ldr	r3, [r3, #16]
 8003950:	019a      	lsls	r2, r3, #6
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	699b      	ldr	r3, [r3, #24]
 8003956:	041b      	lsls	r3, r3, #16
 8003958:	431a      	orrs	r2, r3
 800395a:	693b      	ldr	r3, [r7, #16]
 800395c:	061b      	lsls	r3, r3, #24
 800395e:	4911      	ldr	r1, [pc, #68]	; (80039a4 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8003960:	4313      	orrs	r3, r2
 8003962:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003966:	4b0f      	ldr	r3, [pc, #60]	; (80039a4 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	4a0e      	ldr	r2, [pc, #56]	; (80039a4 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800396c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003970:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003972:	f7fe f96b 	bl	8001c4c <HAL_GetTick>
 8003976:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003978:	e008      	b.n	800398c <HAL_RCCEx_PeriphCLKConfig+0x678>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800397a:	f7fe f967 	bl	8001c4c <HAL_GetTick>
 800397e:	4602      	mov	r2, r0
 8003980:	697b      	ldr	r3, [r7, #20]
 8003982:	1ad3      	subs	r3, r2, r3
 8003984:	2b64      	cmp	r3, #100	; 0x64
 8003986:	d901      	bls.n	800398c <HAL_RCCEx_PeriphCLKConfig+0x678>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003988:	2303      	movs	r3, #3
 800398a:	e007      	b.n	800399c <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800398c:	4b05      	ldr	r3, [pc, #20]	; (80039a4 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003994:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003998:	d1ef      	bne.n	800397a <HAL_RCCEx_PeriphCLKConfig+0x666>
      }
    }
  }
  return HAL_OK;
 800399a:	2300      	movs	r3, #0
}
 800399c:	4618      	mov	r0, r3
 800399e:	3720      	adds	r7, #32
 80039a0:	46bd      	mov	sp, r7
 80039a2:	bd80      	pop	{r7, pc}
 80039a4:	40023800 	.word	0x40023800

080039a8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b082      	sub	sp, #8
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d101      	bne.n	80039ba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80039b6:	2301      	movs	r3, #1
 80039b8:	e049      	b.n	8003a4e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039c0:	b2db      	uxtb	r3, r3
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d106      	bne.n	80039d4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	2200      	movs	r2, #0
 80039ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80039ce:	6878      	ldr	r0, [r7, #4]
 80039d0:	f7fd fe78 	bl	80016c4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2202      	movs	r2, #2
 80039d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681a      	ldr	r2, [r3, #0]
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	3304      	adds	r3, #4
 80039e4:	4619      	mov	r1, r3
 80039e6:	4610      	mov	r0, r2
 80039e8:	f001 fa96 	bl	8004f18 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2201      	movs	r2, #1
 80039f0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2201      	movs	r2, #1
 80039f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2201      	movs	r2, #1
 8003a00:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2201      	movs	r2, #1
 8003a08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2201      	movs	r2, #1
 8003a10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2201      	movs	r2, #1
 8003a18:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2201      	movs	r2, #1
 8003a20:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2201      	movs	r2, #1
 8003a28:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2201      	movs	r2, #1
 8003a30:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2201      	movs	r2, #1
 8003a38:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2201      	movs	r2, #1
 8003a40:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2201      	movs	r2, #1
 8003a48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003a4c:	2300      	movs	r3, #0
}
 8003a4e:	4618      	mov	r0, r3
 8003a50:	3708      	adds	r7, #8
 8003a52:	46bd      	mov	sp, r7
 8003a54:	bd80      	pop	{r7, pc}

08003a56 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8003a56:	b580      	push	{r7, lr}
 8003a58:	b082      	sub	sp, #8
 8003a5a:	af00      	add	r7, sp, #0
 8003a5c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d101      	bne.n	8003a68 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8003a64:	2301      	movs	r3, #1
 8003a66:	e049      	b.n	8003afc <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a6e:	b2db      	uxtb	r3, r3
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d106      	bne.n	8003a82 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2200      	movs	r2, #0
 8003a78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8003a7c:	6878      	ldr	r0, [r7, #4]
 8003a7e:	f000 f841 	bl	8003b04 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	2202      	movs	r2, #2
 8003a86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681a      	ldr	r2, [r3, #0]
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	3304      	adds	r3, #4
 8003a92:	4619      	mov	r1, r3
 8003a94:	4610      	mov	r0, r2
 8003a96:	f001 fa3f 	bl	8004f18 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	2201      	movs	r2, #1
 8003a9e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	2201      	movs	r2, #1
 8003aa6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	2201      	movs	r2, #1
 8003aae:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	2201      	movs	r2, #1
 8003ab6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	2201      	movs	r2, #1
 8003abe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	2201      	movs	r2, #1
 8003ac6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	2201      	movs	r2, #1
 8003ace:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	2201      	movs	r2, #1
 8003ad6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	2201      	movs	r2, #1
 8003ade:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	2201      	movs	r2, #1
 8003ae6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	2201      	movs	r2, #1
 8003aee:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	2201      	movs	r2, #1
 8003af6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003afa:	2300      	movs	r3, #0
}
 8003afc:	4618      	mov	r0, r3
 8003afe:	3708      	adds	r7, #8
 8003b00:	46bd      	mov	sp, r7
 8003b02:	bd80      	pop	{r7, pc}

08003b04 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8003b04:	b480      	push	{r7}
 8003b06:	b083      	sub	sp, #12
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8003b0c:	bf00      	nop
 8003b0e:	370c      	adds	r7, #12
 8003b10:	46bd      	mov	sp, r7
 8003b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b16:	4770      	bx	lr

08003b18 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	b084      	sub	sp, #16
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
 8003b20:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003b22:	2300      	movs	r3, #0
 8003b24:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003b26:	683b      	ldr	r3, [r7, #0]
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d109      	bne.n	8003b40 <HAL_TIM_OC_Start_IT+0x28>
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003b32:	b2db      	uxtb	r3, r3
 8003b34:	2b01      	cmp	r3, #1
 8003b36:	bf14      	ite	ne
 8003b38:	2301      	movne	r3, #1
 8003b3a:	2300      	moveq	r3, #0
 8003b3c:	b2db      	uxtb	r3, r3
 8003b3e:	e03c      	b.n	8003bba <HAL_TIM_OC_Start_IT+0xa2>
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	2b04      	cmp	r3, #4
 8003b44:	d109      	bne.n	8003b5a <HAL_TIM_OC_Start_IT+0x42>
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003b4c:	b2db      	uxtb	r3, r3
 8003b4e:	2b01      	cmp	r3, #1
 8003b50:	bf14      	ite	ne
 8003b52:	2301      	movne	r3, #1
 8003b54:	2300      	moveq	r3, #0
 8003b56:	b2db      	uxtb	r3, r3
 8003b58:	e02f      	b.n	8003bba <HAL_TIM_OC_Start_IT+0xa2>
 8003b5a:	683b      	ldr	r3, [r7, #0]
 8003b5c:	2b08      	cmp	r3, #8
 8003b5e:	d109      	bne.n	8003b74 <HAL_TIM_OC_Start_IT+0x5c>
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003b66:	b2db      	uxtb	r3, r3
 8003b68:	2b01      	cmp	r3, #1
 8003b6a:	bf14      	ite	ne
 8003b6c:	2301      	movne	r3, #1
 8003b6e:	2300      	moveq	r3, #0
 8003b70:	b2db      	uxtb	r3, r3
 8003b72:	e022      	b.n	8003bba <HAL_TIM_OC_Start_IT+0xa2>
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	2b0c      	cmp	r3, #12
 8003b78:	d109      	bne.n	8003b8e <HAL_TIM_OC_Start_IT+0x76>
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b80:	b2db      	uxtb	r3, r3
 8003b82:	2b01      	cmp	r3, #1
 8003b84:	bf14      	ite	ne
 8003b86:	2301      	movne	r3, #1
 8003b88:	2300      	moveq	r3, #0
 8003b8a:	b2db      	uxtb	r3, r3
 8003b8c:	e015      	b.n	8003bba <HAL_TIM_OC_Start_IT+0xa2>
 8003b8e:	683b      	ldr	r3, [r7, #0]
 8003b90:	2b10      	cmp	r3, #16
 8003b92:	d109      	bne.n	8003ba8 <HAL_TIM_OC_Start_IT+0x90>
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003b9a:	b2db      	uxtb	r3, r3
 8003b9c:	2b01      	cmp	r3, #1
 8003b9e:	bf14      	ite	ne
 8003ba0:	2301      	movne	r3, #1
 8003ba2:	2300      	moveq	r3, #0
 8003ba4:	b2db      	uxtb	r3, r3
 8003ba6:	e008      	b.n	8003bba <HAL_TIM_OC_Start_IT+0xa2>
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003bae:	b2db      	uxtb	r3, r3
 8003bb0:	2b01      	cmp	r3, #1
 8003bb2:	bf14      	ite	ne
 8003bb4:	2301      	movne	r3, #1
 8003bb6:	2300      	moveq	r3, #0
 8003bb8:	b2db      	uxtb	r3, r3
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d001      	beq.n	8003bc2 <HAL_TIM_OC_Start_IT+0xaa>
  {
    return HAL_ERROR;
 8003bbe:	2301      	movs	r3, #1
 8003bc0:	e0dd      	b.n	8003d7e <HAL_TIM_OC_Start_IT+0x266>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003bc2:	683b      	ldr	r3, [r7, #0]
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d104      	bne.n	8003bd2 <HAL_TIM_OC_Start_IT+0xba>
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2202      	movs	r2, #2
 8003bcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003bd0:	e023      	b.n	8003c1a <HAL_TIM_OC_Start_IT+0x102>
 8003bd2:	683b      	ldr	r3, [r7, #0]
 8003bd4:	2b04      	cmp	r3, #4
 8003bd6:	d104      	bne.n	8003be2 <HAL_TIM_OC_Start_IT+0xca>
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2202      	movs	r2, #2
 8003bdc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003be0:	e01b      	b.n	8003c1a <HAL_TIM_OC_Start_IT+0x102>
 8003be2:	683b      	ldr	r3, [r7, #0]
 8003be4:	2b08      	cmp	r3, #8
 8003be6:	d104      	bne.n	8003bf2 <HAL_TIM_OC_Start_IT+0xda>
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2202      	movs	r2, #2
 8003bec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003bf0:	e013      	b.n	8003c1a <HAL_TIM_OC_Start_IT+0x102>
 8003bf2:	683b      	ldr	r3, [r7, #0]
 8003bf4:	2b0c      	cmp	r3, #12
 8003bf6:	d104      	bne.n	8003c02 <HAL_TIM_OC_Start_IT+0xea>
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2202      	movs	r2, #2
 8003bfc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003c00:	e00b      	b.n	8003c1a <HAL_TIM_OC_Start_IT+0x102>
 8003c02:	683b      	ldr	r3, [r7, #0]
 8003c04:	2b10      	cmp	r3, #16
 8003c06:	d104      	bne.n	8003c12 <HAL_TIM_OC_Start_IT+0xfa>
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2202      	movs	r2, #2
 8003c0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003c10:	e003      	b.n	8003c1a <HAL_TIM_OC_Start_IT+0x102>
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	2202      	movs	r2, #2
 8003c16:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  switch (Channel)
 8003c1a:	683b      	ldr	r3, [r7, #0]
 8003c1c:	2b0c      	cmp	r3, #12
 8003c1e:	d841      	bhi.n	8003ca4 <HAL_TIM_OC_Start_IT+0x18c>
 8003c20:	a201      	add	r2, pc, #4	; (adr r2, 8003c28 <HAL_TIM_OC_Start_IT+0x110>)
 8003c22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c26:	bf00      	nop
 8003c28:	08003c5d 	.word	0x08003c5d
 8003c2c:	08003ca5 	.word	0x08003ca5
 8003c30:	08003ca5 	.word	0x08003ca5
 8003c34:	08003ca5 	.word	0x08003ca5
 8003c38:	08003c6f 	.word	0x08003c6f
 8003c3c:	08003ca5 	.word	0x08003ca5
 8003c40:	08003ca5 	.word	0x08003ca5
 8003c44:	08003ca5 	.word	0x08003ca5
 8003c48:	08003c81 	.word	0x08003c81
 8003c4c:	08003ca5 	.word	0x08003ca5
 8003c50:	08003ca5 	.word	0x08003ca5
 8003c54:	08003ca5 	.word	0x08003ca5
 8003c58:	08003c93 	.word	0x08003c93
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	68da      	ldr	r2, [r3, #12]
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f042 0202 	orr.w	r2, r2, #2
 8003c6a:	60da      	str	r2, [r3, #12]
      break;
 8003c6c:	e01d      	b.n	8003caa <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	68da      	ldr	r2, [r3, #12]
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f042 0204 	orr.w	r2, r2, #4
 8003c7c:	60da      	str	r2, [r3, #12]
      break;
 8003c7e:	e014      	b.n	8003caa <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	68da      	ldr	r2, [r3, #12]
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f042 0208 	orr.w	r2, r2, #8
 8003c8e:	60da      	str	r2, [r3, #12]
      break;
 8003c90:	e00b      	b.n	8003caa <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	68da      	ldr	r2, [r3, #12]
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f042 0210 	orr.w	r2, r2, #16
 8003ca0:	60da      	str	r2, [r3, #12]
      break;
 8003ca2:	e002      	b.n	8003caa <HAL_TIM_OC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8003ca4:	2301      	movs	r3, #1
 8003ca6:	73fb      	strb	r3, [r7, #15]
      break;
 8003ca8:	bf00      	nop
  }

  if (status == HAL_OK)
 8003caa:	7bfb      	ldrb	r3, [r7, #15]
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d165      	bne.n	8003d7c <HAL_TIM_OC_Start_IT+0x264>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	2201      	movs	r2, #1
 8003cb6:	6839      	ldr	r1, [r7, #0]
 8003cb8:	4618      	mov	r0, r3
 8003cba:	f001 fdef 	bl	800589c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	4a31      	ldr	r2, [pc, #196]	; (8003d88 <HAL_TIM_OC_Start_IT+0x270>)
 8003cc4:	4293      	cmp	r3, r2
 8003cc6:	d004      	beq.n	8003cd2 <HAL_TIM_OC_Start_IT+0x1ba>
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	4a2f      	ldr	r2, [pc, #188]	; (8003d8c <HAL_TIM_OC_Start_IT+0x274>)
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d101      	bne.n	8003cd6 <HAL_TIM_OC_Start_IT+0x1be>
 8003cd2:	2301      	movs	r3, #1
 8003cd4:	e000      	b.n	8003cd8 <HAL_TIM_OC_Start_IT+0x1c0>
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d007      	beq.n	8003cec <HAL_TIM_OC_Start_IT+0x1d4>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003cea:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	4a25      	ldr	r2, [pc, #148]	; (8003d88 <HAL_TIM_OC_Start_IT+0x270>)
 8003cf2:	4293      	cmp	r3, r2
 8003cf4:	d022      	beq.n	8003d3c <HAL_TIM_OC_Start_IT+0x224>
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003cfe:	d01d      	beq.n	8003d3c <HAL_TIM_OC_Start_IT+0x224>
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	4a22      	ldr	r2, [pc, #136]	; (8003d90 <HAL_TIM_OC_Start_IT+0x278>)
 8003d06:	4293      	cmp	r3, r2
 8003d08:	d018      	beq.n	8003d3c <HAL_TIM_OC_Start_IT+0x224>
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	4a21      	ldr	r2, [pc, #132]	; (8003d94 <HAL_TIM_OC_Start_IT+0x27c>)
 8003d10:	4293      	cmp	r3, r2
 8003d12:	d013      	beq.n	8003d3c <HAL_TIM_OC_Start_IT+0x224>
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	4a1f      	ldr	r2, [pc, #124]	; (8003d98 <HAL_TIM_OC_Start_IT+0x280>)
 8003d1a:	4293      	cmp	r3, r2
 8003d1c:	d00e      	beq.n	8003d3c <HAL_TIM_OC_Start_IT+0x224>
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	4a1a      	ldr	r2, [pc, #104]	; (8003d8c <HAL_TIM_OC_Start_IT+0x274>)
 8003d24:	4293      	cmp	r3, r2
 8003d26:	d009      	beq.n	8003d3c <HAL_TIM_OC_Start_IT+0x224>
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	4a1b      	ldr	r2, [pc, #108]	; (8003d9c <HAL_TIM_OC_Start_IT+0x284>)
 8003d2e:	4293      	cmp	r3, r2
 8003d30:	d004      	beq.n	8003d3c <HAL_TIM_OC_Start_IT+0x224>
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	4a1a      	ldr	r2, [pc, #104]	; (8003da0 <HAL_TIM_OC_Start_IT+0x288>)
 8003d38:	4293      	cmp	r3, r2
 8003d3a:	d115      	bne.n	8003d68 <HAL_TIM_OC_Start_IT+0x250>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	689a      	ldr	r2, [r3, #8]
 8003d42:	4b18      	ldr	r3, [pc, #96]	; (8003da4 <HAL_TIM_OC_Start_IT+0x28c>)
 8003d44:	4013      	ands	r3, r2
 8003d46:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d48:	68bb      	ldr	r3, [r7, #8]
 8003d4a:	2b06      	cmp	r3, #6
 8003d4c:	d015      	beq.n	8003d7a <HAL_TIM_OC_Start_IT+0x262>
 8003d4e:	68bb      	ldr	r3, [r7, #8]
 8003d50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d54:	d011      	beq.n	8003d7a <HAL_TIM_OC_Start_IT+0x262>
      {
        __HAL_TIM_ENABLE(htim);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	681a      	ldr	r2, [r3, #0]
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f042 0201 	orr.w	r2, r2, #1
 8003d64:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d66:	e008      	b.n	8003d7a <HAL_TIM_OC_Start_IT+0x262>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	681a      	ldr	r2, [r3, #0]
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f042 0201 	orr.w	r2, r2, #1
 8003d76:	601a      	str	r2, [r3, #0]
 8003d78:	e000      	b.n	8003d7c <HAL_TIM_OC_Start_IT+0x264>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d7a:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8003d7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d7e:	4618      	mov	r0, r3
 8003d80:	3710      	adds	r7, #16
 8003d82:	46bd      	mov	sp, r7
 8003d84:	bd80      	pop	{r7, pc}
 8003d86:	bf00      	nop
 8003d88:	40010000 	.word	0x40010000
 8003d8c:	40010400 	.word	0x40010400
 8003d90:	40000400 	.word	0x40000400
 8003d94:	40000800 	.word	0x40000800
 8003d98:	40000c00 	.word	0x40000c00
 8003d9c:	40014000 	.word	0x40014000
 8003da0:	40001800 	.word	0x40001800
 8003da4:	00010007 	.word	0x00010007

08003da8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b082      	sub	sp, #8
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d101      	bne.n	8003dba <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003db6:	2301      	movs	r3, #1
 8003db8:	e049      	b.n	8003e4e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003dc0:	b2db      	uxtb	r3, r3
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d106      	bne.n	8003dd4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	2200      	movs	r2, #0
 8003dca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003dce:	6878      	ldr	r0, [r7, #4]
 8003dd0:	f000 f841 	bl	8003e56 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2202      	movs	r2, #2
 8003dd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681a      	ldr	r2, [r3, #0]
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	3304      	adds	r3, #4
 8003de4:	4619      	mov	r1, r3
 8003de6:	4610      	mov	r0, r2
 8003de8:	f001 f896 	bl	8004f18 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2201      	movs	r2, #1
 8003df0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2201      	movs	r2, #1
 8003df8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2201      	movs	r2, #1
 8003e00:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2201      	movs	r2, #1
 8003e08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2201      	movs	r2, #1
 8003e10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2201      	movs	r2, #1
 8003e18:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2201      	movs	r2, #1
 8003e20:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2201      	movs	r2, #1
 8003e28:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2201      	movs	r2, #1
 8003e30:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2201      	movs	r2, #1
 8003e38:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2201      	movs	r2, #1
 8003e40:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2201      	movs	r2, #1
 8003e48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003e4c:	2300      	movs	r3, #0
}
 8003e4e:	4618      	mov	r0, r3
 8003e50:	3708      	adds	r7, #8
 8003e52:	46bd      	mov	sp, r7
 8003e54:	bd80      	pop	{r7, pc}

08003e56 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003e56:	b480      	push	{r7}
 8003e58:	b083      	sub	sp, #12
 8003e5a:	af00      	add	r7, sp, #0
 8003e5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003e5e:	bf00      	nop
 8003e60:	370c      	adds	r7, #12
 8003e62:	46bd      	mov	sp, r7
 8003e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e68:	4770      	bx	lr
	...

08003e6c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	b084      	sub	sp, #16
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
 8003e74:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d109      	bne.n	8003e90 <HAL_TIM_PWM_Start+0x24>
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003e82:	b2db      	uxtb	r3, r3
 8003e84:	2b01      	cmp	r3, #1
 8003e86:	bf14      	ite	ne
 8003e88:	2301      	movne	r3, #1
 8003e8a:	2300      	moveq	r3, #0
 8003e8c:	b2db      	uxtb	r3, r3
 8003e8e:	e03c      	b.n	8003f0a <HAL_TIM_PWM_Start+0x9e>
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	2b04      	cmp	r3, #4
 8003e94:	d109      	bne.n	8003eaa <HAL_TIM_PWM_Start+0x3e>
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003e9c:	b2db      	uxtb	r3, r3
 8003e9e:	2b01      	cmp	r3, #1
 8003ea0:	bf14      	ite	ne
 8003ea2:	2301      	movne	r3, #1
 8003ea4:	2300      	moveq	r3, #0
 8003ea6:	b2db      	uxtb	r3, r3
 8003ea8:	e02f      	b.n	8003f0a <HAL_TIM_PWM_Start+0x9e>
 8003eaa:	683b      	ldr	r3, [r7, #0]
 8003eac:	2b08      	cmp	r3, #8
 8003eae:	d109      	bne.n	8003ec4 <HAL_TIM_PWM_Start+0x58>
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003eb6:	b2db      	uxtb	r3, r3
 8003eb8:	2b01      	cmp	r3, #1
 8003eba:	bf14      	ite	ne
 8003ebc:	2301      	movne	r3, #1
 8003ebe:	2300      	moveq	r3, #0
 8003ec0:	b2db      	uxtb	r3, r3
 8003ec2:	e022      	b.n	8003f0a <HAL_TIM_PWM_Start+0x9e>
 8003ec4:	683b      	ldr	r3, [r7, #0]
 8003ec6:	2b0c      	cmp	r3, #12
 8003ec8:	d109      	bne.n	8003ede <HAL_TIM_PWM_Start+0x72>
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ed0:	b2db      	uxtb	r3, r3
 8003ed2:	2b01      	cmp	r3, #1
 8003ed4:	bf14      	ite	ne
 8003ed6:	2301      	movne	r3, #1
 8003ed8:	2300      	moveq	r3, #0
 8003eda:	b2db      	uxtb	r3, r3
 8003edc:	e015      	b.n	8003f0a <HAL_TIM_PWM_Start+0x9e>
 8003ede:	683b      	ldr	r3, [r7, #0]
 8003ee0:	2b10      	cmp	r3, #16
 8003ee2:	d109      	bne.n	8003ef8 <HAL_TIM_PWM_Start+0x8c>
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003eea:	b2db      	uxtb	r3, r3
 8003eec:	2b01      	cmp	r3, #1
 8003eee:	bf14      	ite	ne
 8003ef0:	2301      	movne	r3, #1
 8003ef2:	2300      	moveq	r3, #0
 8003ef4:	b2db      	uxtb	r3, r3
 8003ef6:	e008      	b.n	8003f0a <HAL_TIM_PWM_Start+0x9e>
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003efe:	b2db      	uxtb	r3, r3
 8003f00:	2b01      	cmp	r3, #1
 8003f02:	bf14      	ite	ne
 8003f04:	2301      	movne	r3, #1
 8003f06:	2300      	moveq	r3, #0
 8003f08:	b2db      	uxtb	r3, r3
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d001      	beq.n	8003f12 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8003f0e:	2301      	movs	r3, #1
 8003f10:	e092      	b.n	8004038 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003f12:	683b      	ldr	r3, [r7, #0]
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d104      	bne.n	8003f22 <HAL_TIM_PWM_Start+0xb6>
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2202      	movs	r2, #2
 8003f1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003f20:	e023      	b.n	8003f6a <HAL_TIM_PWM_Start+0xfe>
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	2b04      	cmp	r3, #4
 8003f26:	d104      	bne.n	8003f32 <HAL_TIM_PWM_Start+0xc6>
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	2202      	movs	r2, #2
 8003f2c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003f30:	e01b      	b.n	8003f6a <HAL_TIM_PWM_Start+0xfe>
 8003f32:	683b      	ldr	r3, [r7, #0]
 8003f34:	2b08      	cmp	r3, #8
 8003f36:	d104      	bne.n	8003f42 <HAL_TIM_PWM_Start+0xd6>
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2202      	movs	r2, #2
 8003f3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003f40:	e013      	b.n	8003f6a <HAL_TIM_PWM_Start+0xfe>
 8003f42:	683b      	ldr	r3, [r7, #0]
 8003f44:	2b0c      	cmp	r3, #12
 8003f46:	d104      	bne.n	8003f52 <HAL_TIM_PWM_Start+0xe6>
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2202      	movs	r2, #2
 8003f4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003f50:	e00b      	b.n	8003f6a <HAL_TIM_PWM_Start+0xfe>
 8003f52:	683b      	ldr	r3, [r7, #0]
 8003f54:	2b10      	cmp	r3, #16
 8003f56:	d104      	bne.n	8003f62 <HAL_TIM_PWM_Start+0xf6>
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2202      	movs	r2, #2
 8003f5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003f60:	e003      	b.n	8003f6a <HAL_TIM_PWM_Start+0xfe>
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	2202      	movs	r2, #2
 8003f66:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	2201      	movs	r2, #1
 8003f70:	6839      	ldr	r1, [r7, #0]
 8003f72:	4618      	mov	r0, r3
 8003f74:	f001 fc92 	bl	800589c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	4a30      	ldr	r2, [pc, #192]	; (8004040 <HAL_TIM_PWM_Start+0x1d4>)
 8003f7e:	4293      	cmp	r3, r2
 8003f80:	d004      	beq.n	8003f8c <HAL_TIM_PWM_Start+0x120>
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	4a2f      	ldr	r2, [pc, #188]	; (8004044 <HAL_TIM_PWM_Start+0x1d8>)
 8003f88:	4293      	cmp	r3, r2
 8003f8a:	d101      	bne.n	8003f90 <HAL_TIM_PWM_Start+0x124>
 8003f8c:	2301      	movs	r3, #1
 8003f8e:	e000      	b.n	8003f92 <HAL_TIM_PWM_Start+0x126>
 8003f90:	2300      	movs	r3, #0
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d007      	beq.n	8003fa6 <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003fa4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	4a25      	ldr	r2, [pc, #148]	; (8004040 <HAL_TIM_PWM_Start+0x1d4>)
 8003fac:	4293      	cmp	r3, r2
 8003fae:	d022      	beq.n	8003ff6 <HAL_TIM_PWM_Start+0x18a>
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fb8:	d01d      	beq.n	8003ff6 <HAL_TIM_PWM_Start+0x18a>
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	4a22      	ldr	r2, [pc, #136]	; (8004048 <HAL_TIM_PWM_Start+0x1dc>)
 8003fc0:	4293      	cmp	r3, r2
 8003fc2:	d018      	beq.n	8003ff6 <HAL_TIM_PWM_Start+0x18a>
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	4a20      	ldr	r2, [pc, #128]	; (800404c <HAL_TIM_PWM_Start+0x1e0>)
 8003fca:	4293      	cmp	r3, r2
 8003fcc:	d013      	beq.n	8003ff6 <HAL_TIM_PWM_Start+0x18a>
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	4a1f      	ldr	r2, [pc, #124]	; (8004050 <HAL_TIM_PWM_Start+0x1e4>)
 8003fd4:	4293      	cmp	r3, r2
 8003fd6:	d00e      	beq.n	8003ff6 <HAL_TIM_PWM_Start+0x18a>
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	4a19      	ldr	r2, [pc, #100]	; (8004044 <HAL_TIM_PWM_Start+0x1d8>)
 8003fde:	4293      	cmp	r3, r2
 8003fe0:	d009      	beq.n	8003ff6 <HAL_TIM_PWM_Start+0x18a>
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	4a1b      	ldr	r2, [pc, #108]	; (8004054 <HAL_TIM_PWM_Start+0x1e8>)
 8003fe8:	4293      	cmp	r3, r2
 8003fea:	d004      	beq.n	8003ff6 <HAL_TIM_PWM_Start+0x18a>
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	4a19      	ldr	r2, [pc, #100]	; (8004058 <HAL_TIM_PWM_Start+0x1ec>)
 8003ff2:	4293      	cmp	r3, r2
 8003ff4:	d115      	bne.n	8004022 <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	689a      	ldr	r2, [r3, #8]
 8003ffc:	4b17      	ldr	r3, [pc, #92]	; (800405c <HAL_TIM_PWM_Start+0x1f0>)
 8003ffe:	4013      	ands	r3, r2
 8004000:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	2b06      	cmp	r3, #6
 8004006:	d015      	beq.n	8004034 <HAL_TIM_PWM_Start+0x1c8>
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800400e:	d011      	beq.n	8004034 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	681a      	ldr	r2, [r3, #0]
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f042 0201 	orr.w	r2, r2, #1
 800401e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004020:	e008      	b.n	8004034 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	681a      	ldr	r2, [r3, #0]
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f042 0201 	orr.w	r2, r2, #1
 8004030:	601a      	str	r2, [r3, #0]
 8004032:	e000      	b.n	8004036 <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004034:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004036:	2300      	movs	r3, #0
}
 8004038:	4618      	mov	r0, r3
 800403a:	3710      	adds	r7, #16
 800403c:	46bd      	mov	sp, r7
 800403e:	bd80      	pop	{r7, pc}
 8004040:	40010000 	.word	0x40010000
 8004044:	40010400 	.word	0x40010400
 8004048:	40000400 	.word	0x40000400
 800404c:	40000800 	.word	0x40000800
 8004050:	40000c00 	.word	0x40000c00
 8004054:	40014000 	.word	0x40014000
 8004058:	40001800 	.word	0x40001800
 800405c:	00010007 	.word	0x00010007

08004060 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8004060:	b580      	push	{r7, lr}
 8004062:	b082      	sub	sp, #8
 8004064:	af00      	add	r7, sp, #0
 8004066:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2b00      	cmp	r3, #0
 800406c:	d101      	bne.n	8004072 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800406e:	2301      	movs	r3, #1
 8004070:	e049      	b.n	8004106 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004078:	b2db      	uxtb	r3, r3
 800407a:	2b00      	cmp	r3, #0
 800407c:	d106      	bne.n	800408c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	2200      	movs	r2, #0
 8004082:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8004086:	6878      	ldr	r0, [r7, #4]
 8004088:	f000 f841 	bl	800410e <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2202      	movs	r2, #2
 8004090:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681a      	ldr	r2, [r3, #0]
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	3304      	adds	r3, #4
 800409c:	4619      	mov	r1, r3
 800409e:	4610      	mov	r0, r2
 80040a0:	f000 ff3a 	bl	8004f18 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2201      	movs	r2, #1
 80040a8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2201      	movs	r2, #1
 80040b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2201      	movs	r2, #1
 80040b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2201      	movs	r2, #1
 80040c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2201      	movs	r2, #1
 80040c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2201      	movs	r2, #1
 80040d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2201      	movs	r2, #1
 80040d8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2201      	movs	r2, #1
 80040e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2201      	movs	r2, #1
 80040e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2201      	movs	r2, #1
 80040f0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2201      	movs	r2, #1
 80040f8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2201      	movs	r2, #1
 8004100:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004104:	2300      	movs	r3, #0
}
 8004106:	4618      	mov	r0, r3
 8004108:	3708      	adds	r7, #8
 800410a:	46bd      	mov	sp, r7
 800410c:	bd80      	pop	{r7, pc}

0800410e <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800410e:	b480      	push	{r7}
 8004110:	b083      	sub	sp, #12
 8004112:	af00      	add	r7, sp, #0
 8004114:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8004116:	bf00      	nop
 8004118:	370c      	adds	r7, #12
 800411a:	46bd      	mov	sp, r7
 800411c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004120:	4770      	bx	lr
	...

08004124 <HAL_TIM_IC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from TIM peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8004124:	b580      	push	{r7, lr}
 8004126:	b086      	sub	sp, #24
 8004128:	af00      	add	r7, sp, #0
 800412a:	60f8      	str	r0, [r7, #12]
 800412c:	60b9      	str	r1, [r7, #8]
 800412e:	607a      	str	r2, [r7, #4]
 8004130:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8004132:	2300      	movs	r3, #0
 8004134:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8004136:	68bb      	ldr	r3, [r7, #8]
 8004138:	2b00      	cmp	r3, #0
 800413a:	d104      	bne.n	8004146 <HAL_TIM_IC_Start_DMA+0x22>
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004142:	b2db      	uxtb	r3, r3
 8004144:	e023      	b.n	800418e <HAL_TIM_IC_Start_DMA+0x6a>
 8004146:	68bb      	ldr	r3, [r7, #8]
 8004148:	2b04      	cmp	r3, #4
 800414a:	d104      	bne.n	8004156 <HAL_TIM_IC_Start_DMA+0x32>
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004152:	b2db      	uxtb	r3, r3
 8004154:	e01b      	b.n	800418e <HAL_TIM_IC_Start_DMA+0x6a>
 8004156:	68bb      	ldr	r3, [r7, #8]
 8004158:	2b08      	cmp	r3, #8
 800415a:	d104      	bne.n	8004166 <HAL_TIM_IC_Start_DMA+0x42>
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004162:	b2db      	uxtb	r3, r3
 8004164:	e013      	b.n	800418e <HAL_TIM_IC_Start_DMA+0x6a>
 8004166:	68bb      	ldr	r3, [r7, #8]
 8004168:	2b0c      	cmp	r3, #12
 800416a:	d104      	bne.n	8004176 <HAL_TIM_IC_Start_DMA+0x52>
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004172:	b2db      	uxtb	r3, r3
 8004174:	e00b      	b.n	800418e <HAL_TIM_IC_Start_DMA+0x6a>
 8004176:	68bb      	ldr	r3, [r7, #8]
 8004178:	2b10      	cmp	r3, #16
 800417a:	d104      	bne.n	8004186 <HAL_TIM_IC_Start_DMA+0x62>
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004182:	b2db      	uxtb	r3, r3
 8004184:	e003      	b.n	800418e <HAL_TIM_IC_Start_DMA+0x6a>
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800418c:	b2db      	uxtb	r3, r3
 800418e:	75bb      	strb	r3, [r7, #22]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8004190:	68bb      	ldr	r3, [r7, #8]
 8004192:	2b00      	cmp	r3, #0
 8004194:	d104      	bne.n	80041a0 <HAL_TIM_IC_Start_DMA+0x7c>
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800419c:	b2db      	uxtb	r3, r3
 800419e:	e013      	b.n	80041c8 <HAL_TIM_IC_Start_DMA+0xa4>
 80041a0:	68bb      	ldr	r3, [r7, #8]
 80041a2:	2b04      	cmp	r3, #4
 80041a4:	d104      	bne.n	80041b0 <HAL_TIM_IC_Start_DMA+0x8c>
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80041ac:	b2db      	uxtb	r3, r3
 80041ae:	e00b      	b.n	80041c8 <HAL_TIM_IC_Start_DMA+0xa4>
 80041b0:	68bb      	ldr	r3, [r7, #8]
 80041b2:	2b08      	cmp	r3, #8
 80041b4:	d104      	bne.n	80041c0 <HAL_TIM_IC_Start_DMA+0x9c>
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80041bc:	b2db      	uxtb	r3, r3
 80041be:	e003      	b.n	80041c8 <HAL_TIM_IC_Start_DMA+0xa4>
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 80041c6:	b2db      	uxtb	r3, r3
 80041c8:	757b      	strb	r3, [r7, #21]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
  assert_param(IS_TIM_DMA_CC_INSTANCE(htim->Instance));

  /* Set the TIM channel state */
  if ((channel_state == HAL_TIM_CHANNEL_STATE_BUSY)
 80041ca:	7dbb      	ldrb	r3, [r7, #22]
 80041cc:	2b02      	cmp	r3, #2
 80041ce:	d002      	beq.n	80041d6 <HAL_TIM_IC_Start_DMA+0xb2>
      || (complementary_channel_state == HAL_TIM_CHANNEL_STATE_BUSY))
 80041d0:	7d7b      	ldrb	r3, [r7, #21]
 80041d2:	2b02      	cmp	r3, #2
 80041d4:	d101      	bne.n	80041da <HAL_TIM_IC_Start_DMA+0xb6>
  {
    return HAL_BUSY;
 80041d6:	2302      	movs	r3, #2
 80041d8:	e15c      	b.n	8004494 <HAL_TIM_IC_Start_DMA+0x370>
  }
  else if ((channel_state == HAL_TIM_CHANNEL_STATE_READY)
 80041da:	7dbb      	ldrb	r3, [r7, #22]
 80041dc:	2b01      	cmp	r3, #1
 80041de:	d153      	bne.n	8004288 <HAL_TIM_IC_Start_DMA+0x164>
           && (complementary_channel_state == HAL_TIM_CHANNEL_STATE_READY))
 80041e0:	7d7b      	ldrb	r3, [r7, #21]
 80041e2:	2b01      	cmp	r3, #1
 80041e4:	d150      	bne.n	8004288 <HAL_TIM_IC_Start_DMA+0x164>
  {
    if ((pData == NULL) && (Length > 0U))
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d104      	bne.n	80041f6 <HAL_TIM_IC_Start_DMA+0xd2>
 80041ec:	887b      	ldrh	r3, [r7, #2]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d001      	beq.n	80041f6 <HAL_TIM_IC_Start_DMA+0xd2>
    {
      return HAL_ERROR;
 80041f2:	2301      	movs	r3, #1
 80041f4:	e14e      	b.n	8004494 <HAL_TIM_IC_Start_DMA+0x370>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80041f6:	68bb      	ldr	r3, [r7, #8]
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d104      	bne.n	8004206 <HAL_TIM_IC_Start_DMA+0xe2>
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	2202      	movs	r2, #2
 8004200:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004204:	e023      	b.n	800424e <HAL_TIM_IC_Start_DMA+0x12a>
 8004206:	68bb      	ldr	r3, [r7, #8]
 8004208:	2b04      	cmp	r3, #4
 800420a:	d104      	bne.n	8004216 <HAL_TIM_IC_Start_DMA+0xf2>
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	2202      	movs	r2, #2
 8004210:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004214:	e01b      	b.n	800424e <HAL_TIM_IC_Start_DMA+0x12a>
 8004216:	68bb      	ldr	r3, [r7, #8]
 8004218:	2b08      	cmp	r3, #8
 800421a:	d104      	bne.n	8004226 <HAL_TIM_IC_Start_DMA+0x102>
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	2202      	movs	r2, #2
 8004220:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004224:	e013      	b.n	800424e <HAL_TIM_IC_Start_DMA+0x12a>
 8004226:	68bb      	ldr	r3, [r7, #8]
 8004228:	2b0c      	cmp	r3, #12
 800422a:	d104      	bne.n	8004236 <HAL_TIM_IC_Start_DMA+0x112>
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	2202      	movs	r2, #2
 8004230:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004234:	e00b      	b.n	800424e <HAL_TIM_IC_Start_DMA+0x12a>
 8004236:	68bb      	ldr	r3, [r7, #8]
 8004238:	2b10      	cmp	r3, #16
 800423a:	d104      	bne.n	8004246 <HAL_TIM_IC_Start_DMA+0x122>
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	2202      	movs	r2, #2
 8004240:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004244:	e003      	b.n	800424e <HAL_TIM_IC_Start_DMA+0x12a>
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	2202      	movs	r2, #2
 800424a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800424e:	68bb      	ldr	r3, [r7, #8]
 8004250:	2b00      	cmp	r3, #0
 8004252:	d104      	bne.n	800425e <HAL_TIM_IC_Start_DMA+0x13a>
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	2202      	movs	r2, #2
 8004258:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    if ((pData == NULL) && (Length > 0U))
 800425c:	e016      	b.n	800428c <HAL_TIM_IC_Start_DMA+0x168>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800425e:	68bb      	ldr	r3, [r7, #8]
 8004260:	2b04      	cmp	r3, #4
 8004262:	d104      	bne.n	800426e <HAL_TIM_IC_Start_DMA+0x14a>
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	2202      	movs	r2, #2
 8004268:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    if ((pData == NULL) && (Length > 0U))
 800426c:	e00e      	b.n	800428c <HAL_TIM_IC_Start_DMA+0x168>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800426e:	68bb      	ldr	r3, [r7, #8]
 8004270:	2b08      	cmp	r3, #8
 8004272:	d104      	bne.n	800427e <HAL_TIM_IC_Start_DMA+0x15a>
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	2202      	movs	r2, #2
 8004278:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
    if ((pData == NULL) && (Length > 0U))
 800427c:	e006      	b.n	800428c <HAL_TIM_IC_Start_DMA+0x168>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	2202      	movs	r2, #2
 8004282:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
    if ((pData == NULL) && (Length > 0U))
 8004286:	e001      	b.n	800428c <HAL_TIM_IC_Start_DMA+0x168>
    }
  }
  else
  {
    return HAL_ERROR;
 8004288:	2301      	movs	r3, #1
 800428a:	e103      	b.n	8004494 <HAL_TIM_IC_Start_DMA+0x370>
  }

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	2201      	movs	r2, #1
 8004292:	68b9      	ldr	r1, [r7, #8]
 8004294:	4618      	mov	r0, r3
 8004296:	f001 fb01 	bl	800589c <TIM_CCxChannelCmd>

  switch (Channel)
 800429a:	68bb      	ldr	r3, [r7, #8]
 800429c:	2b0c      	cmp	r3, #12
 800429e:	f200 80ad 	bhi.w	80043fc <HAL_TIM_IC_Start_DMA+0x2d8>
 80042a2:	a201      	add	r2, pc, #4	; (adr r2, 80042a8 <HAL_TIM_IC_Start_DMA+0x184>)
 80042a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042a8:	080042dd 	.word	0x080042dd
 80042ac:	080043fd 	.word	0x080043fd
 80042b0:	080043fd 	.word	0x080043fd
 80042b4:	080043fd 	.word	0x080043fd
 80042b8:	08004325 	.word	0x08004325
 80042bc:	080043fd 	.word	0x080043fd
 80042c0:	080043fd 	.word	0x080043fd
 80042c4:	080043fd 	.word	0x080043fd
 80042c8:	0800436d 	.word	0x0800436d
 80042cc:	080043fd 	.word	0x080043fd
 80042d0:	080043fd 	.word	0x080043fd
 80042d4:	080043fd 	.word	0x080043fd
 80042d8:	080043b5 	.word	0x080043b5
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMACaptureCplt;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042e0:	4a6e      	ldr	r2, [pc, #440]	; (800449c <HAL_TIM_IC_Start_DMA+0x378>)
 80042e2:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042e8:	4a6d      	ldr	r2, [pc, #436]	; (80044a0 <HAL_TIM_IC_Start_DMA+0x37c>)
 80042ea:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042f0:	4a6c      	ldr	r2, [pc, #432]	; (80044a4 <HAL_TIM_IC_Start_DMA+0x380>)
 80042f2:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->CCR1, (uint32_t)pData,
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	3334      	adds	r3, #52	; 0x34
 80042fe:	4619      	mov	r1, r3
 8004300:	687a      	ldr	r2, [r7, #4]
 8004302:	887b      	ldrh	r3, [r7, #2]
 8004304:	f7fd fe92 	bl	800202c <HAL_DMA_Start_IT>
 8004308:	4603      	mov	r3, r0
 800430a:	2b00      	cmp	r3, #0
 800430c:	d001      	beq.n	8004312 <HAL_TIM_IC_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800430e:	2301      	movs	r3, #1
 8004310:	e0c0      	b.n	8004494 <HAL_TIM_IC_Start_DMA+0x370>
      }
      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	68da      	ldr	r2, [r3, #12]
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004320:	60da      	str	r2, [r3, #12]
      break;
 8004322:	e06e      	b.n	8004402 <HAL_TIM_IC_Start_DMA+0x2de>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMACaptureCplt;
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004328:	4a5c      	ldr	r2, [pc, #368]	; (800449c <HAL_TIM_IC_Start_DMA+0x378>)
 800432a:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004330:	4a5b      	ldr	r2, [pc, #364]	; (80044a0 <HAL_TIM_IC_Start_DMA+0x37c>)
 8004332:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004338:	4a5a      	ldr	r2, [pc, #360]	; (80044a4 <HAL_TIM_IC_Start_DMA+0x380>)
 800433a:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)&htim->Instance->CCR2, (uint32_t)pData,
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	3338      	adds	r3, #56	; 0x38
 8004346:	4619      	mov	r1, r3
 8004348:	687a      	ldr	r2, [r7, #4]
 800434a:	887b      	ldrh	r3, [r7, #2]
 800434c:	f7fd fe6e 	bl	800202c <HAL_DMA_Start_IT>
 8004350:	4603      	mov	r3, r0
 8004352:	2b00      	cmp	r3, #0
 8004354:	d001      	beq.n	800435a <HAL_TIM_IC_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8004356:	2301      	movs	r3, #1
 8004358:	e09c      	b.n	8004494 <HAL_TIM_IC_Start_DMA+0x370>
      }
      /* Enable the TIM Capture/Compare 2  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	68da      	ldr	r2, [r3, #12]
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004368:	60da      	str	r2, [r3, #12]
      break;
 800436a:	e04a      	b.n	8004402 <HAL_TIM_IC_Start_DMA+0x2de>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMACaptureCplt;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004370:	4a4a      	ldr	r2, [pc, #296]	; (800449c <HAL_TIM_IC_Start_DMA+0x378>)
 8004372:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004378:	4a49      	ldr	r2, [pc, #292]	; (80044a0 <HAL_TIM_IC_Start_DMA+0x37c>)
 800437a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004380:	4a48      	ldr	r2, [pc, #288]	; (80044a4 <HAL_TIM_IC_Start_DMA+0x380>)
 8004382:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)&htim->Instance->CCR3, (uint32_t)pData,
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	333c      	adds	r3, #60	; 0x3c
 800438e:	4619      	mov	r1, r3
 8004390:	687a      	ldr	r2, [r7, #4]
 8004392:	887b      	ldrh	r3, [r7, #2]
 8004394:	f7fd fe4a 	bl	800202c <HAL_DMA_Start_IT>
 8004398:	4603      	mov	r3, r0
 800439a:	2b00      	cmp	r3, #0
 800439c:	d001      	beq.n	80043a2 <HAL_TIM_IC_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800439e:	2301      	movs	r3, #1
 80043a0:	e078      	b.n	8004494 <HAL_TIM_IC_Start_DMA+0x370>
      }
      /* Enable the TIM Capture/Compare 3  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	68da      	ldr	r2, [r3, #12]
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80043b0:	60da      	str	r2, [r3, #12]
      break;
 80043b2:	e026      	b.n	8004402 <HAL_TIM_IC_Start_DMA+0x2de>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMACaptureCplt;
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043b8:	4a38      	ldr	r2, [pc, #224]	; (800449c <HAL_TIM_IC_Start_DMA+0x378>)
 80043ba:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043c0:	4a37      	ldr	r2, [pc, #220]	; (80044a0 <HAL_TIM_IC_Start_DMA+0x37c>)
 80043c2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043c8:	4a36      	ldr	r2, [pc, #216]	; (80044a4 <HAL_TIM_IC_Start_DMA+0x380>)
 80043ca:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)&htim->Instance->CCR4, (uint32_t)pData,
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	3340      	adds	r3, #64	; 0x40
 80043d6:	4619      	mov	r1, r3
 80043d8:	687a      	ldr	r2, [r7, #4]
 80043da:	887b      	ldrh	r3, [r7, #2]
 80043dc:	f7fd fe26 	bl	800202c <HAL_DMA_Start_IT>
 80043e0:	4603      	mov	r3, r0
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d001      	beq.n	80043ea <HAL_TIM_IC_Start_DMA+0x2c6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80043e6:	2301      	movs	r3, #1
 80043e8:	e054      	b.n	8004494 <HAL_TIM_IC_Start_DMA+0x370>
      }
      /* Enable the TIM Capture/Compare 4  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	68da      	ldr	r2, [r3, #12]
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80043f8:	60da      	str	r2, [r3, #12]
      break;
 80043fa:	e002      	b.n	8004402 <HAL_TIM_IC_Start_DMA+0x2de>
    }

    default:
      status = HAL_ERROR;
 80043fc:	2301      	movs	r3, #1
 80043fe:	75fb      	strb	r3, [r7, #23]
      break;
 8004400:	bf00      	nop
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	4a28      	ldr	r2, [pc, #160]	; (80044a8 <HAL_TIM_IC_Start_DMA+0x384>)
 8004408:	4293      	cmp	r3, r2
 800440a:	d022      	beq.n	8004452 <HAL_TIM_IC_Start_DMA+0x32e>
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004414:	d01d      	beq.n	8004452 <HAL_TIM_IC_Start_DMA+0x32e>
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	4a24      	ldr	r2, [pc, #144]	; (80044ac <HAL_TIM_IC_Start_DMA+0x388>)
 800441c:	4293      	cmp	r3, r2
 800441e:	d018      	beq.n	8004452 <HAL_TIM_IC_Start_DMA+0x32e>
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	4a22      	ldr	r2, [pc, #136]	; (80044b0 <HAL_TIM_IC_Start_DMA+0x38c>)
 8004426:	4293      	cmp	r3, r2
 8004428:	d013      	beq.n	8004452 <HAL_TIM_IC_Start_DMA+0x32e>
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	4a21      	ldr	r2, [pc, #132]	; (80044b4 <HAL_TIM_IC_Start_DMA+0x390>)
 8004430:	4293      	cmp	r3, r2
 8004432:	d00e      	beq.n	8004452 <HAL_TIM_IC_Start_DMA+0x32e>
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	4a1f      	ldr	r2, [pc, #124]	; (80044b8 <HAL_TIM_IC_Start_DMA+0x394>)
 800443a:	4293      	cmp	r3, r2
 800443c:	d009      	beq.n	8004452 <HAL_TIM_IC_Start_DMA+0x32e>
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	4a1e      	ldr	r2, [pc, #120]	; (80044bc <HAL_TIM_IC_Start_DMA+0x398>)
 8004444:	4293      	cmp	r3, r2
 8004446:	d004      	beq.n	8004452 <HAL_TIM_IC_Start_DMA+0x32e>
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	4a1c      	ldr	r2, [pc, #112]	; (80044c0 <HAL_TIM_IC_Start_DMA+0x39c>)
 800444e:	4293      	cmp	r3, r2
 8004450:	d115      	bne.n	800447e <HAL_TIM_IC_Start_DMA+0x35a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	689a      	ldr	r2, [r3, #8]
 8004458:	4b1a      	ldr	r3, [pc, #104]	; (80044c4 <HAL_TIM_IC_Start_DMA+0x3a0>)
 800445a:	4013      	ands	r3, r2
 800445c:	613b      	str	r3, [r7, #16]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800445e:	693b      	ldr	r3, [r7, #16]
 8004460:	2b06      	cmp	r3, #6
 8004462:	d015      	beq.n	8004490 <HAL_TIM_IC_Start_DMA+0x36c>
 8004464:	693b      	ldr	r3, [r7, #16]
 8004466:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800446a:	d011      	beq.n	8004490 <HAL_TIM_IC_Start_DMA+0x36c>
    {
      __HAL_TIM_ENABLE(htim);
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	681a      	ldr	r2, [r3, #0]
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f042 0201 	orr.w	r2, r2, #1
 800447a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800447c:	e008      	b.n	8004490 <HAL_TIM_IC_Start_DMA+0x36c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	681a      	ldr	r2, [r3, #0]
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f042 0201 	orr.w	r2, r2, #1
 800448c:	601a      	str	r2, [r3, #0]
 800448e:	e000      	b.n	8004492 <HAL_TIM_IC_Start_DMA+0x36e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004490:	bf00      	nop
  }

  /* Return function status */
  return status;
 8004492:	7dfb      	ldrb	r3, [r7, #23]
}
 8004494:	4618      	mov	r0, r3
 8004496:	3718      	adds	r7, #24
 8004498:	46bd      	mov	sp, r7
 800449a:	bd80      	pop	{r7, pc}
 800449c:	08004de7 	.word	0x08004de7
 80044a0:	08004eaf 	.word	0x08004eaf
 80044a4:	08004d55 	.word	0x08004d55
 80044a8:	40010000 	.word	0x40010000
 80044ac:	40000400 	.word	0x40000400
 80044b0:	40000800 	.word	0x40000800
 80044b4:	40000c00 	.word	0x40000c00
 80044b8:	40010400 	.word	0x40010400
 80044bc:	40014000 	.word	0x40014000
 80044c0:	40001800 	.word	0x40001800
 80044c4:	00010007 	.word	0x00010007

080044c8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80044c8:	b580      	push	{r7, lr}
 80044ca:	b082      	sub	sp, #8
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	691b      	ldr	r3, [r3, #16]
 80044d6:	f003 0302 	and.w	r3, r3, #2
 80044da:	2b02      	cmp	r3, #2
 80044dc:	d122      	bne.n	8004524 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	68db      	ldr	r3, [r3, #12]
 80044e4:	f003 0302 	and.w	r3, r3, #2
 80044e8:	2b02      	cmp	r3, #2
 80044ea:	d11b      	bne.n	8004524 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f06f 0202 	mvn.w	r2, #2
 80044f4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	2201      	movs	r2, #1
 80044fa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	699b      	ldr	r3, [r3, #24]
 8004502:	f003 0303 	and.w	r3, r3, #3
 8004506:	2b00      	cmp	r3, #0
 8004508:	d003      	beq.n	8004512 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800450a:	6878      	ldr	r0, [r7, #4]
 800450c:	f7fd f872 	bl	80015f4 <HAL_TIM_IC_CaptureCallback>
 8004510:	e005      	b.n	800451e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004512:	6878      	ldr	r0, [r7, #4]
 8004514:	f7fd f834 	bl	8001580 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004518:	6878      	ldr	r0, [r7, #4]
 800451a:	f000 fbfd 	bl	8004d18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	2200      	movs	r2, #0
 8004522:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	691b      	ldr	r3, [r3, #16]
 800452a:	f003 0304 	and.w	r3, r3, #4
 800452e:	2b04      	cmp	r3, #4
 8004530:	d122      	bne.n	8004578 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	68db      	ldr	r3, [r3, #12]
 8004538:	f003 0304 	and.w	r3, r3, #4
 800453c:	2b04      	cmp	r3, #4
 800453e:	d11b      	bne.n	8004578 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f06f 0204 	mvn.w	r2, #4
 8004548:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	2202      	movs	r2, #2
 800454e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	699b      	ldr	r3, [r3, #24]
 8004556:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800455a:	2b00      	cmp	r3, #0
 800455c:	d003      	beq.n	8004566 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800455e:	6878      	ldr	r0, [r7, #4]
 8004560:	f7fd f848 	bl	80015f4 <HAL_TIM_IC_CaptureCallback>
 8004564:	e005      	b.n	8004572 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004566:	6878      	ldr	r0, [r7, #4]
 8004568:	f7fd f80a 	bl	8001580 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800456c:	6878      	ldr	r0, [r7, #4]
 800456e:	f000 fbd3 	bl	8004d18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	2200      	movs	r2, #0
 8004576:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	691b      	ldr	r3, [r3, #16]
 800457e:	f003 0308 	and.w	r3, r3, #8
 8004582:	2b08      	cmp	r3, #8
 8004584:	d122      	bne.n	80045cc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	68db      	ldr	r3, [r3, #12]
 800458c:	f003 0308 	and.w	r3, r3, #8
 8004590:	2b08      	cmp	r3, #8
 8004592:	d11b      	bne.n	80045cc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f06f 0208 	mvn.w	r2, #8
 800459c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	2204      	movs	r2, #4
 80045a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	69db      	ldr	r3, [r3, #28]
 80045aa:	f003 0303 	and.w	r3, r3, #3
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d003      	beq.n	80045ba <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80045b2:	6878      	ldr	r0, [r7, #4]
 80045b4:	f7fd f81e 	bl	80015f4 <HAL_TIM_IC_CaptureCallback>
 80045b8:	e005      	b.n	80045c6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80045ba:	6878      	ldr	r0, [r7, #4]
 80045bc:	f7fc ffe0 	bl	8001580 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045c0:	6878      	ldr	r0, [r7, #4]
 80045c2:	f000 fba9 	bl	8004d18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	2200      	movs	r2, #0
 80045ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	691b      	ldr	r3, [r3, #16]
 80045d2:	f003 0310 	and.w	r3, r3, #16
 80045d6:	2b10      	cmp	r3, #16
 80045d8:	d122      	bne.n	8004620 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	68db      	ldr	r3, [r3, #12]
 80045e0:	f003 0310 	and.w	r3, r3, #16
 80045e4:	2b10      	cmp	r3, #16
 80045e6:	d11b      	bne.n	8004620 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f06f 0210 	mvn.w	r2, #16
 80045f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	2208      	movs	r2, #8
 80045f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	69db      	ldr	r3, [r3, #28]
 80045fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004602:	2b00      	cmp	r3, #0
 8004604:	d003      	beq.n	800460e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004606:	6878      	ldr	r0, [r7, #4]
 8004608:	f7fc fff4 	bl	80015f4 <HAL_TIM_IC_CaptureCallback>
 800460c:	e005      	b.n	800461a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800460e:	6878      	ldr	r0, [r7, #4]
 8004610:	f7fc ffb6 	bl	8001580 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004614:	6878      	ldr	r0, [r7, #4]
 8004616:	f000 fb7f 	bl	8004d18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	2200      	movs	r2, #0
 800461e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	691b      	ldr	r3, [r3, #16]
 8004626:	f003 0301 	and.w	r3, r3, #1
 800462a:	2b01      	cmp	r3, #1
 800462c:	d10e      	bne.n	800464c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	68db      	ldr	r3, [r3, #12]
 8004634:	f003 0301 	and.w	r3, r3, #1
 8004638:	2b01      	cmp	r3, #1
 800463a:	d107      	bne.n	800464c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f06f 0201 	mvn.w	r2, #1
 8004644:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004646:	6878      	ldr	r0, [r7, #4]
 8004648:	f000 fb52 	bl	8004cf0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	691b      	ldr	r3, [r3, #16]
 8004652:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004656:	2b80      	cmp	r3, #128	; 0x80
 8004658:	d10e      	bne.n	8004678 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	68db      	ldr	r3, [r3, #12]
 8004660:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004664:	2b80      	cmp	r3, #128	; 0x80
 8004666:	d107      	bne.n	8004678 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004670:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004672:	6878      	ldr	r0, [r7, #4]
 8004674:	f001 f9d0 	bl	8005a18 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	691b      	ldr	r3, [r3, #16]
 800467e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004682:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004686:	d10e      	bne.n	80046a6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	68db      	ldr	r3, [r3, #12]
 800468e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004692:	2b80      	cmp	r3, #128	; 0x80
 8004694:	d107      	bne.n	80046a6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800469e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80046a0:	6878      	ldr	r0, [r7, #4]
 80046a2:	f001 f9c3 	bl	8005a2c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	691b      	ldr	r3, [r3, #16]
 80046ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046b0:	2b40      	cmp	r3, #64	; 0x40
 80046b2:	d10e      	bne.n	80046d2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	68db      	ldr	r3, [r3, #12]
 80046ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046be:	2b40      	cmp	r3, #64	; 0x40
 80046c0:	d107      	bne.n	80046d2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80046ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80046cc:	6878      	ldr	r0, [r7, #4]
 80046ce:	f000 fb2d 	bl	8004d2c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	691b      	ldr	r3, [r3, #16]
 80046d8:	f003 0320 	and.w	r3, r3, #32
 80046dc:	2b20      	cmp	r3, #32
 80046de:	d10e      	bne.n	80046fe <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	68db      	ldr	r3, [r3, #12]
 80046e6:	f003 0320 	and.w	r3, r3, #32
 80046ea:	2b20      	cmp	r3, #32
 80046ec:	d107      	bne.n	80046fe <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f06f 0220 	mvn.w	r2, #32
 80046f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80046f8:	6878      	ldr	r0, [r7, #4]
 80046fa:	f001 f983 	bl	8005a04 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80046fe:	bf00      	nop
 8004700:	3708      	adds	r7, #8
 8004702:	46bd      	mov	sp, r7
 8004704:	bd80      	pop	{r7, pc}
	...

08004708 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8004708:	b580      	push	{r7, lr}
 800470a:	b086      	sub	sp, #24
 800470c:	af00      	add	r7, sp, #0
 800470e:	60f8      	str	r0, [r7, #12]
 8004710:	60b9      	str	r1, [r7, #8]
 8004712:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004714:	2300      	movs	r3, #0
 8004716:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800471e:	2b01      	cmp	r3, #1
 8004720:	d101      	bne.n	8004726 <HAL_TIM_OC_ConfigChannel+0x1e>
 8004722:	2302      	movs	r3, #2
 8004724:	e066      	b.n	80047f4 <HAL_TIM_OC_ConfigChannel+0xec>
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	2201      	movs	r2, #1
 800472a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	2b14      	cmp	r3, #20
 8004732:	d857      	bhi.n	80047e4 <HAL_TIM_OC_ConfigChannel+0xdc>
 8004734:	a201      	add	r2, pc, #4	; (adr r2, 800473c <HAL_TIM_OC_ConfigChannel+0x34>)
 8004736:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800473a:	bf00      	nop
 800473c:	08004791 	.word	0x08004791
 8004740:	080047e5 	.word	0x080047e5
 8004744:	080047e5 	.word	0x080047e5
 8004748:	080047e5 	.word	0x080047e5
 800474c:	0800479f 	.word	0x0800479f
 8004750:	080047e5 	.word	0x080047e5
 8004754:	080047e5 	.word	0x080047e5
 8004758:	080047e5 	.word	0x080047e5
 800475c:	080047ad 	.word	0x080047ad
 8004760:	080047e5 	.word	0x080047e5
 8004764:	080047e5 	.word	0x080047e5
 8004768:	080047e5 	.word	0x080047e5
 800476c:	080047bb 	.word	0x080047bb
 8004770:	080047e5 	.word	0x080047e5
 8004774:	080047e5 	.word	0x080047e5
 8004778:	080047e5 	.word	0x080047e5
 800477c:	080047c9 	.word	0x080047c9
 8004780:	080047e5 	.word	0x080047e5
 8004784:	080047e5 	.word	0x080047e5
 8004788:	080047e5 	.word	0x080047e5
 800478c:	080047d7 	.word	0x080047d7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	68b9      	ldr	r1, [r7, #8]
 8004796:	4618      	mov	r0, r3
 8004798:	f000 fc5e 	bl	8005058 <TIM_OC1_SetConfig>
      break;
 800479c:	e025      	b.n	80047ea <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	68b9      	ldr	r1, [r7, #8]
 80047a4:	4618      	mov	r0, r3
 80047a6:	f000 fcc9 	bl	800513c <TIM_OC2_SetConfig>
      break;
 80047aa:	e01e      	b.n	80047ea <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	68b9      	ldr	r1, [r7, #8]
 80047b2:	4618      	mov	r0, r3
 80047b4:	f000 fd3a 	bl	800522c <TIM_OC3_SetConfig>
      break;
 80047b8:	e017      	b.n	80047ea <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	68b9      	ldr	r1, [r7, #8]
 80047c0:	4618      	mov	r0, r3
 80047c2:	f000 fda9 	bl	8005318 <TIM_OC4_SetConfig>
      break;
 80047c6:	e010      	b.n	80047ea <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	68b9      	ldr	r1, [r7, #8]
 80047ce:	4618      	mov	r0, r3
 80047d0:	f000 fdfa 	bl	80053c8 <TIM_OC5_SetConfig>
      break;
 80047d4:	e009      	b.n	80047ea <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	68b9      	ldr	r1, [r7, #8]
 80047dc:	4618      	mov	r0, r3
 80047de:	f000 fe45 	bl	800546c <TIM_OC6_SetConfig>
      break;
 80047e2:	e002      	b.n	80047ea <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 80047e4:	2301      	movs	r3, #1
 80047e6:	75fb      	strb	r3, [r7, #23]
      break;
 80047e8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	2200      	movs	r2, #0
 80047ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80047f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80047f4:	4618      	mov	r0, r3
 80047f6:	3718      	adds	r7, #24
 80047f8:	46bd      	mov	sp, r7
 80047fa:	bd80      	pop	{r7, pc}

080047fc <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80047fc:	b580      	push	{r7, lr}
 80047fe:	b086      	sub	sp, #24
 8004800:	af00      	add	r7, sp, #0
 8004802:	60f8      	str	r0, [r7, #12]
 8004804:	60b9      	str	r1, [r7, #8]
 8004806:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004808:	2300      	movs	r3, #0
 800480a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004812:	2b01      	cmp	r3, #1
 8004814:	d101      	bne.n	800481a <HAL_TIM_IC_ConfigChannel+0x1e>
 8004816:	2302      	movs	r3, #2
 8004818:	e088      	b.n	800492c <HAL_TIM_IC_ConfigChannel+0x130>
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	2201      	movs	r2, #1
 800481e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	2b00      	cmp	r3, #0
 8004826:	d11b      	bne.n	8004860 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	6818      	ldr	r0, [r3, #0]
 800482c:	68bb      	ldr	r3, [r7, #8]
 800482e:	6819      	ldr	r1, [r3, #0]
 8004830:	68bb      	ldr	r3, [r7, #8]
 8004832:	685a      	ldr	r2, [r3, #4]
 8004834:	68bb      	ldr	r3, [r7, #8]
 8004836:	68db      	ldr	r3, [r3, #12]
 8004838:	f000 fe6c 	bl	8005514 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	699a      	ldr	r2, [r3, #24]
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f022 020c 	bic.w	r2, r2, #12
 800484a:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	6999      	ldr	r1, [r3, #24]
 8004852:	68bb      	ldr	r3, [r7, #8]
 8004854:	689a      	ldr	r2, [r3, #8]
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	430a      	orrs	r2, r1
 800485c:	619a      	str	r2, [r3, #24]
 800485e:	e060      	b.n	8004922 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2b04      	cmp	r3, #4
 8004864:	d11c      	bne.n	80048a0 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	6818      	ldr	r0, [r3, #0]
 800486a:	68bb      	ldr	r3, [r7, #8]
 800486c:	6819      	ldr	r1, [r3, #0]
 800486e:	68bb      	ldr	r3, [r7, #8]
 8004870:	685a      	ldr	r2, [r3, #4]
 8004872:	68bb      	ldr	r3, [r7, #8]
 8004874:	68db      	ldr	r3, [r3, #12]
 8004876:	f000 fef0 	bl	800565a <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	699a      	ldr	r2, [r3, #24]
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004888:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	6999      	ldr	r1, [r3, #24]
 8004890:	68bb      	ldr	r3, [r7, #8]
 8004892:	689b      	ldr	r3, [r3, #8]
 8004894:	021a      	lsls	r2, r3, #8
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	430a      	orrs	r2, r1
 800489c:	619a      	str	r2, [r3, #24]
 800489e:	e040      	b.n	8004922 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	2b08      	cmp	r3, #8
 80048a4:	d11b      	bne.n	80048de <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	6818      	ldr	r0, [r3, #0]
 80048aa:	68bb      	ldr	r3, [r7, #8]
 80048ac:	6819      	ldr	r1, [r3, #0]
 80048ae:	68bb      	ldr	r3, [r7, #8]
 80048b0:	685a      	ldr	r2, [r3, #4]
 80048b2:	68bb      	ldr	r3, [r7, #8]
 80048b4:	68db      	ldr	r3, [r3, #12]
 80048b6:	f000 ff3d 	bl	8005734 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	69da      	ldr	r2, [r3, #28]
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f022 020c 	bic.w	r2, r2, #12
 80048c8:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	69d9      	ldr	r1, [r3, #28]
 80048d0:	68bb      	ldr	r3, [r7, #8]
 80048d2:	689a      	ldr	r2, [r3, #8]
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	430a      	orrs	r2, r1
 80048da:	61da      	str	r2, [r3, #28]
 80048dc:	e021      	b.n	8004922 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	2b0c      	cmp	r3, #12
 80048e2:	d11c      	bne.n	800491e <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	6818      	ldr	r0, [r3, #0]
 80048e8:	68bb      	ldr	r3, [r7, #8]
 80048ea:	6819      	ldr	r1, [r3, #0]
 80048ec:	68bb      	ldr	r3, [r7, #8]
 80048ee:	685a      	ldr	r2, [r3, #4]
 80048f0:	68bb      	ldr	r3, [r7, #8]
 80048f2:	68db      	ldr	r3, [r3, #12]
 80048f4:	f000 ff5a 	bl	80057ac <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	69da      	ldr	r2, [r3, #28]
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004906:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	69d9      	ldr	r1, [r3, #28]
 800490e:	68bb      	ldr	r3, [r7, #8]
 8004910:	689b      	ldr	r3, [r3, #8]
 8004912:	021a      	lsls	r2, r3, #8
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	430a      	orrs	r2, r1
 800491a:	61da      	str	r2, [r3, #28]
 800491c:	e001      	b.n	8004922 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800491e:	2301      	movs	r3, #1
 8004920:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	2200      	movs	r2, #0
 8004926:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800492a:	7dfb      	ldrb	r3, [r7, #23]
}
 800492c:	4618      	mov	r0, r3
 800492e:	3718      	adds	r7, #24
 8004930:	46bd      	mov	sp, r7
 8004932:	bd80      	pop	{r7, pc}

08004934 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004934:	b580      	push	{r7, lr}
 8004936:	b086      	sub	sp, #24
 8004938:	af00      	add	r7, sp, #0
 800493a:	60f8      	str	r0, [r7, #12]
 800493c:	60b9      	str	r1, [r7, #8]
 800493e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004940:	2300      	movs	r3, #0
 8004942:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800494a:	2b01      	cmp	r3, #1
 800494c:	d101      	bne.n	8004952 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800494e:	2302      	movs	r3, #2
 8004950:	e0ff      	b.n	8004b52 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	2201      	movs	r2, #1
 8004956:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	2b14      	cmp	r3, #20
 800495e:	f200 80f0 	bhi.w	8004b42 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004962:	a201      	add	r2, pc, #4	; (adr r2, 8004968 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004964:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004968:	080049bd 	.word	0x080049bd
 800496c:	08004b43 	.word	0x08004b43
 8004970:	08004b43 	.word	0x08004b43
 8004974:	08004b43 	.word	0x08004b43
 8004978:	080049fd 	.word	0x080049fd
 800497c:	08004b43 	.word	0x08004b43
 8004980:	08004b43 	.word	0x08004b43
 8004984:	08004b43 	.word	0x08004b43
 8004988:	08004a3f 	.word	0x08004a3f
 800498c:	08004b43 	.word	0x08004b43
 8004990:	08004b43 	.word	0x08004b43
 8004994:	08004b43 	.word	0x08004b43
 8004998:	08004a7f 	.word	0x08004a7f
 800499c:	08004b43 	.word	0x08004b43
 80049a0:	08004b43 	.word	0x08004b43
 80049a4:	08004b43 	.word	0x08004b43
 80049a8:	08004ac1 	.word	0x08004ac1
 80049ac:	08004b43 	.word	0x08004b43
 80049b0:	08004b43 	.word	0x08004b43
 80049b4:	08004b43 	.word	0x08004b43
 80049b8:	08004b01 	.word	0x08004b01
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	68b9      	ldr	r1, [r7, #8]
 80049c2:	4618      	mov	r0, r3
 80049c4:	f000 fb48 	bl	8005058 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	699a      	ldr	r2, [r3, #24]
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f042 0208 	orr.w	r2, r2, #8
 80049d6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	699a      	ldr	r2, [r3, #24]
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f022 0204 	bic.w	r2, r2, #4
 80049e6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	6999      	ldr	r1, [r3, #24]
 80049ee:	68bb      	ldr	r3, [r7, #8]
 80049f0:	691a      	ldr	r2, [r3, #16]
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	430a      	orrs	r2, r1
 80049f8:	619a      	str	r2, [r3, #24]
      break;
 80049fa:	e0a5      	b.n	8004b48 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	68b9      	ldr	r1, [r7, #8]
 8004a02:	4618      	mov	r0, r3
 8004a04:	f000 fb9a 	bl	800513c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	699a      	ldr	r2, [r3, #24]
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004a16:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	699a      	ldr	r2, [r3, #24]
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a26:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	6999      	ldr	r1, [r3, #24]
 8004a2e:	68bb      	ldr	r3, [r7, #8]
 8004a30:	691b      	ldr	r3, [r3, #16]
 8004a32:	021a      	lsls	r2, r3, #8
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	430a      	orrs	r2, r1
 8004a3a:	619a      	str	r2, [r3, #24]
      break;
 8004a3c:	e084      	b.n	8004b48 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	68b9      	ldr	r1, [r7, #8]
 8004a44:	4618      	mov	r0, r3
 8004a46:	f000 fbf1 	bl	800522c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	69da      	ldr	r2, [r3, #28]
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f042 0208 	orr.w	r2, r2, #8
 8004a58:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	69da      	ldr	r2, [r3, #28]
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f022 0204 	bic.w	r2, r2, #4
 8004a68:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	69d9      	ldr	r1, [r3, #28]
 8004a70:	68bb      	ldr	r3, [r7, #8]
 8004a72:	691a      	ldr	r2, [r3, #16]
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	430a      	orrs	r2, r1
 8004a7a:	61da      	str	r2, [r3, #28]
      break;
 8004a7c:	e064      	b.n	8004b48 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	68b9      	ldr	r1, [r7, #8]
 8004a84:	4618      	mov	r0, r3
 8004a86:	f000 fc47 	bl	8005318 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	69da      	ldr	r2, [r3, #28]
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004a98:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	69da      	ldr	r2, [r3, #28]
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004aa8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	69d9      	ldr	r1, [r3, #28]
 8004ab0:	68bb      	ldr	r3, [r7, #8]
 8004ab2:	691b      	ldr	r3, [r3, #16]
 8004ab4:	021a      	lsls	r2, r3, #8
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	430a      	orrs	r2, r1
 8004abc:	61da      	str	r2, [r3, #28]
      break;
 8004abe:	e043      	b.n	8004b48 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	68b9      	ldr	r1, [r7, #8]
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	f000 fc7e 	bl	80053c8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f042 0208 	orr.w	r2, r2, #8
 8004ada:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f022 0204 	bic.w	r2, r2, #4
 8004aea:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004af2:	68bb      	ldr	r3, [r7, #8]
 8004af4:	691a      	ldr	r2, [r3, #16]
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	430a      	orrs	r2, r1
 8004afc:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004afe:	e023      	b.n	8004b48 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	68b9      	ldr	r1, [r7, #8]
 8004b06:	4618      	mov	r0, r3
 8004b08:	f000 fcb0 	bl	800546c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004b1a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b2a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004b32:	68bb      	ldr	r3, [r7, #8]
 8004b34:	691b      	ldr	r3, [r3, #16]
 8004b36:	021a      	lsls	r2, r3, #8
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	430a      	orrs	r2, r1
 8004b3e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004b40:	e002      	b.n	8004b48 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8004b42:	2301      	movs	r3, #1
 8004b44:	75fb      	strb	r3, [r7, #23]
      break;
 8004b46:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	2200      	movs	r2, #0
 8004b4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004b50:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b52:	4618      	mov	r0, r3
 8004b54:	3718      	adds	r7, #24
 8004b56:	46bd      	mov	sp, r7
 8004b58:	bd80      	pop	{r7, pc}
 8004b5a:	bf00      	nop

08004b5c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	b084      	sub	sp, #16
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	6078      	str	r0, [r7, #4]
 8004b64:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004b66:	2300      	movs	r3, #0
 8004b68:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b70:	2b01      	cmp	r3, #1
 8004b72:	d101      	bne.n	8004b78 <HAL_TIM_ConfigClockSource+0x1c>
 8004b74:	2302      	movs	r3, #2
 8004b76:	e0b4      	b.n	8004ce2 <HAL_TIM_ConfigClockSource+0x186>
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2201      	movs	r2, #1
 8004b7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2202      	movs	r2, #2
 8004b84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	689b      	ldr	r3, [r3, #8]
 8004b8e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004b90:	68ba      	ldr	r2, [r7, #8]
 8004b92:	4b56      	ldr	r3, [pc, #344]	; (8004cec <HAL_TIM_ConfigClockSource+0x190>)
 8004b94:	4013      	ands	r3, r2
 8004b96:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004b98:	68bb      	ldr	r3, [r7, #8]
 8004b9a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004b9e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	68ba      	ldr	r2, [r7, #8]
 8004ba6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004ba8:	683b      	ldr	r3, [r7, #0]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004bb0:	d03e      	beq.n	8004c30 <HAL_TIM_ConfigClockSource+0xd4>
 8004bb2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004bb6:	f200 8087 	bhi.w	8004cc8 <HAL_TIM_ConfigClockSource+0x16c>
 8004bba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004bbe:	f000 8086 	beq.w	8004cce <HAL_TIM_ConfigClockSource+0x172>
 8004bc2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004bc6:	d87f      	bhi.n	8004cc8 <HAL_TIM_ConfigClockSource+0x16c>
 8004bc8:	2b70      	cmp	r3, #112	; 0x70
 8004bca:	d01a      	beq.n	8004c02 <HAL_TIM_ConfigClockSource+0xa6>
 8004bcc:	2b70      	cmp	r3, #112	; 0x70
 8004bce:	d87b      	bhi.n	8004cc8 <HAL_TIM_ConfigClockSource+0x16c>
 8004bd0:	2b60      	cmp	r3, #96	; 0x60
 8004bd2:	d050      	beq.n	8004c76 <HAL_TIM_ConfigClockSource+0x11a>
 8004bd4:	2b60      	cmp	r3, #96	; 0x60
 8004bd6:	d877      	bhi.n	8004cc8 <HAL_TIM_ConfigClockSource+0x16c>
 8004bd8:	2b50      	cmp	r3, #80	; 0x50
 8004bda:	d03c      	beq.n	8004c56 <HAL_TIM_ConfigClockSource+0xfa>
 8004bdc:	2b50      	cmp	r3, #80	; 0x50
 8004bde:	d873      	bhi.n	8004cc8 <HAL_TIM_ConfigClockSource+0x16c>
 8004be0:	2b40      	cmp	r3, #64	; 0x40
 8004be2:	d058      	beq.n	8004c96 <HAL_TIM_ConfigClockSource+0x13a>
 8004be4:	2b40      	cmp	r3, #64	; 0x40
 8004be6:	d86f      	bhi.n	8004cc8 <HAL_TIM_ConfigClockSource+0x16c>
 8004be8:	2b30      	cmp	r3, #48	; 0x30
 8004bea:	d064      	beq.n	8004cb6 <HAL_TIM_ConfigClockSource+0x15a>
 8004bec:	2b30      	cmp	r3, #48	; 0x30
 8004bee:	d86b      	bhi.n	8004cc8 <HAL_TIM_ConfigClockSource+0x16c>
 8004bf0:	2b20      	cmp	r3, #32
 8004bf2:	d060      	beq.n	8004cb6 <HAL_TIM_ConfigClockSource+0x15a>
 8004bf4:	2b20      	cmp	r3, #32
 8004bf6:	d867      	bhi.n	8004cc8 <HAL_TIM_ConfigClockSource+0x16c>
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d05c      	beq.n	8004cb6 <HAL_TIM_ConfigClockSource+0x15a>
 8004bfc:	2b10      	cmp	r3, #16
 8004bfe:	d05a      	beq.n	8004cb6 <HAL_TIM_ConfigClockSource+0x15a>
 8004c00:	e062      	b.n	8004cc8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	6818      	ldr	r0, [r3, #0]
 8004c06:	683b      	ldr	r3, [r7, #0]
 8004c08:	6899      	ldr	r1, [r3, #8]
 8004c0a:	683b      	ldr	r3, [r7, #0]
 8004c0c:	685a      	ldr	r2, [r3, #4]
 8004c0e:	683b      	ldr	r3, [r7, #0]
 8004c10:	68db      	ldr	r3, [r3, #12]
 8004c12:	f000 fe23 	bl	800585c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	689b      	ldr	r3, [r3, #8]
 8004c1c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004c1e:	68bb      	ldr	r3, [r7, #8]
 8004c20:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004c24:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	68ba      	ldr	r2, [r7, #8]
 8004c2c:	609a      	str	r2, [r3, #8]
      break;
 8004c2e:	e04f      	b.n	8004cd0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	6818      	ldr	r0, [r3, #0]
 8004c34:	683b      	ldr	r3, [r7, #0]
 8004c36:	6899      	ldr	r1, [r3, #8]
 8004c38:	683b      	ldr	r3, [r7, #0]
 8004c3a:	685a      	ldr	r2, [r3, #4]
 8004c3c:	683b      	ldr	r3, [r7, #0]
 8004c3e:	68db      	ldr	r3, [r3, #12]
 8004c40:	f000 fe0c 	bl	800585c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	689a      	ldr	r2, [r3, #8]
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004c52:	609a      	str	r2, [r3, #8]
      break;
 8004c54:	e03c      	b.n	8004cd0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6818      	ldr	r0, [r3, #0]
 8004c5a:	683b      	ldr	r3, [r7, #0]
 8004c5c:	6859      	ldr	r1, [r3, #4]
 8004c5e:	683b      	ldr	r3, [r7, #0]
 8004c60:	68db      	ldr	r3, [r3, #12]
 8004c62:	461a      	mov	r2, r3
 8004c64:	f000 fcca 	bl	80055fc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	2150      	movs	r1, #80	; 0x50
 8004c6e:	4618      	mov	r0, r3
 8004c70:	f000 fdd9 	bl	8005826 <TIM_ITRx_SetConfig>
      break;
 8004c74:	e02c      	b.n	8004cd0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	6818      	ldr	r0, [r3, #0]
 8004c7a:	683b      	ldr	r3, [r7, #0]
 8004c7c:	6859      	ldr	r1, [r3, #4]
 8004c7e:	683b      	ldr	r3, [r7, #0]
 8004c80:	68db      	ldr	r3, [r3, #12]
 8004c82:	461a      	mov	r2, r3
 8004c84:	f000 fd26 	bl	80056d4 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	2160      	movs	r1, #96	; 0x60
 8004c8e:	4618      	mov	r0, r3
 8004c90:	f000 fdc9 	bl	8005826 <TIM_ITRx_SetConfig>
      break;
 8004c94:	e01c      	b.n	8004cd0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	6818      	ldr	r0, [r3, #0]
 8004c9a:	683b      	ldr	r3, [r7, #0]
 8004c9c:	6859      	ldr	r1, [r3, #4]
 8004c9e:	683b      	ldr	r3, [r7, #0]
 8004ca0:	68db      	ldr	r3, [r3, #12]
 8004ca2:	461a      	mov	r2, r3
 8004ca4:	f000 fcaa 	bl	80055fc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	2140      	movs	r1, #64	; 0x40
 8004cae:	4618      	mov	r0, r3
 8004cb0:	f000 fdb9 	bl	8005826 <TIM_ITRx_SetConfig>
      break;
 8004cb4:	e00c      	b.n	8004cd0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681a      	ldr	r2, [r3, #0]
 8004cba:	683b      	ldr	r3, [r7, #0]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	4619      	mov	r1, r3
 8004cc0:	4610      	mov	r0, r2
 8004cc2:	f000 fdb0 	bl	8005826 <TIM_ITRx_SetConfig>
      break;
 8004cc6:	e003      	b.n	8004cd0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004cc8:	2301      	movs	r3, #1
 8004cca:	73fb      	strb	r3, [r7, #15]
      break;
 8004ccc:	e000      	b.n	8004cd0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004cce:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	2201      	movs	r2, #1
 8004cd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2200      	movs	r2, #0
 8004cdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004ce0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	3710      	adds	r7, #16
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	bd80      	pop	{r7, pc}
 8004cea:	bf00      	nop
 8004cec:	fffeff88 	.word	0xfffeff88

08004cf0 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004cf0:	b480      	push	{r7}
 8004cf2:	b083      	sub	sp, #12
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004cf8:	bf00      	nop
 8004cfa:	370c      	adds	r7, #12
 8004cfc:	46bd      	mov	sp, r7
 8004cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d02:	4770      	bx	lr

08004d04 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8004d04:	b480      	push	{r7}
 8004d06:	b083      	sub	sp, #12
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 8004d0c:	bf00      	nop
 8004d0e:	370c      	adds	r7, #12
 8004d10:	46bd      	mov	sp, r7
 8004d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d16:	4770      	bx	lr

08004d18 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004d18:	b480      	push	{r7}
 8004d1a:	b083      	sub	sp, #12
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004d20:	bf00      	nop
 8004d22:	370c      	adds	r7, #12
 8004d24:	46bd      	mov	sp, r7
 8004d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2a:	4770      	bx	lr

08004d2c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004d2c:	b480      	push	{r7}
 8004d2e:	b083      	sub	sp, #12
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004d34:	bf00      	nop
 8004d36:	370c      	adds	r7, #12
 8004d38:	46bd      	mov	sp, r7
 8004d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3e:	4770      	bx	lr

08004d40 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8004d40:	b480      	push	{r7}
 8004d42:	b083      	sub	sp, #12
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8004d48:	bf00      	nop
 8004d4a:	370c      	adds	r7, #12
 8004d4c:	46bd      	mov	sp, r7
 8004d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d52:	4770      	bx	lr

08004d54 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8004d54:	b580      	push	{r7, lr}
 8004d56:	b084      	sub	sp, #16
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d60:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d66:	687a      	ldr	r2, [r7, #4]
 8004d68:	429a      	cmp	r2, r3
 8004d6a:	d107      	bne.n	8004d7c <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	2201      	movs	r2, #1
 8004d70:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	2201      	movs	r2, #1
 8004d76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004d7a:	e02a      	b.n	8004dd2 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d80:	687a      	ldr	r2, [r7, #4]
 8004d82:	429a      	cmp	r2, r3
 8004d84:	d107      	bne.n	8004d96 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	2202      	movs	r2, #2
 8004d8a:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	2201      	movs	r2, #1
 8004d90:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004d94:	e01d      	b.n	8004dd2 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d9a:	687a      	ldr	r2, [r7, #4]
 8004d9c:	429a      	cmp	r2, r3
 8004d9e:	d107      	bne.n	8004db0 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	2204      	movs	r2, #4
 8004da4:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	2201      	movs	r2, #1
 8004daa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004dae:	e010      	b.n	8004dd2 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004db4:	687a      	ldr	r2, [r7, #4]
 8004db6:	429a      	cmp	r2, r3
 8004db8:	d107      	bne.n	8004dca <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	2208      	movs	r2, #8
 8004dbe:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	2201      	movs	r2, #1
 8004dc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004dc8:	e003      	b.n	8004dd2 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	2201      	movs	r2, #1
 8004dce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8004dd2:	68f8      	ldr	r0, [r7, #12]
 8004dd4:	f7ff ffb4 	bl	8004d40 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	2200      	movs	r2, #0
 8004ddc:	771a      	strb	r2, [r3, #28]
}
 8004dde:	bf00      	nop
 8004de0:	3710      	adds	r7, #16
 8004de2:	46bd      	mov	sp, r7
 8004de4:	bd80      	pop	{r7, pc}

08004de6 <TIM_DMACaptureCplt>:
  * @brief  TIM DMA Capture complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMACaptureCplt(DMA_HandleTypeDef *hdma)
{
 8004de6:	b580      	push	{r7, lr}
 8004de8:	b084      	sub	sp, #16
 8004dea:	af00      	add	r7, sp, #0
 8004dec:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004df2:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004df8:	687a      	ldr	r2, [r7, #4]
 8004dfa:	429a      	cmp	r2, r3
 8004dfc:	d10f      	bne.n	8004e1e <TIM_DMACaptureCplt+0x38>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	2201      	movs	r2, #1
 8004e02:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	69db      	ldr	r3, [r3, #28]
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d146      	bne.n	8004e9a <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	2201      	movs	r2, #1
 8004e10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	2201      	movs	r2, #1
 8004e18:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004e1c:	e03d      	b.n	8004e9a <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e22:	687a      	ldr	r2, [r7, #4]
 8004e24:	429a      	cmp	r2, r3
 8004e26:	d10f      	bne.n	8004e48 <TIM_DMACaptureCplt+0x62>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	2202      	movs	r2, #2
 8004e2c:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	69db      	ldr	r3, [r3, #28]
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d131      	bne.n	8004e9a <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	2201      	movs	r2, #1
 8004e3a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	2201      	movs	r2, #1
 8004e42:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004e46:	e028      	b.n	8004e9a <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e4c:	687a      	ldr	r2, [r7, #4]
 8004e4e:	429a      	cmp	r2, r3
 8004e50:	d10f      	bne.n	8004e72 <TIM_DMACaptureCplt+0x8c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	2204      	movs	r2, #4
 8004e56:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	69db      	ldr	r3, [r3, #28]
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d11c      	bne.n	8004e9a <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	2201      	movs	r2, #1
 8004e64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	2201      	movs	r2, #1
 8004e6c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004e70:	e013      	b.n	8004e9a <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e76:	687a      	ldr	r2, [r7, #4]
 8004e78:	429a      	cmp	r2, r3
 8004e7a:	d10e      	bne.n	8004e9a <TIM_DMACaptureCplt+0xb4>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	2208      	movs	r2, #8
 8004e80:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	69db      	ldr	r3, [r3, #28]
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d107      	bne.n	8004e9a <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	2201      	movs	r2, #1
 8004e8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	2201      	movs	r2, #1
 8004e96:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->IC_CaptureCallback(htim);
#else
  HAL_TIM_IC_CaptureCallback(htim);
 8004e9a:	68f8      	ldr	r0, [r7, #12]
 8004e9c:	f7fc fbaa 	bl	80015f4 <HAL_TIM_IC_CaptureCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	771a      	strb	r2, [r3, #28]
}
 8004ea6:	bf00      	nop
 8004ea8:	3710      	adds	r7, #16
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	bd80      	pop	{r7, pc}

08004eae <TIM_DMACaptureHalfCplt>:
  * @brief  TIM DMA Capture half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMACaptureHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004eae:	b580      	push	{r7, lr}
 8004eb0:	b084      	sub	sp, #16
 8004eb2:	af00      	add	r7, sp, #0
 8004eb4:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004eba:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ec0:	687a      	ldr	r2, [r7, #4]
 8004ec2:	429a      	cmp	r2, r3
 8004ec4:	d103      	bne.n	8004ece <TIM_DMACaptureHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	2201      	movs	r2, #1
 8004eca:	771a      	strb	r2, [r3, #28]
 8004ecc:	e019      	b.n	8004f02 <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ed2:	687a      	ldr	r2, [r7, #4]
 8004ed4:	429a      	cmp	r2, r3
 8004ed6:	d103      	bne.n	8004ee0 <TIM_DMACaptureHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	2202      	movs	r2, #2
 8004edc:	771a      	strb	r2, [r3, #28]
 8004ede:	e010      	b.n	8004f02 <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ee4:	687a      	ldr	r2, [r7, #4]
 8004ee6:	429a      	cmp	r2, r3
 8004ee8:	d103      	bne.n	8004ef2 <TIM_DMACaptureHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	2204      	movs	r2, #4
 8004eee:	771a      	strb	r2, [r3, #28]
 8004ef0:	e007      	b.n	8004f02 <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ef6:	687a      	ldr	r2, [r7, #4]
 8004ef8:	429a      	cmp	r2, r3
 8004efa:	d102      	bne.n	8004f02 <TIM_DMACaptureHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	2208      	movs	r2, #8
 8004f00:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->IC_CaptureHalfCpltCallback(htim);
#else
  HAL_TIM_IC_CaptureHalfCpltCallback(htim);
 8004f02:	68f8      	ldr	r0, [r7, #12]
 8004f04:	f7ff fefe 	bl	8004d04 <HAL_TIM_IC_CaptureHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	2200      	movs	r2, #0
 8004f0c:	771a      	strb	r2, [r3, #28]
}
 8004f0e:	bf00      	nop
 8004f10:	3710      	adds	r7, #16
 8004f12:	46bd      	mov	sp, r7
 8004f14:	bd80      	pop	{r7, pc}
	...

08004f18 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004f18:	b480      	push	{r7}
 8004f1a:	b085      	sub	sp, #20
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]
 8004f20:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	4a40      	ldr	r2, [pc, #256]	; (800502c <TIM_Base_SetConfig+0x114>)
 8004f2c:	4293      	cmp	r3, r2
 8004f2e:	d013      	beq.n	8004f58 <TIM_Base_SetConfig+0x40>
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f36:	d00f      	beq.n	8004f58 <TIM_Base_SetConfig+0x40>
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	4a3d      	ldr	r2, [pc, #244]	; (8005030 <TIM_Base_SetConfig+0x118>)
 8004f3c:	4293      	cmp	r3, r2
 8004f3e:	d00b      	beq.n	8004f58 <TIM_Base_SetConfig+0x40>
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	4a3c      	ldr	r2, [pc, #240]	; (8005034 <TIM_Base_SetConfig+0x11c>)
 8004f44:	4293      	cmp	r3, r2
 8004f46:	d007      	beq.n	8004f58 <TIM_Base_SetConfig+0x40>
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	4a3b      	ldr	r2, [pc, #236]	; (8005038 <TIM_Base_SetConfig+0x120>)
 8004f4c:	4293      	cmp	r3, r2
 8004f4e:	d003      	beq.n	8004f58 <TIM_Base_SetConfig+0x40>
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	4a3a      	ldr	r2, [pc, #232]	; (800503c <TIM_Base_SetConfig+0x124>)
 8004f54:	4293      	cmp	r3, r2
 8004f56:	d108      	bne.n	8004f6a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f5e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004f60:	683b      	ldr	r3, [r7, #0]
 8004f62:	685b      	ldr	r3, [r3, #4]
 8004f64:	68fa      	ldr	r2, [r7, #12]
 8004f66:	4313      	orrs	r3, r2
 8004f68:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	4a2f      	ldr	r2, [pc, #188]	; (800502c <TIM_Base_SetConfig+0x114>)
 8004f6e:	4293      	cmp	r3, r2
 8004f70:	d02b      	beq.n	8004fca <TIM_Base_SetConfig+0xb2>
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f78:	d027      	beq.n	8004fca <TIM_Base_SetConfig+0xb2>
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	4a2c      	ldr	r2, [pc, #176]	; (8005030 <TIM_Base_SetConfig+0x118>)
 8004f7e:	4293      	cmp	r3, r2
 8004f80:	d023      	beq.n	8004fca <TIM_Base_SetConfig+0xb2>
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	4a2b      	ldr	r2, [pc, #172]	; (8005034 <TIM_Base_SetConfig+0x11c>)
 8004f86:	4293      	cmp	r3, r2
 8004f88:	d01f      	beq.n	8004fca <TIM_Base_SetConfig+0xb2>
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	4a2a      	ldr	r2, [pc, #168]	; (8005038 <TIM_Base_SetConfig+0x120>)
 8004f8e:	4293      	cmp	r3, r2
 8004f90:	d01b      	beq.n	8004fca <TIM_Base_SetConfig+0xb2>
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	4a29      	ldr	r2, [pc, #164]	; (800503c <TIM_Base_SetConfig+0x124>)
 8004f96:	4293      	cmp	r3, r2
 8004f98:	d017      	beq.n	8004fca <TIM_Base_SetConfig+0xb2>
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	4a28      	ldr	r2, [pc, #160]	; (8005040 <TIM_Base_SetConfig+0x128>)
 8004f9e:	4293      	cmp	r3, r2
 8004fa0:	d013      	beq.n	8004fca <TIM_Base_SetConfig+0xb2>
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	4a27      	ldr	r2, [pc, #156]	; (8005044 <TIM_Base_SetConfig+0x12c>)
 8004fa6:	4293      	cmp	r3, r2
 8004fa8:	d00f      	beq.n	8004fca <TIM_Base_SetConfig+0xb2>
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	4a26      	ldr	r2, [pc, #152]	; (8005048 <TIM_Base_SetConfig+0x130>)
 8004fae:	4293      	cmp	r3, r2
 8004fb0:	d00b      	beq.n	8004fca <TIM_Base_SetConfig+0xb2>
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	4a25      	ldr	r2, [pc, #148]	; (800504c <TIM_Base_SetConfig+0x134>)
 8004fb6:	4293      	cmp	r3, r2
 8004fb8:	d007      	beq.n	8004fca <TIM_Base_SetConfig+0xb2>
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	4a24      	ldr	r2, [pc, #144]	; (8005050 <TIM_Base_SetConfig+0x138>)
 8004fbe:	4293      	cmp	r3, r2
 8004fc0:	d003      	beq.n	8004fca <TIM_Base_SetConfig+0xb2>
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	4a23      	ldr	r2, [pc, #140]	; (8005054 <TIM_Base_SetConfig+0x13c>)
 8004fc6:	4293      	cmp	r3, r2
 8004fc8:	d108      	bne.n	8004fdc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004fd0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004fd2:	683b      	ldr	r3, [r7, #0]
 8004fd4:	68db      	ldr	r3, [r3, #12]
 8004fd6:	68fa      	ldr	r2, [r7, #12]
 8004fd8:	4313      	orrs	r3, r2
 8004fda:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004fe2:	683b      	ldr	r3, [r7, #0]
 8004fe4:	695b      	ldr	r3, [r3, #20]
 8004fe6:	4313      	orrs	r3, r2
 8004fe8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	68fa      	ldr	r2, [r7, #12]
 8004fee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004ff0:	683b      	ldr	r3, [r7, #0]
 8004ff2:	689a      	ldr	r2, [r3, #8]
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004ff8:	683b      	ldr	r3, [r7, #0]
 8004ffa:	681a      	ldr	r2, [r3, #0]
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	4a0a      	ldr	r2, [pc, #40]	; (800502c <TIM_Base_SetConfig+0x114>)
 8005004:	4293      	cmp	r3, r2
 8005006:	d003      	beq.n	8005010 <TIM_Base_SetConfig+0xf8>
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	4a0c      	ldr	r2, [pc, #48]	; (800503c <TIM_Base_SetConfig+0x124>)
 800500c:	4293      	cmp	r3, r2
 800500e:	d103      	bne.n	8005018 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005010:	683b      	ldr	r3, [r7, #0]
 8005012:	691a      	ldr	r2, [r3, #16]
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2201      	movs	r2, #1
 800501c:	615a      	str	r2, [r3, #20]
}
 800501e:	bf00      	nop
 8005020:	3714      	adds	r7, #20
 8005022:	46bd      	mov	sp, r7
 8005024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005028:	4770      	bx	lr
 800502a:	bf00      	nop
 800502c:	40010000 	.word	0x40010000
 8005030:	40000400 	.word	0x40000400
 8005034:	40000800 	.word	0x40000800
 8005038:	40000c00 	.word	0x40000c00
 800503c:	40010400 	.word	0x40010400
 8005040:	40014000 	.word	0x40014000
 8005044:	40014400 	.word	0x40014400
 8005048:	40014800 	.word	0x40014800
 800504c:	40001800 	.word	0x40001800
 8005050:	40001c00 	.word	0x40001c00
 8005054:	40002000 	.word	0x40002000

08005058 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005058:	b480      	push	{r7}
 800505a:	b087      	sub	sp, #28
 800505c:	af00      	add	r7, sp, #0
 800505e:	6078      	str	r0, [r7, #4]
 8005060:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	6a1b      	ldr	r3, [r3, #32]
 8005066:	f023 0201 	bic.w	r2, r3, #1
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	6a1b      	ldr	r3, [r3, #32]
 8005072:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	685b      	ldr	r3, [r3, #4]
 8005078:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	699b      	ldr	r3, [r3, #24]
 800507e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005080:	68fa      	ldr	r2, [r7, #12]
 8005082:	4b2b      	ldr	r3, [pc, #172]	; (8005130 <TIM_OC1_SetConfig+0xd8>)
 8005084:	4013      	ands	r3, r2
 8005086:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	f023 0303 	bic.w	r3, r3, #3
 800508e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005090:	683b      	ldr	r3, [r7, #0]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	68fa      	ldr	r2, [r7, #12]
 8005096:	4313      	orrs	r3, r2
 8005098:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800509a:	697b      	ldr	r3, [r7, #20]
 800509c:	f023 0302 	bic.w	r3, r3, #2
 80050a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80050a2:	683b      	ldr	r3, [r7, #0]
 80050a4:	689b      	ldr	r3, [r3, #8]
 80050a6:	697a      	ldr	r2, [r7, #20]
 80050a8:	4313      	orrs	r3, r2
 80050aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	4a21      	ldr	r2, [pc, #132]	; (8005134 <TIM_OC1_SetConfig+0xdc>)
 80050b0:	4293      	cmp	r3, r2
 80050b2:	d003      	beq.n	80050bc <TIM_OC1_SetConfig+0x64>
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	4a20      	ldr	r2, [pc, #128]	; (8005138 <TIM_OC1_SetConfig+0xe0>)
 80050b8:	4293      	cmp	r3, r2
 80050ba:	d10c      	bne.n	80050d6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80050bc:	697b      	ldr	r3, [r7, #20]
 80050be:	f023 0308 	bic.w	r3, r3, #8
 80050c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80050c4:	683b      	ldr	r3, [r7, #0]
 80050c6:	68db      	ldr	r3, [r3, #12]
 80050c8:	697a      	ldr	r2, [r7, #20]
 80050ca:	4313      	orrs	r3, r2
 80050cc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80050ce:	697b      	ldr	r3, [r7, #20]
 80050d0:	f023 0304 	bic.w	r3, r3, #4
 80050d4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	4a16      	ldr	r2, [pc, #88]	; (8005134 <TIM_OC1_SetConfig+0xdc>)
 80050da:	4293      	cmp	r3, r2
 80050dc:	d003      	beq.n	80050e6 <TIM_OC1_SetConfig+0x8e>
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	4a15      	ldr	r2, [pc, #84]	; (8005138 <TIM_OC1_SetConfig+0xe0>)
 80050e2:	4293      	cmp	r3, r2
 80050e4:	d111      	bne.n	800510a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80050e6:	693b      	ldr	r3, [r7, #16]
 80050e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80050ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80050ee:	693b      	ldr	r3, [r7, #16]
 80050f0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80050f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80050f6:	683b      	ldr	r3, [r7, #0]
 80050f8:	695b      	ldr	r3, [r3, #20]
 80050fa:	693a      	ldr	r2, [r7, #16]
 80050fc:	4313      	orrs	r3, r2
 80050fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005100:	683b      	ldr	r3, [r7, #0]
 8005102:	699b      	ldr	r3, [r3, #24]
 8005104:	693a      	ldr	r2, [r7, #16]
 8005106:	4313      	orrs	r3, r2
 8005108:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	693a      	ldr	r2, [r7, #16]
 800510e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	68fa      	ldr	r2, [r7, #12]
 8005114:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005116:	683b      	ldr	r3, [r7, #0]
 8005118:	685a      	ldr	r2, [r3, #4]
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	697a      	ldr	r2, [r7, #20]
 8005122:	621a      	str	r2, [r3, #32]
}
 8005124:	bf00      	nop
 8005126:	371c      	adds	r7, #28
 8005128:	46bd      	mov	sp, r7
 800512a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512e:	4770      	bx	lr
 8005130:	fffeff8f 	.word	0xfffeff8f
 8005134:	40010000 	.word	0x40010000
 8005138:	40010400 	.word	0x40010400

0800513c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800513c:	b480      	push	{r7}
 800513e:	b087      	sub	sp, #28
 8005140:	af00      	add	r7, sp, #0
 8005142:	6078      	str	r0, [r7, #4]
 8005144:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	6a1b      	ldr	r3, [r3, #32]
 800514a:	f023 0210 	bic.w	r2, r3, #16
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	6a1b      	ldr	r3, [r3, #32]
 8005156:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	685b      	ldr	r3, [r3, #4]
 800515c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	699b      	ldr	r3, [r3, #24]
 8005162:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005164:	68fa      	ldr	r2, [r7, #12]
 8005166:	4b2e      	ldr	r3, [pc, #184]	; (8005220 <TIM_OC2_SetConfig+0xe4>)
 8005168:	4013      	ands	r3, r2
 800516a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005172:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005174:	683b      	ldr	r3, [r7, #0]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	021b      	lsls	r3, r3, #8
 800517a:	68fa      	ldr	r2, [r7, #12]
 800517c:	4313      	orrs	r3, r2
 800517e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005180:	697b      	ldr	r3, [r7, #20]
 8005182:	f023 0320 	bic.w	r3, r3, #32
 8005186:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005188:	683b      	ldr	r3, [r7, #0]
 800518a:	689b      	ldr	r3, [r3, #8]
 800518c:	011b      	lsls	r3, r3, #4
 800518e:	697a      	ldr	r2, [r7, #20]
 8005190:	4313      	orrs	r3, r2
 8005192:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	4a23      	ldr	r2, [pc, #140]	; (8005224 <TIM_OC2_SetConfig+0xe8>)
 8005198:	4293      	cmp	r3, r2
 800519a:	d003      	beq.n	80051a4 <TIM_OC2_SetConfig+0x68>
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	4a22      	ldr	r2, [pc, #136]	; (8005228 <TIM_OC2_SetConfig+0xec>)
 80051a0:	4293      	cmp	r3, r2
 80051a2:	d10d      	bne.n	80051c0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80051a4:	697b      	ldr	r3, [r7, #20]
 80051a6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80051aa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80051ac:	683b      	ldr	r3, [r7, #0]
 80051ae:	68db      	ldr	r3, [r3, #12]
 80051b0:	011b      	lsls	r3, r3, #4
 80051b2:	697a      	ldr	r2, [r7, #20]
 80051b4:	4313      	orrs	r3, r2
 80051b6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80051b8:	697b      	ldr	r3, [r7, #20]
 80051ba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80051be:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	4a18      	ldr	r2, [pc, #96]	; (8005224 <TIM_OC2_SetConfig+0xe8>)
 80051c4:	4293      	cmp	r3, r2
 80051c6:	d003      	beq.n	80051d0 <TIM_OC2_SetConfig+0x94>
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	4a17      	ldr	r2, [pc, #92]	; (8005228 <TIM_OC2_SetConfig+0xec>)
 80051cc:	4293      	cmp	r3, r2
 80051ce:	d113      	bne.n	80051f8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80051d0:	693b      	ldr	r3, [r7, #16]
 80051d2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80051d6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80051d8:	693b      	ldr	r3, [r7, #16]
 80051da:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80051de:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80051e0:	683b      	ldr	r3, [r7, #0]
 80051e2:	695b      	ldr	r3, [r3, #20]
 80051e4:	009b      	lsls	r3, r3, #2
 80051e6:	693a      	ldr	r2, [r7, #16]
 80051e8:	4313      	orrs	r3, r2
 80051ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80051ec:	683b      	ldr	r3, [r7, #0]
 80051ee:	699b      	ldr	r3, [r3, #24]
 80051f0:	009b      	lsls	r3, r3, #2
 80051f2:	693a      	ldr	r2, [r7, #16]
 80051f4:	4313      	orrs	r3, r2
 80051f6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	693a      	ldr	r2, [r7, #16]
 80051fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	68fa      	ldr	r2, [r7, #12]
 8005202:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005204:	683b      	ldr	r3, [r7, #0]
 8005206:	685a      	ldr	r2, [r3, #4]
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	697a      	ldr	r2, [r7, #20]
 8005210:	621a      	str	r2, [r3, #32]
}
 8005212:	bf00      	nop
 8005214:	371c      	adds	r7, #28
 8005216:	46bd      	mov	sp, r7
 8005218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800521c:	4770      	bx	lr
 800521e:	bf00      	nop
 8005220:	feff8fff 	.word	0xfeff8fff
 8005224:	40010000 	.word	0x40010000
 8005228:	40010400 	.word	0x40010400

0800522c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800522c:	b480      	push	{r7}
 800522e:	b087      	sub	sp, #28
 8005230:	af00      	add	r7, sp, #0
 8005232:	6078      	str	r0, [r7, #4]
 8005234:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	6a1b      	ldr	r3, [r3, #32]
 800523a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	6a1b      	ldr	r3, [r3, #32]
 8005246:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	685b      	ldr	r3, [r3, #4]
 800524c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	69db      	ldr	r3, [r3, #28]
 8005252:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005254:	68fa      	ldr	r2, [r7, #12]
 8005256:	4b2d      	ldr	r3, [pc, #180]	; (800530c <TIM_OC3_SetConfig+0xe0>)
 8005258:	4013      	ands	r3, r2
 800525a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	f023 0303 	bic.w	r3, r3, #3
 8005262:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005264:	683b      	ldr	r3, [r7, #0]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	68fa      	ldr	r2, [r7, #12]
 800526a:	4313      	orrs	r3, r2
 800526c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800526e:	697b      	ldr	r3, [r7, #20]
 8005270:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005274:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005276:	683b      	ldr	r3, [r7, #0]
 8005278:	689b      	ldr	r3, [r3, #8]
 800527a:	021b      	lsls	r3, r3, #8
 800527c:	697a      	ldr	r2, [r7, #20]
 800527e:	4313      	orrs	r3, r2
 8005280:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	4a22      	ldr	r2, [pc, #136]	; (8005310 <TIM_OC3_SetConfig+0xe4>)
 8005286:	4293      	cmp	r3, r2
 8005288:	d003      	beq.n	8005292 <TIM_OC3_SetConfig+0x66>
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	4a21      	ldr	r2, [pc, #132]	; (8005314 <TIM_OC3_SetConfig+0xe8>)
 800528e:	4293      	cmp	r3, r2
 8005290:	d10d      	bne.n	80052ae <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005292:	697b      	ldr	r3, [r7, #20]
 8005294:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005298:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800529a:	683b      	ldr	r3, [r7, #0]
 800529c:	68db      	ldr	r3, [r3, #12]
 800529e:	021b      	lsls	r3, r3, #8
 80052a0:	697a      	ldr	r2, [r7, #20]
 80052a2:	4313      	orrs	r3, r2
 80052a4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80052a6:	697b      	ldr	r3, [r7, #20]
 80052a8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80052ac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	4a17      	ldr	r2, [pc, #92]	; (8005310 <TIM_OC3_SetConfig+0xe4>)
 80052b2:	4293      	cmp	r3, r2
 80052b4:	d003      	beq.n	80052be <TIM_OC3_SetConfig+0x92>
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	4a16      	ldr	r2, [pc, #88]	; (8005314 <TIM_OC3_SetConfig+0xe8>)
 80052ba:	4293      	cmp	r3, r2
 80052bc:	d113      	bne.n	80052e6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80052be:	693b      	ldr	r3, [r7, #16]
 80052c0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80052c4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80052c6:	693b      	ldr	r3, [r7, #16]
 80052c8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80052cc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80052ce:	683b      	ldr	r3, [r7, #0]
 80052d0:	695b      	ldr	r3, [r3, #20]
 80052d2:	011b      	lsls	r3, r3, #4
 80052d4:	693a      	ldr	r2, [r7, #16]
 80052d6:	4313      	orrs	r3, r2
 80052d8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80052da:	683b      	ldr	r3, [r7, #0]
 80052dc:	699b      	ldr	r3, [r3, #24]
 80052de:	011b      	lsls	r3, r3, #4
 80052e0:	693a      	ldr	r2, [r7, #16]
 80052e2:	4313      	orrs	r3, r2
 80052e4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	693a      	ldr	r2, [r7, #16]
 80052ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	68fa      	ldr	r2, [r7, #12]
 80052f0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80052f2:	683b      	ldr	r3, [r7, #0]
 80052f4:	685a      	ldr	r2, [r3, #4]
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	697a      	ldr	r2, [r7, #20]
 80052fe:	621a      	str	r2, [r3, #32]
}
 8005300:	bf00      	nop
 8005302:	371c      	adds	r7, #28
 8005304:	46bd      	mov	sp, r7
 8005306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530a:	4770      	bx	lr
 800530c:	fffeff8f 	.word	0xfffeff8f
 8005310:	40010000 	.word	0x40010000
 8005314:	40010400 	.word	0x40010400

08005318 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005318:	b480      	push	{r7}
 800531a:	b087      	sub	sp, #28
 800531c:	af00      	add	r7, sp, #0
 800531e:	6078      	str	r0, [r7, #4]
 8005320:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	6a1b      	ldr	r3, [r3, #32]
 8005326:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	6a1b      	ldr	r3, [r3, #32]
 8005332:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	685b      	ldr	r3, [r3, #4]
 8005338:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	69db      	ldr	r3, [r3, #28]
 800533e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005340:	68fa      	ldr	r2, [r7, #12]
 8005342:	4b1e      	ldr	r3, [pc, #120]	; (80053bc <TIM_OC4_SetConfig+0xa4>)
 8005344:	4013      	ands	r3, r2
 8005346:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800534e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005350:	683b      	ldr	r3, [r7, #0]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	021b      	lsls	r3, r3, #8
 8005356:	68fa      	ldr	r2, [r7, #12]
 8005358:	4313      	orrs	r3, r2
 800535a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800535c:	693b      	ldr	r3, [r7, #16]
 800535e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005362:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005364:	683b      	ldr	r3, [r7, #0]
 8005366:	689b      	ldr	r3, [r3, #8]
 8005368:	031b      	lsls	r3, r3, #12
 800536a:	693a      	ldr	r2, [r7, #16]
 800536c:	4313      	orrs	r3, r2
 800536e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	4a13      	ldr	r2, [pc, #76]	; (80053c0 <TIM_OC4_SetConfig+0xa8>)
 8005374:	4293      	cmp	r3, r2
 8005376:	d003      	beq.n	8005380 <TIM_OC4_SetConfig+0x68>
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	4a12      	ldr	r2, [pc, #72]	; (80053c4 <TIM_OC4_SetConfig+0xac>)
 800537c:	4293      	cmp	r3, r2
 800537e:	d109      	bne.n	8005394 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005380:	697b      	ldr	r3, [r7, #20]
 8005382:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005386:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005388:	683b      	ldr	r3, [r7, #0]
 800538a:	695b      	ldr	r3, [r3, #20]
 800538c:	019b      	lsls	r3, r3, #6
 800538e:	697a      	ldr	r2, [r7, #20]
 8005390:	4313      	orrs	r3, r2
 8005392:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	697a      	ldr	r2, [r7, #20]
 8005398:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	68fa      	ldr	r2, [r7, #12]
 800539e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80053a0:	683b      	ldr	r3, [r7, #0]
 80053a2:	685a      	ldr	r2, [r3, #4]
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	693a      	ldr	r2, [r7, #16]
 80053ac:	621a      	str	r2, [r3, #32]
}
 80053ae:	bf00      	nop
 80053b0:	371c      	adds	r7, #28
 80053b2:	46bd      	mov	sp, r7
 80053b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b8:	4770      	bx	lr
 80053ba:	bf00      	nop
 80053bc:	feff8fff 	.word	0xfeff8fff
 80053c0:	40010000 	.word	0x40010000
 80053c4:	40010400 	.word	0x40010400

080053c8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80053c8:	b480      	push	{r7}
 80053ca:	b087      	sub	sp, #28
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	6078      	str	r0, [r7, #4]
 80053d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	6a1b      	ldr	r3, [r3, #32]
 80053d6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	6a1b      	ldr	r3, [r3, #32]
 80053e2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	685b      	ldr	r3, [r3, #4]
 80053e8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80053f0:	68fa      	ldr	r2, [r7, #12]
 80053f2:	4b1b      	ldr	r3, [pc, #108]	; (8005460 <TIM_OC5_SetConfig+0x98>)
 80053f4:	4013      	ands	r3, r2
 80053f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80053f8:	683b      	ldr	r3, [r7, #0]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	68fa      	ldr	r2, [r7, #12]
 80053fe:	4313      	orrs	r3, r2
 8005400:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005402:	693b      	ldr	r3, [r7, #16]
 8005404:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005408:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800540a:	683b      	ldr	r3, [r7, #0]
 800540c:	689b      	ldr	r3, [r3, #8]
 800540e:	041b      	lsls	r3, r3, #16
 8005410:	693a      	ldr	r2, [r7, #16]
 8005412:	4313      	orrs	r3, r2
 8005414:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	4a12      	ldr	r2, [pc, #72]	; (8005464 <TIM_OC5_SetConfig+0x9c>)
 800541a:	4293      	cmp	r3, r2
 800541c:	d003      	beq.n	8005426 <TIM_OC5_SetConfig+0x5e>
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	4a11      	ldr	r2, [pc, #68]	; (8005468 <TIM_OC5_SetConfig+0xa0>)
 8005422:	4293      	cmp	r3, r2
 8005424:	d109      	bne.n	800543a <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005426:	697b      	ldr	r3, [r7, #20]
 8005428:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800542c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800542e:	683b      	ldr	r3, [r7, #0]
 8005430:	695b      	ldr	r3, [r3, #20]
 8005432:	021b      	lsls	r3, r3, #8
 8005434:	697a      	ldr	r2, [r7, #20]
 8005436:	4313      	orrs	r3, r2
 8005438:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	697a      	ldr	r2, [r7, #20]
 800543e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	68fa      	ldr	r2, [r7, #12]
 8005444:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005446:	683b      	ldr	r3, [r7, #0]
 8005448:	685a      	ldr	r2, [r3, #4]
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	693a      	ldr	r2, [r7, #16]
 8005452:	621a      	str	r2, [r3, #32]
}
 8005454:	bf00      	nop
 8005456:	371c      	adds	r7, #28
 8005458:	46bd      	mov	sp, r7
 800545a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545e:	4770      	bx	lr
 8005460:	fffeff8f 	.word	0xfffeff8f
 8005464:	40010000 	.word	0x40010000
 8005468:	40010400 	.word	0x40010400

0800546c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800546c:	b480      	push	{r7}
 800546e:	b087      	sub	sp, #28
 8005470:	af00      	add	r7, sp, #0
 8005472:	6078      	str	r0, [r7, #4]
 8005474:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	6a1b      	ldr	r3, [r3, #32]
 800547a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	6a1b      	ldr	r3, [r3, #32]
 8005486:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	685b      	ldr	r3, [r3, #4]
 800548c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005492:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005494:	68fa      	ldr	r2, [r7, #12]
 8005496:	4b1c      	ldr	r3, [pc, #112]	; (8005508 <TIM_OC6_SetConfig+0x9c>)
 8005498:	4013      	ands	r3, r2
 800549a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800549c:	683b      	ldr	r3, [r7, #0]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	021b      	lsls	r3, r3, #8
 80054a2:	68fa      	ldr	r2, [r7, #12]
 80054a4:	4313      	orrs	r3, r2
 80054a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80054a8:	693b      	ldr	r3, [r7, #16]
 80054aa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80054ae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80054b0:	683b      	ldr	r3, [r7, #0]
 80054b2:	689b      	ldr	r3, [r3, #8]
 80054b4:	051b      	lsls	r3, r3, #20
 80054b6:	693a      	ldr	r2, [r7, #16]
 80054b8:	4313      	orrs	r3, r2
 80054ba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	4a13      	ldr	r2, [pc, #76]	; (800550c <TIM_OC6_SetConfig+0xa0>)
 80054c0:	4293      	cmp	r3, r2
 80054c2:	d003      	beq.n	80054cc <TIM_OC6_SetConfig+0x60>
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	4a12      	ldr	r2, [pc, #72]	; (8005510 <TIM_OC6_SetConfig+0xa4>)
 80054c8:	4293      	cmp	r3, r2
 80054ca:	d109      	bne.n	80054e0 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80054cc:	697b      	ldr	r3, [r7, #20]
 80054ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80054d2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80054d4:	683b      	ldr	r3, [r7, #0]
 80054d6:	695b      	ldr	r3, [r3, #20]
 80054d8:	029b      	lsls	r3, r3, #10
 80054da:	697a      	ldr	r2, [r7, #20]
 80054dc:	4313      	orrs	r3, r2
 80054de:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	697a      	ldr	r2, [r7, #20]
 80054e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	68fa      	ldr	r2, [r7, #12]
 80054ea:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80054ec:	683b      	ldr	r3, [r7, #0]
 80054ee:	685a      	ldr	r2, [r3, #4]
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	693a      	ldr	r2, [r7, #16]
 80054f8:	621a      	str	r2, [r3, #32]
}
 80054fa:	bf00      	nop
 80054fc:	371c      	adds	r7, #28
 80054fe:	46bd      	mov	sp, r7
 8005500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005504:	4770      	bx	lr
 8005506:	bf00      	nop
 8005508:	feff8fff 	.word	0xfeff8fff
 800550c:	40010000 	.word	0x40010000
 8005510:	40010400 	.word	0x40010400

08005514 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8005514:	b480      	push	{r7}
 8005516:	b087      	sub	sp, #28
 8005518:	af00      	add	r7, sp, #0
 800551a:	60f8      	str	r0, [r7, #12]
 800551c:	60b9      	str	r1, [r7, #8]
 800551e:	607a      	str	r2, [r7, #4]
 8005520:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	6a1b      	ldr	r3, [r3, #32]
 8005526:	f023 0201 	bic.w	r2, r3, #1
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	699b      	ldr	r3, [r3, #24]
 8005532:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	6a1b      	ldr	r3, [r3, #32]
 8005538:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	4a28      	ldr	r2, [pc, #160]	; (80055e0 <TIM_TI1_SetConfig+0xcc>)
 800553e:	4293      	cmp	r3, r2
 8005540:	d01b      	beq.n	800557a <TIM_TI1_SetConfig+0x66>
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005548:	d017      	beq.n	800557a <TIM_TI1_SetConfig+0x66>
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	4a25      	ldr	r2, [pc, #148]	; (80055e4 <TIM_TI1_SetConfig+0xd0>)
 800554e:	4293      	cmp	r3, r2
 8005550:	d013      	beq.n	800557a <TIM_TI1_SetConfig+0x66>
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	4a24      	ldr	r2, [pc, #144]	; (80055e8 <TIM_TI1_SetConfig+0xd4>)
 8005556:	4293      	cmp	r3, r2
 8005558:	d00f      	beq.n	800557a <TIM_TI1_SetConfig+0x66>
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	4a23      	ldr	r2, [pc, #140]	; (80055ec <TIM_TI1_SetConfig+0xd8>)
 800555e:	4293      	cmp	r3, r2
 8005560:	d00b      	beq.n	800557a <TIM_TI1_SetConfig+0x66>
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	4a22      	ldr	r2, [pc, #136]	; (80055f0 <TIM_TI1_SetConfig+0xdc>)
 8005566:	4293      	cmp	r3, r2
 8005568:	d007      	beq.n	800557a <TIM_TI1_SetConfig+0x66>
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	4a21      	ldr	r2, [pc, #132]	; (80055f4 <TIM_TI1_SetConfig+0xe0>)
 800556e:	4293      	cmp	r3, r2
 8005570:	d003      	beq.n	800557a <TIM_TI1_SetConfig+0x66>
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	4a20      	ldr	r2, [pc, #128]	; (80055f8 <TIM_TI1_SetConfig+0xe4>)
 8005576:	4293      	cmp	r3, r2
 8005578:	d101      	bne.n	800557e <TIM_TI1_SetConfig+0x6a>
 800557a:	2301      	movs	r3, #1
 800557c:	e000      	b.n	8005580 <TIM_TI1_SetConfig+0x6c>
 800557e:	2300      	movs	r3, #0
 8005580:	2b00      	cmp	r3, #0
 8005582:	d008      	beq.n	8005596 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8005584:	697b      	ldr	r3, [r7, #20]
 8005586:	f023 0303 	bic.w	r3, r3, #3
 800558a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800558c:	697a      	ldr	r2, [r7, #20]
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	4313      	orrs	r3, r2
 8005592:	617b      	str	r3, [r7, #20]
 8005594:	e003      	b.n	800559e <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8005596:	697b      	ldr	r3, [r7, #20]
 8005598:	f043 0301 	orr.w	r3, r3, #1
 800559c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800559e:	697b      	ldr	r3, [r7, #20]
 80055a0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80055a4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80055a6:	683b      	ldr	r3, [r7, #0]
 80055a8:	011b      	lsls	r3, r3, #4
 80055aa:	b2db      	uxtb	r3, r3
 80055ac:	697a      	ldr	r2, [r7, #20]
 80055ae:	4313      	orrs	r3, r2
 80055b0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80055b2:	693b      	ldr	r3, [r7, #16]
 80055b4:	f023 030a 	bic.w	r3, r3, #10
 80055b8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80055ba:	68bb      	ldr	r3, [r7, #8]
 80055bc:	f003 030a 	and.w	r3, r3, #10
 80055c0:	693a      	ldr	r2, [r7, #16]
 80055c2:	4313      	orrs	r3, r2
 80055c4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	697a      	ldr	r2, [r7, #20]
 80055ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	693a      	ldr	r2, [r7, #16]
 80055d0:	621a      	str	r2, [r3, #32]
}
 80055d2:	bf00      	nop
 80055d4:	371c      	adds	r7, #28
 80055d6:	46bd      	mov	sp, r7
 80055d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055dc:	4770      	bx	lr
 80055de:	bf00      	nop
 80055e0:	40010000 	.word	0x40010000
 80055e4:	40000400 	.word	0x40000400
 80055e8:	40000800 	.word	0x40000800
 80055ec:	40000c00 	.word	0x40000c00
 80055f0:	40010400 	.word	0x40010400
 80055f4:	40014000 	.word	0x40014000
 80055f8:	40001800 	.word	0x40001800

080055fc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80055fc:	b480      	push	{r7}
 80055fe:	b087      	sub	sp, #28
 8005600:	af00      	add	r7, sp, #0
 8005602:	60f8      	str	r0, [r7, #12]
 8005604:	60b9      	str	r1, [r7, #8]
 8005606:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	6a1b      	ldr	r3, [r3, #32]
 800560c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	6a1b      	ldr	r3, [r3, #32]
 8005612:	f023 0201 	bic.w	r2, r3, #1
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	699b      	ldr	r3, [r3, #24]
 800561e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005620:	693b      	ldr	r3, [r7, #16]
 8005622:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005626:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	011b      	lsls	r3, r3, #4
 800562c:	693a      	ldr	r2, [r7, #16]
 800562e:	4313      	orrs	r3, r2
 8005630:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005632:	697b      	ldr	r3, [r7, #20]
 8005634:	f023 030a 	bic.w	r3, r3, #10
 8005638:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800563a:	697a      	ldr	r2, [r7, #20]
 800563c:	68bb      	ldr	r3, [r7, #8]
 800563e:	4313      	orrs	r3, r2
 8005640:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	693a      	ldr	r2, [r7, #16]
 8005646:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	697a      	ldr	r2, [r7, #20]
 800564c:	621a      	str	r2, [r3, #32]
}
 800564e:	bf00      	nop
 8005650:	371c      	adds	r7, #28
 8005652:	46bd      	mov	sp, r7
 8005654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005658:	4770      	bx	lr

0800565a <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800565a:	b480      	push	{r7}
 800565c:	b087      	sub	sp, #28
 800565e:	af00      	add	r7, sp, #0
 8005660:	60f8      	str	r0, [r7, #12]
 8005662:	60b9      	str	r1, [r7, #8]
 8005664:	607a      	str	r2, [r7, #4]
 8005666:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	6a1b      	ldr	r3, [r3, #32]
 800566c:	f023 0210 	bic.w	r2, r3, #16
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	699b      	ldr	r3, [r3, #24]
 8005678:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	6a1b      	ldr	r3, [r3, #32]
 800567e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8005680:	697b      	ldr	r3, [r7, #20]
 8005682:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005686:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	021b      	lsls	r3, r3, #8
 800568c:	697a      	ldr	r2, [r7, #20]
 800568e:	4313      	orrs	r3, r2
 8005690:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005692:	697b      	ldr	r3, [r7, #20]
 8005694:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005698:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800569a:	683b      	ldr	r3, [r7, #0]
 800569c:	031b      	lsls	r3, r3, #12
 800569e:	b29b      	uxth	r3, r3
 80056a0:	697a      	ldr	r2, [r7, #20]
 80056a2:	4313      	orrs	r3, r2
 80056a4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80056a6:	693b      	ldr	r3, [r7, #16]
 80056a8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80056ac:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80056ae:	68bb      	ldr	r3, [r7, #8]
 80056b0:	011b      	lsls	r3, r3, #4
 80056b2:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80056b6:	693a      	ldr	r2, [r7, #16]
 80056b8:	4313      	orrs	r3, r2
 80056ba:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	697a      	ldr	r2, [r7, #20]
 80056c0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	693a      	ldr	r2, [r7, #16]
 80056c6:	621a      	str	r2, [r3, #32]
}
 80056c8:	bf00      	nop
 80056ca:	371c      	adds	r7, #28
 80056cc:	46bd      	mov	sp, r7
 80056ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d2:	4770      	bx	lr

080056d4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80056d4:	b480      	push	{r7}
 80056d6:	b087      	sub	sp, #28
 80056d8:	af00      	add	r7, sp, #0
 80056da:	60f8      	str	r0, [r7, #12]
 80056dc:	60b9      	str	r1, [r7, #8]
 80056de:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	6a1b      	ldr	r3, [r3, #32]
 80056e4:	f023 0210 	bic.w	r2, r3, #16
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	699b      	ldr	r3, [r3, #24]
 80056f0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	6a1b      	ldr	r3, [r3, #32]
 80056f6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80056f8:	697b      	ldr	r3, [r7, #20]
 80056fa:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80056fe:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	031b      	lsls	r3, r3, #12
 8005704:	697a      	ldr	r2, [r7, #20]
 8005706:	4313      	orrs	r3, r2
 8005708:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800570a:	693b      	ldr	r3, [r7, #16]
 800570c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005710:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005712:	68bb      	ldr	r3, [r7, #8]
 8005714:	011b      	lsls	r3, r3, #4
 8005716:	693a      	ldr	r2, [r7, #16]
 8005718:	4313      	orrs	r3, r2
 800571a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	697a      	ldr	r2, [r7, #20]
 8005720:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	693a      	ldr	r2, [r7, #16]
 8005726:	621a      	str	r2, [r3, #32]
}
 8005728:	bf00      	nop
 800572a:	371c      	adds	r7, #28
 800572c:	46bd      	mov	sp, r7
 800572e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005732:	4770      	bx	lr

08005734 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005734:	b480      	push	{r7}
 8005736:	b087      	sub	sp, #28
 8005738:	af00      	add	r7, sp, #0
 800573a:	60f8      	str	r0, [r7, #12]
 800573c:	60b9      	str	r1, [r7, #8]
 800573e:	607a      	str	r2, [r7, #4]
 8005740:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	6a1b      	ldr	r3, [r3, #32]
 8005746:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	69db      	ldr	r3, [r3, #28]
 8005752:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	6a1b      	ldr	r3, [r3, #32]
 8005758:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800575a:	697b      	ldr	r3, [r7, #20]
 800575c:	f023 0303 	bic.w	r3, r3, #3
 8005760:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8005762:	697a      	ldr	r2, [r7, #20]
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	4313      	orrs	r3, r2
 8005768:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800576a:	697b      	ldr	r3, [r7, #20]
 800576c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005770:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8005772:	683b      	ldr	r3, [r7, #0]
 8005774:	011b      	lsls	r3, r3, #4
 8005776:	b2db      	uxtb	r3, r3
 8005778:	697a      	ldr	r2, [r7, #20]
 800577a:	4313      	orrs	r3, r2
 800577c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800577e:	693b      	ldr	r3, [r7, #16]
 8005780:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8005784:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8005786:	68bb      	ldr	r3, [r7, #8]
 8005788:	021b      	lsls	r3, r3, #8
 800578a:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800578e:	693a      	ldr	r2, [r7, #16]
 8005790:	4313      	orrs	r3, r2
 8005792:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	697a      	ldr	r2, [r7, #20]
 8005798:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	693a      	ldr	r2, [r7, #16]
 800579e:	621a      	str	r2, [r3, #32]
}
 80057a0:	bf00      	nop
 80057a2:	371c      	adds	r7, #28
 80057a4:	46bd      	mov	sp, r7
 80057a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057aa:	4770      	bx	lr

080057ac <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80057ac:	b480      	push	{r7}
 80057ae:	b087      	sub	sp, #28
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	60f8      	str	r0, [r7, #12]
 80057b4:	60b9      	str	r1, [r7, #8]
 80057b6:	607a      	str	r2, [r7, #4]
 80057b8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	6a1b      	ldr	r3, [r3, #32]
 80057be:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	69db      	ldr	r3, [r3, #28]
 80057ca:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	6a1b      	ldr	r3, [r3, #32]
 80057d0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80057d2:	697b      	ldr	r3, [r7, #20]
 80057d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80057d8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	021b      	lsls	r3, r3, #8
 80057de:	697a      	ldr	r2, [r7, #20]
 80057e0:	4313      	orrs	r3, r2
 80057e2:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80057e4:	697b      	ldr	r3, [r7, #20]
 80057e6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80057ea:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80057ec:	683b      	ldr	r3, [r7, #0]
 80057ee:	031b      	lsls	r3, r3, #12
 80057f0:	b29b      	uxth	r3, r3
 80057f2:	697a      	ldr	r2, [r7, #20]
 80057f4:	4313      	orrs	r3, r2
 80057f6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80057f8:	693b      	ldr	r3, [r7, #16]
 80057fa:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80057fe:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8005800:	68bb      	ldr	r3, [r7, #8]
 8005802:	031b      	lsls	r3, r3, #12
 8005804:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8005808:	693a      	ldr	r2, [r7, #16]
 800580a:	4313      	orrs	r3, r2
 800580c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	697a      	ldr	r2, [r7, #20]
 8005812:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	693a      	ldr	r2, [r7, #16]
 8005818:	621a      	str	r2, [r3, #32]
}
 800581a:	bf00      	nop
 800581c:	371c      	adds	r7, #28
 800581e:	46bd      	mov	sp, r7
 8005820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005824:	4770      	bx	lr

08005826 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005826:	b480      	push	{r7}
 8005828:	b085      	sub	sp, #20
 800582a:	af00      	add	r7, sp, #0
 800582c:	6078      	str	r0, [r7, #4]
 800582e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	689b      	ldr	r3, [r3, #8]
 8005834:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800583c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800583e:	683a      	ldr	r2, [r7, #0]
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	4313      	orrs	r3, r2
 8005844:	f043 0307 	orr.w	r3, r3, #7
 8005848:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	68fa      	ldr	r2, [r7, #12]
 800584e:	609a      	str	r2, [r3, #8]
}
 8005850:	bf00      	nop
 8005852:	3714      	adds	r7, #20
 8005854:	46bd      	mov	sp, r7
 8005856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800585a:	4770      	bx	lr

0800585c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800585c:	b480      	push	{r7}
 800585e:	b087      	sub	sp, #28
 8005860:	af00      	add	r7, sp, #0
 8005862:	60f8      	str	r0, [r7, #12]
 8005864:	60b9      	str	r1, [r7, #8]
 8005866:	607a      	str	r2, [r7, #4]
 8005868:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	689b      	ldr	r3, [r3, #8]
 800586e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005870:	697b      	ldr	r3, [r7, #20]
 8005872:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005876:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005878:	683b      	ldr	r3, [r7, #0]
 800587a:	021a      	lsls	r2, r3, #8
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	431a      	orrs	r2, r3
 8005880:	68bb      	ldr	r3, [r7, #8]
 8005882:	4313      	orrs	r3, r2
 8005884:	697a      	ldr	r2, [r7, #20]
 8005886:	4313      	orrs	r3, r2
 8005888:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	697a      	ldr	r2, [r7, #20]
 800588e:	609a      	str	r2, [r3, #8]
}
 8005890:	bf00      	nop
 8005892:	371c      	adds	r7, #28
 8005894:	46bd      	mov	sp, r7
 8005896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800589a:	4770      	bx	lr

0800589c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800589c:	b480      	push	{r7}
 800589e:	b087      	sub	sp, #28
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	60f8      	str	r0, [r7, #12]
 80058a4:	60b9      	str	r1, [r7, #8]
 80058a6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80058a8:	68bb      	ldr	r3, [r7, #8]
 80058aa:	f003 031f 	and.w	r3, r3, #31
 80058ae:	2201      	movs	r2, #1
 80058b0:	fa02 f303 	lsl.w	r3, r2, r3
 80058b4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	6a1a      	ldr	r2, [r3, #32]
 80058ba:	697b      	ldr	r3, [r7, #20]
 80058bc:	43db      	mvns	r3, r3
 80058be:	401a      	ands	r2, r3
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	6a1a      	ldr	r2, [r3, #32]
 80058c8:	68bb      	ldr	r3, [r7, #8]
 80058ca:	f003 031f 	and.w	r3, r3, #31
 80058ce:	6879      	ldr	r1, [r7, #4]
 80058d0:	fa01 f303 	lsl.w	r3, r1, r3
 80058d4:	431a      	orrs	r2, r3
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	621a      	str	r2, [r3, #32]
}
 80058da:	bf00      	nop
 80058dc:	371c      	adds	r7, #28
 80058de:	46bd      	mov	sp, r7
 80058e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e4:	4770      	bx	lr
	...

080058e8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80058e8:	b480      	push	{r7}
 80058ea:	b085      	sub	sp, #20
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	6078      	str	r0, [r7, #4]
 80058f0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80058f8:	2b01      	cmp	r3, #1
 80058fa:	d101      	bne.n	8005900 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80058fc:	2302      	movs	r3, #2
 80058fe:	e06d      	b.n	80059dc <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	2201      	movs	r2, #1
 8005904:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	2202      	movs	r2, #2
 800590c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	685b      	ldr	r3, [r3, #4]
 8005916:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	689b      	ldr	r3, [r3, #8]
 800591e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	4a30      	ldr	r2, [pc, #192]	; (80059e8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005926:	4293      	cmp	r3, r2
 8005928:	d004      	beq.n	8005934 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	4a2f      	ldr	r2, [pc, #188]	; (80059ec <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005930:	4293      	cmp	r3, r2
 8005932:	d108      	bne.n	8005946 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800593a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800593c:	683b      	ldr	r3, [r7, #0]
 800593e:	685b      	ldr	r3, [r3, #4]
 8005940:	68fa      	ldr	r2, [r7, #12]
 8005942:	4313      	orrs	r3, r2
 8005944:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800594c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800594e:	683b      	ldr	r3, [r7, #0]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	68fa      	ldr	r2, [r7, #12]
 8005954:	4313      	orrs	r3, r2
 8005956:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	68fa      	ldr	r2, [r7, #12]
 800595e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	4a20      	ldr	r2, [pc, #128]	; (80059e8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005966:	4293      	cmp	r3, r2
 8005968:	d022      	beq.n	80059b0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005972:	d01d      	beq.n	80059b0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	4a1d      	ldr	r2, [pc, #116]	; (80059f0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800597a:	4293      	cmp	r3, r2
 800597c:	d018      	beq.n	80059b0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	4a1c      	ldr	r2, [pc, #112]	; (80059f4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005984:	4293      	cmp	r3, r2
 8005986:	d013      	beq.n	80059b0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	4a1a      	ldr	r2, [pc, #104]	; (80059f8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800598e:	4293      	cmp	r3, r2
 8005990:	d00e      	beq.n	80059b0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	4a15      	ldr	r2, [pc, #84]	; (80059ec <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005998:	4293      	cmp	r3, r2
 800599a:	d009      	beq.n	80059b0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	4a16      	ldr	r2, [pc, #88]	; (80059fc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80059a2:	4293      	cmp	r3, r2
 80059a4:	d004      	beq.n	80059b0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	4a15      	ldr	r2, [pc, #84]	; (8005a00 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80059ac:	4293      	cmp	r3, r2
 80059ae:	d10c      	bne.n	80059ca <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80059b0:	68bb      	ldr	r3, [r7, #8]
 80059b2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80059b6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80059b8:	683b      	ldr	r3, [r7, #0]
 80059ba:	689b      	ldr	r3, [r3, #8]
 80059bc:	68ba      	ldr	r2, [r7, #8]
 80059be:	4313      	orrs	r3, r2
 80059c0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	68ba      	ldr	r2, [r7, #8]
 80059c8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	2201      	movs	r2, #1
 80059ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	2200      	movs	r2, #0
 80059d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80059da:	2300      	movs	r3, #0
}
 80059dc:	4618      	mov	r0, r3
 80059de:	3714      	adds	r7, #20
 80059e0:	46bd      	mov	sp, r7
 80059e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e6:	4770      	bx	lr
 80059e8:	40010000 	.word	0x40010000
 80059ec:	40010400 	.word	0x40010400
 80059f0:	40000400 	.word	0x40000400
 80059f4:	40000800 	.word	0x40000800
 80059f8:	40000c00 	.word	0x40000c00
 80059fc:	40014000 	.word	0x40014000
 8005a00:	40001800 	.word	0x40001800

08005a04 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005a04:	b480      	push	{r7}
 8005a06:	b083      	sub	sp, #12
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005a0c:	bf00      	nop
 8005a0e:	370c      	adds	r7, #12
 8005a10:	46bd      	mov	sp, r7
 8005a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a16:	4770      	bx	lr

08005a18 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005a18:	b480      	push	{r7}
 8005a1a:	b083      	sub	sp, #12
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005a20:	bf00      	nop
 8005a22:	370c      	adds	r7, #12
 8005a24:	46bd      	mov	sp, r7
 8005a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a2a:	4770      	bx	lr

08005a2c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005a2c:	b480      	push	{r7}
 8005a2e:	b083      	sub	sp, #12
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005a34:	bf00      	nop
 8005a36:	370c      	adds	r7, #12
 8005a38:	46bd      	mov	sp, r7
 8005a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3e:	4770      	bx	lr

08005a40 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005a40:	b580      	push	{r7, lr}
 8005a42:	b082      	sub	sp, #8
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d101      	bne.n	8005a52 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005a4e:	2301      	movs	r3, #1
 8005a50:	e040      	b.n	8005ad4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d106      	bne.n	8005a68 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005a62:	6878      	ldr	r0, [r7, #4]
 8005a64:	f7fb ff1e 	bl	80018a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	2224      	movs	r2, #36	; 0x24
 8005a6c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	681a      	ldr	r2, [r3, #0]
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	f022 0201 	bic.w	r2, r2, #1
 8005a7c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005a7e:	6878      	ldr	r0, [r7, #4]
 8005a80:	f000 f8c0 	bl	8005c04 <UART_SetConfig>
 8005a84:	4603      	mov	r3, r0
 8005a86:	2b01      	cmp	r3, #1
 8005a88:	d101      	bne.n	8005a8e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005a8a:	2301      	movs	r3, #1
 8005a8c:	e022      	b.n	8005ad4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d002      	beq.n	8005a9c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005a96:	6878      	ldr	r0, [r7, #4]
 8005a98:	f000 fb18 	bl	80060cc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	685a      	ldr	r2, [r3, #4]
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005aaa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	689a      	ldr	r2, [r3, #8]
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005aba:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	681a      	ldr	r2, [r3, #0]
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	f042 0201 	orr.w	r2, r2, #1
 8005aca:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005acc:	6878      	ldr	r0, [r7, #4]
 8005ace:	f000 fb9f 	bl	8006210 <UART_CheckIdleState>
 8005ad2:	4603      	mov	r3, r0
}
 8005ad4:	4618      	mov	r0, r3
 8005ad6:	3708      	adds	r7, #8
 8005ad8:	46bd      	mov	sp, r7
 8005ada:	bd80      	pop	{r7, pc}

08005adc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005adc:	b580      	push	{r7, lr}
 8005ade:	b08a      	sub	sp, #40	; 0x28
 8005ae0:	af02      	add	r7, sp, #8
 8005ae2:	60f8      	str	r0, [r7, #12]
 8005ae4:	60b9      	str	r1, [r7, #8]
 8005ae6:	603b      	str	r3, [r7, #0]
 8005ae8:	4613      	mov	r3, r2
 8005aea:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005af0:	2b20      	cmp	r3, #32
 8005af2:	f040 8081 	bne.w	8005bf8 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005af6:	68bb      	ldr	r3, [r7, #8]
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d002      	beq.n	8005b02 <HAL_UART_Transmit+0x26>
 8005afc:	88fb      	ldrh	r3, [r7, #6]
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d101      	bne.n	8005b06 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005b02:	2301      	movs	r3, #1
 8005b04:	e079      	b.n	8005bfa <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005b0c:	2b01      	cmp	r3, #1
 8005b0e:	d101      	bne.n	8005b14 <HAL_UART_Transmit+0x38>
 8005b10:	2302      	movs	r3, #2
 8005b12:	e072      	b.n	8005bfa <HAL_UART_Transmit+0x11e>
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	2201      	movs	r2, #1
 8005b18:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	2200      	movs	r2, #0
 8005b20:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	2221      	movs	r2, #33	; 0x21
 8005b28:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005b2a:	f7fc f88f 	bl	8001c4c <HAL_GetTick>
 8005b2e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	88fa      	ldrh	r2, [r7, #6]
 8005b34:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	88fa      	ldrh	r2, [r7, #6]
 8005b3c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	689b      	ldr	r3, [r3, #8]
 8005b44:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b48:	d108      	bne.n	8005b5c <HAL_UART_Transmit+0x80>
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	691b      	ldr	r3, [r3, #16]
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d104      	bne.n	8005b5c <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8005b52:	2300      	movs	r3, #0
 8005b54:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005b56:	68bb      	ldr	r3, [r7, #8]
 8005b58:	61bb      	str	r3, [r7, #24]
 8005b5a:	e003      	b.n	8005b64 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8005b5c:	68bb      	ldr	r3, [r7, #8]
 8005b5e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005b60:	2300      	movs	r3, #0
 8005b62:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	2200      	movs	r2, #0
 8005b68:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8005b6c:	e02c      	b.n	8005bc8 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005b6e:	683b      	ldr	r3, [r7, #0]
 8005b70:	9300      	str	r3, [sp, #0]
 8005b72:	697b      	ldr	r3, [r7, #20]
 8005b74:	2200      	movs	r2, #0
 8005b76:	2180      	movs	r1, #128	; 0x80
 8005b78:	68f8      	ldr	r0, [r7, #12]
 8005b7a:	f000 fb7c 	bl	8006276 <UART_WaitOnFlagUntilTimeout>
 8005b7e:	4603      	mov	r3, r0
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d001      	beq.n	8005b88 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8005b84:	2303      	movs	r3, #3
 8005b86:	e038      	b.n	8005bfa <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8005b88:	69fb      	ldr	r3, [r7, #28]
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d10b      	bne.n	8005ba6 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005b8e:	69bb      	ldr	r3, [r7, #24]
 8005b90:	881b      	ldrh	r3, [r3, #0]
 8005b92:	461a      	mov	r2, r3
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005b9c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005b9e:	69bb      	ldr	r3, [r7, #24]
 8005ba0:	3302      	adds	r3, #2
 8005ba2:	61bb      	str	r3, [r7, #24]
 8005ba4:	e007      	b.n	8005bb6 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005ba6:	69fb      	ldr	r3, [r7, #28]
 8005ba8:	781a      	ldrb	r2, [r3, #0]
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005bb0:	69fb      	ldr	r3, [r7, #28]
 8005bb2:	3301      	adds	r3, #1
 8005bb4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005bbc:	b29b      	uxth	r3, r3
 8005bbe:	3b01      	subs	r3, #1
 8005bc0:	b29a      	uxth	r2, r3
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005bce:	b29b      	uxth	r3, r3
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d1cc      	bne.n	8005b6e <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005bd4:	683b      	ldr	r3, [r7, #0]
 8005bd6:	9300      	str	r3, [sp, #0]
 8005bd8:	697b      	ldr	r3, [r7, #20]
 8005bda:	2200      	movs	r2, #0
 8005bdc:	2140      	movs	r1, #64	; 0x40
 8005bde:	68f8      	ldr	r0, [r7, #12]
 8005be0:	f000 fb49 	bl	8006276 <UART_WaitOnFlagUntilTimeout>
 8005be4:	4603      	mov	r3, r0
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d001      	beq.n	8005bee <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8005bea:	2303      	movs	r3, #3
 8005bec:	e005      	b.n	8005bfa <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	2220      	movs	r2, #32
 8005bf2:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8005bf4:	2300      	movs	r3, #0
 8005bf6:	e000      	b.n	8005bfa <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8005bf8:	2302      	movs	r3, #2
  }
}
 8005bfa:	4618      	mov	r0, r3
 8005bfc:	3720      	adds	r7, #32
 8005bfe:	46bd      	mov	sp, r7
 8005c00:	bd80      	pop	{r7, pc}
	...

08005c04 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005c04:	b580      	push	{r7, lr}
 8005c06:	b088      	sub	sp, #32
 8005c08:	af00      	add	r7, sp, #0
 8005c0a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005c0c:	2300      	movs	r3, #0
 8005c0e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	689a      	ldr	r2, [r3, #8]
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	691b      	ldr	r3, [r3, #16]
 8005c18:	431a      	orrs	r2, r3
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	695b      	ldr	r3, [r3, #20]
 8005c1e:	431a      	orrs	r2, r3
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	69db      	ldr	r3, [r3, #28]
 8005c24:	4313      	orrs	r3, r2
 8005c26:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	681a      	ldr	r2, [r3, #0]
 8005c2e:	4ba6      	ldr	r3, [pc, #664]	; (8005ec8 <UART_SetConfig+0x2c4>)
 8005c30:	4013      	ands	r3, r2
 8005c32:	687a      	ldr	r2, [r7, #4]
 8005c34:	6812      	ldr	r2, [r2, #0]
 8005c36:	6979      	ldr	r1, [r7, #20]
 8005c38:	430b      	orrs	r3, r1
 8005c3a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	685b      	ldr	r3, [r3, #4]
 8005c42:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	68da      	ldr	r2, [r3, #12]
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	430a      	orrs	r2, r1
 8005c50:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	699b      	ldr	r3, [r3, #24]
 8005c56:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	6a1b      	ldr	r3, [r3, #32]
 8005c5c:	697a      	ldr	r2, [r7, #20]
 8005c5e:	4313      	orrs	r3, r2
 8005c60:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	689b      	ldr	r3, [r3, #8]
 8005c68:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	697a      	ldr	r2, [r7, #20]
 8005c72:	430a      	orrs	r2, r1
 8005c74:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	4a94      	ldr	r2, [pc, #592]	; (8005ecc <UART_SetConfig+0x2c8>)
 8005c7c:	4293      	cmp	r3, r2
 8005c7e:	d120      	bne.n	8005cc2 <UART_SetConfig+0xbe>
 8005c80:	4b93      	ldr	r3, [pc, #588]	; (8005ed0 <UART_SetConfig+0x2cc>)
 8005c82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c86:	f003 0303 	and.w	r3, r3, #3
 8005c8a:	2b03      	cmp	r3, #3
 8005c8c:	d816      	bhi.n	8005cbc <UART_SetConfig+0xb8>
 8005c8e:	a201      	add	r2, pc, #4	; (adr r2, 8005c94 <UART_SetConfig+0x90>)
 8005c90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c94:	08005ca5 	.word	0x08005ca5
 8005c98:	08005cb1 	.word	0x08005cb1
 8005c9c:	08005cab 	.word	0x08005cab
 8005ca0:	08005cb7 	.word	0x08005cb7
 8005ca4:	2301      	movs	r3, #1
 8005ca6:	77fb      	strb	r3, [r7, #31]
 8005ca8:	e150      	b.n	8005f4c <UART_SetConfig+0x348>
 8005caa:	2302      	movs	r3, #2
 8005cac:	77fb      	strb	r3, [r7, #31]
 8005cae:	e14d      	b.n	8005f4c <UART_SetConfig+0x348>
 8005cb0:	2304      	movs	r3, #4
 8005cb2:	77fb      	strb	r3, [r7, #31]
 8005cb4:	e14a      	b.n	8005f4c <UART_SetConfig+0x348>
 8005cb6:	2308      	movs	r3, #8
 8005cb8:	77fb      	strb	r3, [r7, #31]
 8005cba:	e147      	b.n	8005f4c <UART_SetConfig+0x348>
 8005cbc:	2310      	movs	r3, #16
 8005cbe:	77fb      	strb	r3, [r7, #31]
 8005cc0:	e144      	b.n	8005f4c <UART_SetConfig+0x348>
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	4a83      	ldr	r2, [pc, #524]	; (8005ed4 <UART_SetConfig+0x2d0>)
 8005cc8:	4293      	cmp	r3, r2
 8005cca:	d132      	bne.n	8005d32 <UART_SetConfig+0x12e>
 8005ccc:	4b80      	ldr	r3, [pc, #512]	; (8005ed0 <UART_SetConfig+0x2cc>)
 8005cce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005cd2:	f003 030c 	and.w	r3, r3, #12
 8005cd6:	2b0c      	cmp	r3, #12
 8005cd8:	d828      	bhi.n	8005d2c <UART_SetConfig+0x128>
 8005cda:	a201      	add	r2, pc, #4	; (adr r2, 8005ce0 <UART_SetConfig+0xdc>)
 8005cdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ce0:	08005d15 	.word	0x08005d15
 8005ce4:	08005d2d 	.word	0x08005d2d
 8005ce8:	08005d2d 	.word	0x08005d2d
 8005cec:	08005d2d 	.word	0x08005d2d
 8005cf0:	08005d21 	.word	0x08005d21
 8005cf4:	08005d2d 	.word	0x08005d2d
 8005cf8:	08005d2d 	.word	0x08005d2d
 8005cfc:	08005d2d 	.word	0x08005d2d
 8005d00:	08005d1b 	.word	0x08005d1b
 8005d04:	08005d2d 	.word	0x08005d2d
 8005d08:	08005d2d 	.word	0x08005d2d
 8005d0c:	08005d2d 	.word	0x08005d2d
 8005d10:	08005d27 	.word	0x08005d27
 8005d14:	2300      	movs	r3, #0
 8005d16:	77fb      	strb	r3, [r7, #31]
 8005d18:	e118      	b.n	8005f4c <UART_SetConfig+0x348>
 8005d1a:	2302      	movs	r3, #2
 8005d1c:	77fb      	strb	r3, [r7, #31]
 8005d1e:	e115      	b.n	8005f4c <UART_SetConfig+0x348>
 8005d20:	2304      	movs	r3, #4
 8005d22:	77fb      	strb	r3, [r7, #31]
 8005d24:	e112      	b.n	8005f4c <UART_SetConfig+0x348>
 8005d26:	2308      	movs	r3, #8
 8005d28:	77fb      	strb	r3, [r7, #31]
 8005d2a:	e10f      	b.n	8005f4c <UART_SetConfig+0x348>
 8005d2c:	2310      	movs	r3, #16
 8005d2e:	77fb      	strb	r3, [r7, #31]
 8005d30:	e10c      	b.n	8005f4c <UART_SetConfig+0x348>
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	4a68      	ldr	r2, [pc, #416]	; (8005ed8 <UART_SetConfig+0x2d4>)
 8005d38:	4293      	cmp	r3, r2
 8005d3a:	d120      	bne.n	8005d7e <UART_SetConfig+0x17a>
 8005d3c:	4b64      	ldr	r3, [pc, #400]	; (8005ed0 <UART_SetConfig+0x2cc>)
 8005d3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d42:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005d46:	2b30      	cmp	r3, #48	; 0x30
 8005d48:	d013      	beq.n	8005d72 <UART_SetConfig+0x16e>
 8005d4a:	2b30      	cmp	r3, #48	; 0x30
 8005d4c:	d814      	bhi.n	8005d78 <UART_SetConfig+0x174>
 8005d4e:	2b20      	cmp	r3, #32
 8005d50:	d009      	beq.n	8005d66 <UART_SetConfig+0x162>
 8005d52:	2b20      	cmp	r3, #32
 8005d54:	d810      	bhi.n	8005d78 <UART_SetConfig+0x174>
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d002      	beq.n	8005d60 <UART_SetConfig+0x15c>
 8005d5a:	2b10      	cmp	r3, #16
 8005d5c:	d006      	beq.n	8005d6c <UART_SetConfig+0x168>
 8005d5e:	e00b      	b.n	8005d78 <UART_SetConfig+0x174>
 8005d60:	2300      	movs	r3, #0
 8005d62:	77fb      	strb	r3, [r7, #31]
 8005d64:	e0f2      	b.n	8005f4c <UART_SetConfig+0x348>
 8005d66:	2302      	movs	r3, #2
 8005d68:	77fb      	strb	r3, [r7, #31]
 8005d6a:	e0ef      	b.n	8005f4c <UART_SetConfig+0x348>
 8005d6c:	2304      	movs	r3, #4
 8005d6e:	77fb      	strb	r3, [r7, #31]
 8005d70:	e0ec      	b.n	8005f4c <UART_SetConfig+0x348>
 8005d72:	2308      	movs	r3, #8
 8005d74:	77fb      	strb	r3, [r7, #31]
 8005d76:	e0e9      	b.n	8005f4c <UART_SetConfig+0x348>
 8005d78:	2310      	movs	r3, #16
 8005d7a:	77fb      	strb	r3, [r7, #31]
 8005d7c:	e0e6      	b.n	8005f4c <UART_SetConfig+0x348>
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	4a56      	ldr	r2, [pc, #344]	; (8005edc <UART_SetConfig+0x2d8>)
 8005d84:	4293      	cmp	r3, r2
 8005d86:	d120      	bne.n	8005dca <UART_SetConfig+0x1c6>
 8005d88:	4b51      	ldr	r3, [pc, #324]	; (8005ed0 <UART_SetConfig+0x2cc>)
 8005d8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d8e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005d92:	2bc0      	cmp	r3, #192	; 0xc0
 8005d94:	d013      	beq.n	8005dbe <UART_SetConfig+0x1ba>
 8005d96:	2bc0      	cmp	r3, #192	; 0xc0
 8005d98:	d814      	bhi.n	8005dc4 <UART_SetConfig+0x1c0>
 8005d9a:	2b80      	cmp	r3, #128	; 0x80
 8005d9c:	d009      	beq.n	8005db2 <UART_SetConfig+0x1ae>
 8005d9e:	2b80      	cmp	r3, #128	; 0x80
 8005da0:	d810      	bhi.n	8005dc4 <UART_SetConfig+0x1c0>
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d002      	beq.n	8005dac <UART_SetConfig+0x1a8>
 8005da6:	2b40      	cmp	r3, #64	; 0x40
 8005da8:	d006      	beq.n	8005db8 <UART_SetConfig+0x1b4>
 8005daa:	e00b      	b.n	8005dc4 <UART_SetConfig+0x1c0>
 8005dac:	2300      	movs	r3, #0
 8005dae:	77fb      	strb	r3, [r7, #31]
 8005db0:	e0cc      	b.n	8005f4c <UART_SetConfig+0x348>
 8005db2:	2302      	movs	r3, #2
 8005db4:	77fb      	strb	r3, [r7, #31]
 8005db6:	e0c9      	b.n	8005f4c <UART_SetConfig+0x348>
 8005db8:	2304      	movs	r3, #4
 8005dba:	77fb      	strb	r3, [r7, #31]
 8005dbc:	e0c6      	b.n	8005f4c <UART_SetConfig+0x348>
 8005dbe:	2308      	movs	r3, #8
 8005dc0:	77fb      	strb	r3, [r7, #31]
 8005dc2:	e0c3      	b.n	8005f4c <UART_SetConfig+0x348>
 8005dc4:	2310      	movs	r3, #16
 8005dc6:	77fb      	strb	r3, [r7, #31]
 8005dc8:	e0c0      	b.n	8005f4c <UART_SetConfig+0x348>
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	4a44      	ldr	r2, [pc, #272]	; (8005ee0 <UART_SetConfig+0x2dc>)
 8005dd0:	4293      	cmp	r3, r2
 8005dd2:	d125      	bne.n	8005e20 <UART_SetConfig+0x21c>
 8005dd4:	4b3e      	ldr	r3, [pc, #248]	; (8005ed0 <UART_SetConfig+0x2cc>)
 8005dd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005dda:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005dde:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005de2:	d017      	beq.n	8005e14 <UART_SetConfig+0x210>
 8005de4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005de8:	d817      	bhi.n	8005e1a <UART_SetConfig+0x216>
 8005dea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005dee:	d00b      	beq.n	8005e08 <UART_SetConfig+0x204>
 8005df0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005df4:	d811      	bhi.n	8005e1a <UART_SetConfig+0x216>
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d003      	beq.n	8005e02 <UART_SetConfig+0x1fe>
 8005dfa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005dfe:	d006      	beq.n	8005e0e <UART_SetConfig+0x20a>
 8005e00:	e00b      	b.n	8005e1a <UART_SetConfig+0x216>
 8005e02:	2300      	movs	r3, #0
 8005e04:	77fb      	strb	r3, [r7, #31]
 8005e06:	e0a1      	b.n	8005f4c <UART_SetConfig+0x348>
 8005e08:	2302      	movs	r3, #2
 8005e0a:	77fb      	strb	r3, [r7, #31]
 8005e0c:	e09e      	b.n	8005f4c <UART_SetConfig+0x348>
 8005e0e:	2304      	movs	r3, #4
 8005e10:	77fb      	strb	r3, [r7, #31]
 8005e12:	e09b      	b.n	8005f4c <UART_SetConfig+0x348>
 8005e14:	2308      	movs	r3, #8
 8005e16:	77fb      	strb	r3, [r7, #31]
 8005e18:	e098      	b.n	8005f4c <UART_SetConfig+0x348>
 8005e1a:	2310      	movs	r3, #16
 8005e1c:	77fb      	strb	r3, [r7, #31]
 8005e1e:	e095      	b.n	8005f4c <UART_SetConfig+0x348>
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	4a2f      	ldr	r2, [pc, #188]	; (8005ee4 <UART_SetConfig+0x2e0>)
 8005e26:	4293      	cmp	r3, r2
 8005e28:	d125      	bne.n	8005e76 <UART_SetConfig+0x272>
 8005e2a:	4b29      	ldr	r3, [pc, #164]	; (8005ed0 <UART_SetConfig+0x2cc>)
 8005e2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e30:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005e34:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005e38:	d017      	beq.n	8005e6a <UART_SetConfig+0x266>
 8005e3a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005e3e:	d817      	bhi.n	8005e70 <UART_SetConfig+0x26c>
 8005e40:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005e44:	d00b      	beq.n	8005e5e <UART_SetConfig+0x25a>
 8005e46:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005e4a:	d811      	bhi.n	8005e70 <UART_SetConfig+0x26c>
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d003      	beq.n	8005e58 <UART_SetConfig+0x254>
 8005e50:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e54:	d006      	beq.n	8005e64 <UART_SetConfig+0x260>
 8005e56:	e00b      	b.n	8005e70 <UART_SetConfig+0x26c>
 8005e58:	2301      	movs	r3, #1
 8005e5a:	77fb      	strb	r3, [r7, #31]
 8005e5c:	e076      	b.n	8005f4c <UART_SetConfig+0x348>
 8005e5e:	2302      	movs	r3, #2
 8005e60:	77fb      	strb	r3, [r7, #31]
 8005e62:	e073      	b.n	8005f4c <UART_SetConfig+0x348>
 8005e64:	2304      	movs	r3, #4
 8005e66:	77fb      	strb	r3, [r7, #31]
 8005e68:	e070      	b.n	8005f4c <UART_SetConfig+0x348>
 8005e6a:	2308      	movs	r3, #8
 8005e6c:	77fb      	strb	r3, [r7, #31]
 8005e6e:	e06d      	b.n	8005f4c <UART_SetConfig+0x348>
 8005e70:	2310      	movs	r3, #16
 8005e72:	77fb      	strb	r3, [r7, #31]
 8005e74:	e06a      	b.n	8005f4c <UART_SetConfig+0x348>
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	4a1b      	ldr	r2, [pc, #108]	; (8005ee8 <UART_SetConfig+0x2e4>)
 8005e7c:	4293      	cmp	r3, r2
 8005e7e:	d138      	bne.n	8005ef2 <UART_SetConfig+0x2ee>
 8005e80:	4b13      	ldr	r3, [pc, #76]	; (8005ed0 <UART_SetConfig+0x2cc>)
 8005e82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e86:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8005e8a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005e8e:	d017      	beq.n	8005ec0 <UART_SetConfig+0x2bc>
 8005e90:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005e94:	d82a      	bhi.n	8005eec <UART_SetConfig+0x2e8>
 8005e96:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005e9a:	d00b      	beq.n	8005eb4 <UART_SetConfig+0x2b0>
 8005e9c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ea0:	d824      	bhi.n	8005eec <UART_SetConfig+0x2e8>
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d003      	beq.n	8005eae <UART_SetConfig+0x2aa>
 8005ea6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005eaa:	d006      	beq.n	8005eba <UART_SetConfig+0x2b6>
 8005eac:	e01e      	b.n	8005eec <UART_SetConfig+0x2e8>
 8005eae:	2300      	movs	r3, #0
 8005eb0:	77fb      	strb	r3, [r7, #31]
 8005eb2:	e04b      	b.n	8005f4c <UART_SetConfig+0x348>
 8005eb4:	2302      	movs	r3, #2
 8005eb6:	77fb      	strb	r3, [r7, #31]
 8005eb8:	e048      	b.n	8005f4c <UART_SetConfig+0x348>
 8005eba:	2304      	movs	r3, #4
 8005ebc:	77fb      	strb	r3, [r7, #31]
 8005ebe:	e045      	b.n	8005f4c <UART_SetConfig+0x348>
 8005ec0:	2308      	movs	r3, #8
 8005ec2:	77fb      	strb	r3, [r7, #31]
 8005ec4:	e042      	b.n	8005f4c <UART_SetConfig+0x348>
 8005ec6:	bf00      	nop
 8005ec8:	efff69f3 	.word	0xefff69f3
 8005ecc:	40011000 	.word	0x40011000
 8005ed0:	40023800 	.word	0x40023800
 8005ed4:	40004400 	.word	0x40004400
 8005ed8:	40004800 	.word	0x40004800
 8005edc:	40004c00 	.word	0x40004c00
 8005ee0:	40005000 	.word	0x40005000
 8005ee4:	40011400 	.word	0x40011400
 8005ee8:	40007800 	.word	0x40007800
 8005eec:	2310      	movs	r3, #16
 8005eee:	77fb      	strb	r3, [r7, #31]
 8005ef0:	e02c      	b.n	8005f4c <UART_SetConfig+0x348>
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	4a72      	ldr	r2, [pc, #456]	; (80060c0 <UART_SetConfig+0x4bc>)
 8005ef8:	4293      	cmp	r3, r2
 8005efa:	d125      	bne.n	8005f48 <UART_SetConfig+0x344>
 8005efc:	4b71      	ldr	r3, [pc, #452]	; (80060c4 <UART_SetConfig+0x4c0>)
 8005efe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f02:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005f06:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005f0a:	d017      	beq.n	8005f3c <UART_SetConfig+0x338>
 8005f0c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005f10:	d817      	bhi.n	8005f42 <UART_SetConfig+0x33e>
 8005f12:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005f16:	d00b      	beq.n	8005f30 <UART_SetConfig+0x32c>
 8005f18:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005f1c:	d811      	bhi.n	8005f42 <UART_SetConfig+0x33e>
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d003      	beq.n	8005f2a <UART_SetConfig+0x326>
 8005f22:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005f26:	d006      	beq.n	8005f36 <UART_SetConfig+0x332>
 8005f28:	e00b      	b.n	8005f42 <UART_SetConfig+0x33e>
 8005f2a:	2300      	movs	r3, #0
 8005f2c:	77fb      	strb	r3, [r7, #31]
 8005f2e:	e00d      	b.n	8005f4c <UART_SetConfig+0x348>
 8005f30:	2302      	movs	r3, #2
 8005f32:	77fb      	strb	r3, [r7, #31]
 8005f34:	e00a      	b.n	8005f4c <UART_SetConfig+0x348>
 8005f36:	2304      	movs	r3, #4
 8005f38:	77fb      	strb	r3, [r7, #31]
 8005f3a:	e007      	b.n	8005f4c <UART_SetConfig+0x348>
 8005f3c:	2308      	movs	r3, #8
 8005f3e:	77fb      	strb	r3, [r7, #31]
 8005f40:	e004      	b.n	8005f4c <UART_SetConfig+0x348>
 8005f42:	2310      	movs	r3, #16
 8005f44:	77fb      	strb	r3, [r7, #31]
 8005f46:	e001      	b.n	8005f4c <UART_SetConfig+0x348>
 8005f48:	2310      	movs	r3, #16
 8005f4a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	69db      	ldr	r3, [r3, #28]
 8005f50:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005f54:	d15b      	bne.n	800600e <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8005f56:	7ffb      	ldrb	r3, [r7, #31]
 8005f58:	2b08      	cmp	r3, #8
 8005f5a:	d828      	bhi.n	8005fae <UART_SetConfig+0x3aa>
 8005f5c:	a201      	add	r2, pc, #4	; (adr r2, 8005f64 <UART_SetConfig+0x360>)
 8005f5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f62:	bf00      	nop
 8005f64:	08005f89 	.word	0x08005f89
 8005f68:	08005f91 	.word	0x08005f91
 8005f6c:	08005f99 	.word	0x08005f99
 8005f70:	08005faf 	.word	0x08005faf
 8005f74:	08005f9f 	.word	0x08005f9f
 8005f78:	08005faf 	.word	0x08005faf
 8005f7c:	08005faf 	.word	0x08005faf
 8005f80:	08005faf 	.word	0x08005faf
 8005f84:	08005fa7 	.word	0x08005fa7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005f88:	f7fd f99c 	bl	80032c4 <HAL_RCC_GetPCLK1Freq>
 8005f8c:	61b8      	str	r0, [r7, #24]
        break;
 8005f8e:	e013      	b.n	8005fb8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005f90:	f7fd f9ac 	bl	80032ec <HAL_RCC_GetPCLK2Freq>
 8005f94:	61b8      	str	r0, [r7, #24]
        break;
 8005f96:	e00f      	b.n	8005fb8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005f98:	4b4b      	ldr	r3, [pc, #300]	; (80060c8 <UART_SetConfig+0x4c4>)
 8005f9a:	61bb      	str	r3, [r7, #24]
        break;
 8005f9c:	e00c      	b.n	8005fb8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005f9e:	f7fd f8bf 	bl	8003120 <HAL_RCC_GetSysClockFreq>
 8005fa2:	61b8      	str	r0, [r7, #24]
        break;
 8005fa4:	e008      	b.n	8005fb8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005fa6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005faa:	61bb      	str	r3, [r7, #24]
        break;
 8005fac:	e004      	b.n	8005fb8 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8005fae:	2300      	movs	r3, #0
 8005fb0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005fb2:	2301      	movs	r3, #1
 8005fb4:	77bb      	strb	r3, [r7, #30]
        break;
 8005fb6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005fb8:	69bb      	ldr	r3, [r7, #24]
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d074      	beq.n	80060a8 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005fbe:	69bb      	ldr	r3, [r7, #24]
 8005fc0:	005a      	lsls	r2, r3, #1
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	685b      	ldr	r3, [r3, #4]
 8005fc6:	085b      	lsrs	r3, r3, #1
 8005fc8:	441a      	add	r2, r3
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	685b      	ldr	r3, [r3, #4]
 8005fce:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fd2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005fd4:	693b      	ldr	r3, [r7, #16]
 8005fd6:	2b0f      	cmp	r3, #15
 8005fd8:	d916      	bls.n	8006008 <UART_SetConfig+0x404>
 8005fda:	693b      	ldr	r3, [r7, #16]
 8005fdc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005fe0:	d212      	bcs.n	8006008 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005fe2:	693b      	ldr	r3, [r7, #16]
 8005fe4:	b29b      	uxth	r3, r3
 8005fe6:	f023 030f 	bic.w	r3, r3, #15
 8005fea:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005fec:	693b      	ldr	r3, [r7, #16]
 8005fee:	085b      	lsrs	r3, r3, #1
 8005ff0:	b29b      	uxth	r3, r3
 8005ff2:	f003 0307 	and.w	r3, r3, #7
 8005ff6:	b29a      	uxth	r2, r3
 8005ff8:	89fb      	ldrh	r3, [r7, #14]
 8005ffa:	4313      	orrs	r3, r2
 8005ffc:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	89fa      	ldrh	r2, [r7, #14]
 8006004:	60da      	str	r2, [r3, #12]
 8006006:	e04f      	b.n	80060a8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006008:	2301      	movs	r3, #1
 800600a:	77bb      	strb	r3, [r7, #30]
 800600c:	e04c      	b.n	80060a8 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800600e:	7ffb      	ldrb	r3, [r7, #31]
 8006010:	2b08      	cmp	r3, #8
 8006012:	d828      	bhi.n	8006066 <UART_SetConfig+0x462>
 8006014:	a201      	add	r2, pc, #4	; (adr r2, 800601c <UART_SetConfig+0x418>)
 8006016:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800601a:	bf00      	nop
 800601c:	08006041 	.word	0x08006041
 8006020:	08006049 	.word	0x08006049
 8006024:	08006051 	.word	0x08006051
 8006028:	08006067 	.word	0x08006067
 800602c:	08006057 	.word	0x08006057
 8006030:	08006067 	.word	0x08006067
 8006034:	08006067 	.word	0x08006067
 8006038:	08006067 	.word	0x08006067
 800603c:	0800605f 	.word	0x0800605f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006040:	f7fd f940 	bl	80032c4 <HAL_RCC_GetPCLK1Freq>
 8006044:	61b8      	str	r0, [r7, #24]
        break;
 8006046:	e013      	b.n	8006070 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006048:	f7fd f950 	bl	80032ec <HAL_RCC_GetPCLK2Freq>
 800604c:	61b8      	str	r0, [r7, #24]
        break;
 800604e:	e00f      	b.n	8006070 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006050:	4b1d      	ldr	r3, [pc, #116]	; (80060c8 <UART_SetConfig+0x4c4>)
 8006052:	61bb      	str	r3, [r7, #24]
        break;
 8006054:	e00c      	b.n	8006070 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006056:	f7fd f863 	bl	8003120 <HAL_RCC_GetSysClockFreq>
 800605a:	61b8      	str	r0, [r7, #24]
        break;
 800605c:	e008      	b.n	8006070 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800605e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006062:	61bb      	str	r3, [r7, #24]
        break;
 8006064:	e004      	b.n	8006070 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8006066:	2300      	movs	r3, #0
 8006068:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800606a:	2301      	movs	r3, #1
 800606c:	77bb      	strb	r3, [r7, #30]
        break;
 800606e:	bf00      	nop
    }

    if (pclk != 0U)
 8006070:	69bb      	ldr	r3, [r7, #24]
 8006072:	2b00      	cmp	r3, #0
 8006074:	d018      	beq.n	80060a8 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	685b      	ldr	r3, [r3, #4]
 800607a:	085a      	lsrs	r2, r3, #1
 800607c:	69bb      	ldr	r3, [r7, #24]
 800607e:	441a      	add	r2, r3
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	685b      	ldr	r3, [r3, #4]
 8006084:	fbb2 f3f3 	udiv	r3, r2, r3
 8006088:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800608a:	693b      	ldr	r3, [r7, #16]
 800608c:	2b0f      	cmp	r3, #15
 800608e:	d909      	bls.n	80060a4 <UART_SetConfig+0x4a0>
 8006090:	693b      	ldr	r3, [r7, #16]
 8006092:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006096:	d205      	bcs.n	80060a4 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006098:	693b      	ldr	r3, [r7, #16]
 800609a:	b29a      	uxth	r2, r3
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	60da      	str	r2, [r3, #12]
 80060a2:	e001      	b.n	80060a8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80060a4:	2301      	movs	r3, #1
 80060a6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	2200      	movs	r2, #0
 80060ac:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	2200      	movs	r2, #0
 80060b2:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80060b4:	7fbb      	ldrb	r3, [r7, #30]
}
 80060b6:	4618      	mov	r0, r3
 80060b8:	3720      	adds	r7, #32
 80060ba:	46bd      	mov	sp, r7
 80060bc:	bd80      	pop	{r7, pc}
 80060be:	bf00      	nop
 80060c0:	40007c00 	.word	0x40007c00
 80060c4:	40023800 	.word	0x40023800
 80060c8:	00f42400 	.word	0x00f42400

080060cc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80060cc:	b480      	push	{r7}
 80060ce:	b083      	sub	sp, #12
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060d8:	f003 0301 	and.w	r3, r3, #1
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d00a      	beq.n	80060f6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	685b      	ldr	r3, [r3, #4]
 80060e6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	430a      	orrs	r2, r1
 80060f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060fa:	f003 0302 	and.w	r3, r3, #2
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d00a      	beq.n	8006118 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	685b      	ldr	r3, [r3, #4]
 8006108:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	430a      	orrs	r2, r1
 8006116:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800611c:	f003 0304 	and.w	r3, r3, #4
 8006120:	2b00      	cmp	r3, #0
 8006122:	d00a      	beq.n	800613a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	685b      	ldr	r3, [r3, #4]
 800612a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	430a      	orrs	r2, r1
 8006138:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800613e:	f003 0308 	and.w	r3, r3, #8
 8006142:	2b00      	cmp	r3, #0
 8006144:	d00a      	beq.n	800615c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	685b      	ldr	r3, [r3, #4]
 800614c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	430a      	orrs	r2, r1
 800615a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006160:	f003 0310 	and.w	r3, r3, #16
 8006164:	2b00      	cmp	r3, #0
 8006166:	d00a      	beq.n	800617e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	689b      	ldr	r3, [r3, #8]
 800616e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	430a      	orrs	r2, r1
 800617c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006182:	f003 0320 	and.w	r3, r3, #32
 8006186:	2b00      	cmp	r3, #0
 8006188:	d00a      	beq.n	80061a0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	689b      	ldr	r3, [r3, #8]
 8006190:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	430a      	orrs	r2, r1
 800619e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d01a      	beq.n	80061e2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	685b      	ldr	r3, [r3, #4]
 80061b2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	430a      	orrs	r2, r1
 80061c0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061c6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80061ca:	d10a      	bne.n	80061e2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	685b      	ldr	r3, [r3, #4]
 80061d2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	430a      	orrs	r2, r1
 80061e0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d00a      	beq.n	8006204 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	685b      	ldr	r3, [r3, #4]
 80061f4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	430a      	orrs	r2, r1
 8006202:	605a      	str	r2, [r3, #4]
  }
}
 8006204:	bf00      	nop
 8006206:	370c      	adds	r7, #12
 8006208:	46bd      	mov	sp, r7
 800620a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800620e:	4770      	bx	lr

08006210 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006210:	b580      	push	{r7, lr}
 8006212:	b086      	sub	sp, #24
 8006214:	af02      	add	r7, sp, #8
 8006216:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	2200      	movs	r2, #0
 800621c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006220:	f7fb fd14 	bl	8001c4c <HAL_GetTick>
 8006224:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	f003 0308 	and.w	r3, r3, #8
 8006230:	2b08      	cmp	r3, #8
 8006232:	d10e      	bne.n	8006252 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006234:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006238:	9300      	str	r3, [sp, #0]
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	2200      	movs	r2, #0
 800623e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006242:	6878      	ldr	r0, [r7, #4]
 8006244:	f000 f817 	bl	8006276 <UART_WaitOnFlagUntilTimeout>
 8006248:	4603      	mov	r3, r0
 800624a:	2b00      	cmp	r3, #0
 800624c:	d001      	beq.n	8006252 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800624e:	2303      	movs	r3, #3
 8006250:	e00d      	b.n	800626e <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	2220      	movs	r2, #32
 8006256:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	2220      	movs	r2, #32
 800625c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	2200      	movs	r2, #0
 8006262:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	2200      	movs	r2, #0
 8006268:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800626c:	2300      	movs	r3, #0
}
 800626e:	4618      	mov	r0, r3
 8006270:	3710      	adds	r7, #16
 8006272:	46bd      	mov	sp, r7
 8006274:	bd80      	pop	{r7, pc}

08006276 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006276:	b580      	push	{r7, lr}
 8006278:	b09c      	sub	sp, #112	; 0x70
 800627a:	af00      	add	r7, sp, #0
 800627c:	60f8      	str	r0, [r7, #12]
 800627e:	60b9      	str	r1, [r7, #8]
 8006280:	603b      	str	r3, [r7, #0]
 8006282:	4613      	mov	r3, r2
 8006284:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006286:	e0a5      	b.n	80063d4 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006288:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800628a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800628e:	f000 80a1 	beq.w	80063d4 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006292:	f7fb fcdb 	bl	8001c4c <HAL_GetTick>
 8006296:	4602      	mov	r2, r0
 8006298:	683b      	ldr	r3, [r7, #0]
 800629a:	1ad3      	subs	r3, r2, r3
 800629c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800629e:	429a      	cmp	r2, r3
 80062a0:	d302      	bcc.n	80062a8 <UART_WaitOnFlagUntilTimeout+0x32>
 80062a2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d13e      	bne.n	8006326 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80062b0:	e853 3f00 	ldrex	r3, [r3]
 80062b4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80062b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80062b8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80062bc:	667b      	str	r3, [r7, #100]	; 0x64
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	461a      	mov	r2, r3
 80062c4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80062c6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80062c8:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062ca:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80062cc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80062ce:	e841 2300 	strex	r3, r2, [r1]
 80062d2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80062d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d1e6      	bne.n	80062a8 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	3308      	adds	r3, #8
 80062e0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80062e4:	e853 3f00 	ldrex	r3, [r3]
 80062e8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80062ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062ec:	f023 0301 	bic.w	r3, r3, #1
 80062f0:	663b      	str	r3, [r7, #96]	; 0x60
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	3308      	adds	r3, #8
 80062f8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80062fa:	64ba      	str	r2, [r7, #72]	; 0x48
 80062fc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062fe:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006300:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006302:	e841 2300 	strex	r3, r2, [r1]
 8006306:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006308:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800630a:	2b00      	cmp	r3, #0
 800630c:	d1e5      	bne.n	80062da <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	2220      	movs	r2, #32
 8006312:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	2220      	movs	r2, #32
 8006318:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	2200      	movs	r2, #0
 800631e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8006322:	2303      	movs	r3, #3
 8006324:	e067      	b.n	80063f6 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	f003 0304 	and.w	r3, r3, #4
 8006330:	2b00      	cmp	r3, #0
 8006332:	d04f      	beq.n	80063d4 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	69db      	ldr	r3, [r3, #28]
 800633a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800633e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006342:	d147      	bne.n	80063d4 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800634c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006354:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006356:	e853 3f00 	ldrex	r3, [r3]
 800635a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800635c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800635e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006362:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	461a      	mov	r2, r3
 800636a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800636c:	637b      	str	r3, [r7, #52]	; 0x34
 800636e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006370:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006372:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006374:	e841 2300 	strex	r3, r2, [r1]
 8006378:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800637a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800637c:	2b00      	cmp	r3, #0
 800637e:	d1e6      	bne.n	800634e <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	3308      	adds	r3, #8
 8006386:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006388:	697b      	ldr	r3, [r7, #20]
 800638a:	e853 3f00 	ldrex	r3, [r3]
 800638e:	613b      	str	r3, [r7, #16]
   return(result);
 8006390:	693b      	ldr	r3, [r7, #16]
 8006392:	f023 0301 	bic.w	r3, r3, #1
 8006396:	66bb      	str	r3, [r7, #104]	; 0x68
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	3308      	adds	r3, #8
 800639e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80063a0:	623a      	str	r2, [r7, #32]
 80063a2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063a4:	69f9      	ldr	r1, [r7, #28]
 80063a6:	6a3a      	ldr	r2, [r7, #32]
 80063a8:	e841 2300 	strex	r3, r2, [r1]
 80063ac:	61bb      	str	r3, [r7, #24]
   return(result);
 80063ae:	69bb      	ldr	r3, [r7, #24]
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d1e5      	bne.n	8006380 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	2220      	movs	r2, #32
 80063b8:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	2220      	movs	r2, #32
 80063be:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	2220      	movs	r2, #32
 80063c4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	2200      	movs	r2, #0
 80063cc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80063d0:	2303      	movs	r3, #3
 80063d2:	e010      	b.n	80063f6 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	69da      	ldr	r2, [r3, #28]
 80063da:	68bb      	ldr	r3, [r7, #8]
 80063dc:	4013      	ands	r3, r2
 80063de:	68ba      	ldr	r2, [r7, #8]
 80063e0:	429a      	cmp	r2, r3
 80063e2:	bf0c      	ite	eq
 80063e4:	2301      	moveq	r3, #1
 80063e6:	2300      	movne	r3, #0
 80063e8:	b2db      	uxtb	r3, r3
 80063ea:	461a      	mov	r2, r3
 80063ec:	79fb      	ldrb	r3, [r7, #7]
 80063ee:	429a      	cmp	r2, r3
 80063f0:	f43f af4a 	beq.w	8006288 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80063f4:	2300      	movs	r3, #0
}
 80063f6:	4618      	mov	r0, r3
 80063f8:	3770      	adds	r7, #112	; 0x70
 80063fa:	46bd      	mov	sp, r7
 80063fc:	bd80      	pop	{r7, pc}
	...

08006400 <__errno>:
 8006400:	4b01      	ldr	r3, [pc, #4]	; (8006408 <__errno+0x8>)
 8006402:	6818      	ldr	r0, [r3, #0]
 8006404:	4770      	bx	lr
 8006406:	bf00      	nop
 8006408:	2000000c 	.word	0x2000000c

0800640c <__libc_init_array>:
 800640c:	b570      	push	{r4, r5, r6, lr}
 800640e:	4d0d      	ldr	r5, [pc, #52]	; (8006444 <__libc_init_array+0x38>)
 8006410:	4c0d      	ldr	r4, [pc, #52]	; (8006448 <__libc_init_array+0x3c>)
 8006412:	1b64      	subs	r4, r4, r5
 8006414:	10a4      	asrs	r4, r4, #2
 8006416:	2600      	movs	r6, #0
 8006418:	42a6      	cmp	r6, r4
 800641a:	d109      	bne.n	8006430 <__libc_init_array+0x24>
 800641c:	4d0b      	ldr	r5, [pc, #44]	; (800644c <__libc_init_array+0x40>)
 800641e:	4c0c      	ldr	r4, [pc, #48]	; (8006450 <__libc_init_array+0x44>)
 8006420:	f002 fdc4 	bl	8008fac <_init>
 8006424:	1b64      	subs	r4, r4, r5
 8006426:	10a4      	asrs	r4, r4, #2
 8006428:	2600      	movs	r6, #0
 800642a:	42a6      	cmp	r6, r4
 800642c:	d105      	bne.n	800643a <__libc_init_array+0x2e>
 800642e:	bd70      	pop	{r4, r5, r6, pc}
 8006430:	f855 3b04 	ldr.w	r3, [r5], #4
 8006434:	4798      	blx	r3
 8006436:	3601      	adds	r6, #1
 8006438:	e7ee      	b.n	8006418 <__libc_init_array+0xc>
 800643a:	f855 3b04 	ldr.w	r3, [r5], #4
 800643e:	4798      	blx	r3
 8006440:	3601      	adds	r6, #1
 8006442:	e7f2      	b.n	800642a <__libc_init_array+0x1e>
 8006444:	080093dc 	.word	0x080093dc
 8006448:	080093dc 	.word	0x080093dc
 800644c:	080093dc 	.word	0x080093dc
 8006450:	080093e0 	.word	0x080093e0

08006454 <memset>:
 8006454:	4402      	add	r2, r0
 8006456:	4603      	mov	r3, r0
 8006458:	4293      	cmp	r3, r2
 800645a:	d100      	bne.n	800645e <memset+0xa>
 800645c:	4770      	bx	lr
 800645e:	f803 1b01 	strb.w	r1, [r3], #1
 8006462:	e7f9      	b.n	8006458 <memset+0x4>

08006464 <__cvt>:
 8006464:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006468:	ec55 4b10 	vmov	r4, r5, d0
 800646c:	2d00      	cmp	r5, #0
 800646e:	460e      	mov	r6, r1
 8006470:	4619      	mov	r1, r3
 8006472:	462b      	mov	r3, r5
 8006474:	bfbb      	ittet	lt
 8006476:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800647a:	461d      	movlt	r5, r3
 800647c:	2300      	movge	r3, #0
 800647e:	232d      	movlt	r3, #45	; 0x2d
 8006480:	700b      	strb	r3, [r1, #0]
 8006482:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006484:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006488:	4691      	mov	r9, r2
 800648a:	f023 0820 	bic.w	r8, r3, #32
 800648e:	bfbc      	itt	lt
 8006490:	4622      	movlt	r2, r4
 8006492:	4614      	movlt	r4, r2
 8006494:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006498:	d005      	beq.n	80064a6 <__cvt+0x42>
 800649a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800649e:	d100      	bne.n	80064a2 <__cvt+0x3e>
 80064a0:	3601      	adds	r6, #1
 80064a2:	2102      	movs	r1, #2
 80064a4:	e000      	b.n	80064a8 <__cvt+0x44>
 80064a6:	2103      	movs	r1, #3
 80064a8:	ab03      	add	r3, sp, #12
 80064aa:	9301      	str	r3, [sp, #4]
 80064ac:	ab02      	add	r3, sp, #8
 80064ae:	9300      	str	r3, [sp, #0]
 80064b0:	ec45 4b10 	vmov	d0, r4, r5
 80064b4:	4653      	mov	r3, sl
 80064b6:	4632      	mov	r2, r6
 80064b8:	f000 fe1a 	bl	80070f0 <_dtoa_r>
 80064bc:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80064c0:	4607      	mov	r7, r0
 80064c2:	d102      	bne.n	80064ca <__cvt+0x66>
 80064c4:	f019 0f01 	tst.w	r9, #1
 80064c8:	d022      	beq.n	8006510 <__cvt+0xac>
 80064ca:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80064ce:	eb07 0906 	add.w	r9, r7, r6
 80064d2:	d110      	bne.n	80064f6 <__cvt+0x92>
 80064d4:	783b      	ldrb	r3, [r7, #0]
 80064d6:	2b30      	cmp	r3, #48	; 0x30
 80064d8:	d10a      	bne.n	80064f0 <__cvt+0x8c>
 80064da:	2200      	movs	r2, #0
 80064dc:	2300      	movs	r3, #0
 80064de:	4620      	mov	r0, r4
 80064e0:	4629      	mov	r1, r5
 80064e2:	f7fa fb19 	bl	8000b18 <__aeabi_dcmpeq>
 80064e6:	b918      	cbnz	r0, 80064f0 <__cvt+0x8c>
 80064e8:	f1c6 0601 	rsb	r6, r6, #1
 80064ec:	f8ca 6000 	str.w	r6, [sl]
 80064f0:	f8da 3000 	ldr.w	r3, [sl]
 80064f4:	4499      	add	r9, r3
 80064f6:	2200      	movs	r2, #0
 80064f8:	2300      	movs	r3, #0
 80064fa:	4620      	mov	r0, r4
 80064fc:	4629      	mov	r1, r5
 80064fe:	f7fa fb0b 	bl	8000b18 <__aeabi_dcmpeq>
 8006502:	b108      	cbz	r0, 8006508 <__cvt+0xa4>
 8006504:	f8cd 900c 	str.w	r9, [sp, #12]
 8006508:	2230      	movs	r2, #48	; 0x30
 800650a:	9b03      	ldr	r3, [sp, #12]
 800650c:	454b      	cmp	r3, r9
 800650e:	d307      	bcc.n	8006520 <__cvt+0xbc>
 8006510:	9b03      	ldr	r3, [sp, #12]
 8006512:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006514:	1bdb      	subs	r3, r3, r7
 8006516:	4638      	mov	r0, r7
 8006518:	6013      	str	r3, [r2, #0]
 800651a:	b004      	add	sp, #16
 800651c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006520:	1c59      	adds	r1, r3, #1
 8006522:	9103      	str	r1, [sp, #12]
 8006524:	701a      	strb	r2, [r3, #0]
 8006526:	e7f0      	b.n	800650a <__cvt+0xa6>

08006528 <__exponent>:
 8006528:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800652a:	4603      	mov	r3, r0
 800652c:	2900      	cmp	r1, #0
 800652e:	bfb8      	it	lt
 8006530:	4249      	neglt	r1, r1
 8006532:	f803 2b02 	strb.w	r2, [r3], #2
 8006536:	bfb4      	ite	lt
 8006538:	222d      	movlt	r2, #45	; 0x2d
 800653a:	222b      	movge	r2, #43	; 0x2b
 800653c:	2909      	cmp	r1, #9
 800653e:	7042      	strb	r2, [r0, #1]
 8006540:	dd2a      	ble.n	8006598 <__exponent+0x70>
 8006542:	f10d 0407 	add.w	r4, sp, #7
 8006546:	46a4      	mov	ip, r4
 8006548:	270a      	movs	r7, #10
 800654a:	46a6      	mov	lr, r4
 800654c:	460a      	mov	r2, r1
 800654e:	fb91 f6f7 	sdiv	r6, r1, r7
 8006552:	fb07 1516 	mls	r5, r7, r6, r1
 8006556:	3530      	adds	r5, #48	; 0x30
 8006558:	2a63      	cmp	r2, #99	; 0x63
 800655a:	f104 34ff 	add.w	r4, r4, #4294967295
 800655e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8006562:	4631      	mov	r1, r6
 8006564:	dcf1      	bgt.n	800654a <__exponent+0x22>
 8006566:	3130      	adds	r1, #48	; 0x30
 8006568:	f1ae 0502 	sub.w	r5, lr, #2
 800656c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8006570:	1c44      	adds	r4, r0, #1
 8006572:	4629      	mov	r1, r5
 8006574:	4561      	cmp	r1, ip
 8006576:	d30a      	bcc.n	800658e <__exponent+0x66>
 8006578:	f10d 0209 	add.w	r2, sp, #9
 800657c:	eba2 020e 	sub.w	r2, r2, lr
 8006580:	4565      	cmp	r5, ip
 8006582:	bf88      	it	hi
 8006584:	2200      	movhi	r2, #0
 8006586:	4413      	add	r3, r2
 8006588:	1a18      	subs	r0, r3, r0
 800658a:	b003      	add	sp, #12
 800658c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800658e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006592:	f804 2f01 	strb.w	r2, [r4, #1]!
 8006596:	e7ed      	b.n	8006574 <__exponent+0x4c>
 8006598:	2330      	movs	r3, #48	; 0x30
 800659a:	3130      	adds	r1, #48	; 0x30
 800659c:	7083      	strb	r3, [r0, #2]
 800659e:	70c1      	strb	r1, [r0, #3]
 80065a0:	1d03      	adds	r3, r0, #4
 80065a2:	e7f1      	b.n	8006588 <__exponent+0x60>

080065a4 <_printf_float>:
 80065a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065a8:	ed2d 8b02 	vpush	{d8}
 80065ac:	b08d      	sub	sp, #52	; 0x34
 80065ae:	460c      	mov	r4, r1
 80065b0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80065b4:	4616      	mov	r6, r2
 80065b6:	461f      	mov	r7, r3
 80065b8:	4605      	mov	r5, r0
 80065ba:	f001 fd3f 	bl	800803c <_localeconv_r>
 80065be:	f8d0 a000 	ldr.w	sl, [r0]
 80065c2:	4650      	mov	r0, sl
 80065c4:	f7f9 fe2c 	bl	8000220 <strlen>
 80065c8:	2300      	movs	r3, #0
 80065ca:	930a      	str	r3, [sp, #40]	; 0x28
 80065cc:	6823      	ldr	r3, [r4, #0]
 80065ce:	9305      	str	r3, [sp, #20]
 80065d0:	f8d8 3000 	ldr.w	r3, [r8]
 80065d4:	f894 b018 	ldrb.w	fp, [r4, #24]
 80065d8:	3307      	adds	r3, #7
 80065da:	f023 0307 	bic.w	r3, r3, #7
 80065de:	f103 0208 	add.w	r2, r3, #8
 80065e2:	f8c8 2000 	str.w	r2, [r8]
 80065e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065ea:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80065ee:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80065f2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80065f6:	9307      	str	r3, [sp, #28]
 80065f8:	f8cd 8018 	str.w	r8, [sp, #24]
 80065fc:	ee08 0a10 	vmov	s16, r0
 8006600:	4b9f      	ldr	r3, [pc, #636]	; (8006880 <_printf_float+0x2dc>)
 8006602:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006606:	f04f 32ff 	mov.w	r2, #4294967295
 800660a:	f7fa fab7 	bl	8000b7c <__aeabi_dcmpun>
 800660e:	bb88      	cbnz	r0, 8006674 <_printf_float+0xd0>
 8006610:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006614:	4b9a      	ldr	r3, [pc, #616]	; (8006880 <_printf_float+0x2dc>)
 8006616:	f04f 32ff 	mov.w	r2, #4294967295
 800661a:	f7fa fa91 	bl	8000b40 <__aeabi_dcmple>
 800661e:	bb48      	cbnz	r0, 8006674 <_printf_float+0xd0>
 8006620:	2200      	movs	r2, #0
 8006622:	2300      	movs	r3, #0
 8006624:	4640      	mov	r0, r8
 8006626:	4649      	mov	r1, r9
 8006628:	f7fa fa80 	bl	8000b2c <__aeabi_dcmplt>
 800662c:	b110      	cbz	r0, 8006634 <_printf_float+0x90>
 800662e:	232d      	movs	r3, #45	; 0x2d
 8006630:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006634:	4b93      	ldr	r3, [pc, #588]	; (8006884 <_printf_float+0x2e0>)
 8006636:	4894      	ldr	r0, [pc, #592]	; (8006888 <_printf_float+0x2e4>)
 8006638:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800663c:	bf94      	ite	ls
 800663e:	4698      	movls	r8, r3
 8006640:	4680      	movhi	r8, r0
 8006642:	2303      	movs	r3, #3
 8006644:	6123      	str	r3, [r4, #16]
 8006646:	9b05      	ldr	r3, [sp, #20]
 8006648:	f023 0204 	bic.w	r2, r3, #4
 800664c:	6022      	str	r2, [r4, #0]
 800664e:	f04f 0900 	mov.w	r9, #0
 8006652:	9700      	str	r7, [sp, #0]
 8006654:	4633      	mov	r3, r6
 8006656:	aa0b      	add	r2, sp, #44	; 0x2c
 8006658:	4621      	mov	r1, r4
 800665a:	4628      	mov	r0, r5
 800665c:	f000 f9d8 	bl	8006a10 <_printf_common>
 8006660:	3001      	adds	r0, #1
 8006662:	f040 8090 	bne.w	8006786 <_printf_float+0x1e2>
 8006666:	f04f 30ff 	mov.w	r0, #4294967295
 800666a:	b00d      	add	sp, #52	; 0x34
 800666c:	ecbd 8b02 	vpop	{d8}
 8006670:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006674:	4642      	mov	r2, r8
 8006676:	464b      	mov	r3, r9
 8006678:	4640      	mov	r0, r8
 800667a:	4649      	mov	r1, r9
 800667c:	f7fa fa7e 	bl	8000b7c <__aeabi_dcmpun>
 8006680:	b140      	cbz	r0, 8006694 <_printf_float+0xf0>
 8006682:	464b      	mov	r3, r9
 8006684:	2b00      	cmp	r3, #0
 8006686:	bfbc      	itt	lt
 8006688:	232d      	movlt	r3, #45	; 0x2d
 800668a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800668e:	487f      	ldr	r0, [pc, #508]	; (800688c <_printf_float+0x2e8>)
 8006690:	4b7f      	ldr	r3, [pc, #508]	; (8006890 <_printf_float+0x2ec>)
 8006692:	e7d1      	b.n	8006638 <_printf_float+0x94>
 8006694:	6863      	ldr	r3, [r4, #4]
 8006696:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800669a:	9206      	str	r2, [sp, #24]
 800669c:	1c5a      	adds	r2, r3, #1
 800669e:	d13f      	bne.n	8006720 <_printf_float+0x17c>
 80066a0:	2306      	movs	r3, #6
 80066a2:	6063      	str	r3, [r4, #4]
 80066a4:	9b05      	ldr	r3, [sp, #20]
 80066a6:	6861      	ldr	r1, [r4, #4]
 80066a8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80066ac:	2300      	movs	r3, #0
 80066ae:	9303      	str	r3, [sp, #12]
 80066b0:	ab0a      	add	r3, sp, #40	; 0x28
 80066b2:	e9cd b301 	strd	fp, r3, [sp, #4]
 80066b6:	ab09      	add	r3, sp, #36	; 0x24
 80066b8:	ec49 8b10 	vmov	d0, r8, r9
 80066bc:	9300      	str	r3, [sp, #0]
 80066be:	6022      	str	r2, [r4, #0]
 80066c0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80066c4:	4628      	mov	r0, r5
 80066c6:	f7ff fecd 	bl	8006464 <__cvt>
 80066ca:	9b06      	ldr	r3, [sp, #24]
 80066cc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80066ce:	2b47      	cmp	r3, #71	; 0x47
 80066d0:	4680      	mov	r8, r0
 80066d2:	d108      	bne.n	80066e6 <_printf_float+0x142>
 80066d4:	1cc8      	adds	r0, r1, #3
 80066d6:	db02      	blt.n	80066de <_printf_float+0x13a>
 80066d8:	6863      	ldr	r3, [r4, #4]
 80066da:	4299      	cmp	r1, r3
 80066dc:	dd41      	ble.n	8006762 <_printf_float+0x1be>
 80066de:	f1ab 0b02 	sub.w	fp, fp, #2
 80066e2:	fa5f fb8b 	uxtb.w	fp, fp
 80066e6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80066ea:	d820      	bhi.n	800672e <_printf_float+0x18a>
 80066ec:	3901      	subs	r1, #1
 80066ee:	465a      	mov	r2, fp
 80066f0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80066f4:	9109      	str	r1, [sp, #36]	; 0x24
 80066f6:	f7ff ff17 	bl	8006528 <__exponent>
 80066fa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80066fc:	1813      	adds	r3, r2, r0
 80066fe:	2a01      	cmp	r2, #1
 8006700:	4681      	mov	r9, r0
 8006702:	6123      	str	r3, [r4, #16]
 8006704:	dc02      	bgt.n	800670c <_printf_float+0x168>
 8006706:	6822      	ldr	r2, [r4, #0]
 8006708:	07d2      	lsls	r2, r2, #31
 800670a:	d501      	bpl.n	8006710 <_printf_float+0x16c>
 800670c:	3301      	adds	r3, #1
 800670e:	6123      	str	r3, [r4, #16]
 8006710:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006714:	2b00      	cmp	r3, #0
 8006716:	d09c      	beq.n	8006652 <_printf_float+0xae>
 8006718:	232d      	movs	r3, #45	; 0x2d
 800671a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800671e:	e798      	b.n	8006652 <_printf_float+0xae>
 8006720:	9a06      	ldr	r2, [sp, #24]
 8006722:	2a47      	cmp	r2, #71	; 0x47
 8006724:	d1be      	bne.n	80066a4 <_printf_float+0x100>
 8006726:	2b00      	cmp	r3, #0
 8006728:	d1bc      	bne.n	80066a4 <_printf_float+0x100>
 800672a:	2301      	movs	r3, #1
 800672c:	e7b9      	b.n	80066a2 <_printf_float+0xfe>
 800672e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8006732:	d118      	bne.n	8006766 <_printf_float+0x1c2>
 8006734:	2900      	cmp	r1, #0
 8006736:	6863      	ldr	r3, [r4, #4]
 8006738:	dd0b      	ble.n	8006752 <_printf_float+0x1ae>
 800673a:	6121      	str	r1, [r4, #16]
 800673c:	b913      	cbnz	r3, 8006744 <_printf_float+0x1a0>
 800673e:	6822      	ldr	r2, [r4, #0]
 8006740:	07d0      	lsls	r0, r2, #31
 8006742:	d502      	bpl.n	800674a <_printf_float+0x1a6>
 8006744:	3301      	adds	r3, #1
 8006746:	440b      	add	r3, r1
 8006748:	6123      	str	r3, [r4, #16]
 800674a:	65a1      	str	r1, [r4, #88]	; 0x58
 800674c:	f04f 0900 	mov.w	r9, #0
 8006750:	e7de      	b.n	8006710 <_printf_float+0x16c>
 8006752:	b913      	cbnz	r3, 800675a <_printf_float+0x1b6>
 8006754:	6822      	ldr	r2, [r4, #0]
 8006756:	07d2      	lsls	r2, r2, #31
 8006758:	d501      	bpl.n	800675e <_printf_float+0x1ba>
 800675a:	3302      	adds	r3, #2
 800675c:	e7f4      	b.n	8006748 <_printf_float+0x1a4>
 800675e:	2301      	movs	r3, #1
 8006760:	e7f2      	b.n	8006748 <_printf_float+0x1a4>
 8006762:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8006766:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006768:	4299      	cmp	r1, r3
 800676a:	db05      	blt.n	8006778 <_printf_float+0x1d4>
 800676c:	6823      	ldr	r3, [r4, #0]
 800676e:	6121      	str	r1, [r4, #16]
 8006770:	07d8      	lsls	r0, r3, #31
 8006772:	d5ea      	bpl.n	800674a <_printf_float+0x1a6>
 8006774:	1c4b      	adds	r3, r1, #1
 8006776:	e7e7      	b.n	8006748 <_printf_float+0x1a4>
 8006778:	2900      	cmp	r1, #0
 800677a:	bfd4      	ite	le
 800677c:	f1c1 0202 	rsble	r2, r1, #2
 8006780:	2201      	movgt	r2, #1
 8006782:	4413      	add	r3, r2
 8006784:	e7e0      	b.n	8006748 <_printf_float+0x1a4>
 8006786:	6823      	ldr	r3, [r4, #0]
 8006788:	055a      	lsls	r2, r3, #21
 800678a:	d407      	bmi.n	800679c <_printf_float+0x1f8>
 800678c:	6923      	ldr	r3, [r4, #16]
 800678e:	4642      	mov	r2, r8
 8006790:	4631      	mov	r1, r6
 8006792:	4628      	mov	r0, r5
 8006794:	47b8      	blx	r7
 8006796:	3001      	adds	r0, #1
 8006798:	d12c      	bne.n	80067f4 <_printf_float+0x250>
 800679a:	e764      	b.n	8006666 <_printf_float+0xc2>
 800679c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80067a0:	f240 80e0 	bls.w	8006964 <_printf_float+0x3c0>
 80067a4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80067a8:	2200      	movs	r2, #0
 80067aa:	2300      	movs	r3, #0
 80067ac:	f7fa f9b4 	bl	8000b18 <__aeabi_dcmpeq>
 80067b0:	2800      	cmp	r0, #0
 80067b2:	d034      	beq.n	800681e <_printf_float+0x27a>
 80067b4:	4a37      	ldr	r2, [pc, #220]	; (8006894 <_printf_float+0x2f0>)
 80067b6:	2301      	movs	r3, #1
 80067b8:	4631      	mov	r1, r6
 80067ba:	4628      	mov	r0, r5
 80067bc:	47b8      	blx	r7
 80067be:	3001      	adds	r0, #1
 80067c0:	f43f af51 	beq.w	8006666 <_printf_float+0xc2>
 80067c4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80067c8:	429a      	cmp	r2, r3
 80067ca:	db02      	blt.n	80067d2 <_printf_float+0x22e>
 80067cc:	6823      	ldr	r3, [r4, #0]
 80067ce:	07d8      	lsls	r0, r3, #31
 80067d0:	d510      	bpl.n	80067f4 <_printf_float+0x250>
 80067d2:	ee18 3a10 	vmov	r3, s16
 80067d6:	4652      	mov	r2, sl
 80067d8:	4631      	mov	r1, r6
 80067da:	4628      	mov	r0, r5
 80067dc:	47b8      	blx	r7
 80067de:	3001      	adds	r0, #1
 80067e0:	f43f af41 	beq.w	8006666 <_printf_float+0xc2>
 80067e4:	f04f 0800 	mov.w	r8, #0
 80067e8:	f104 091a 	add.w	r9, r4, #26
 80067ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80067ee:	3b01      	subs	r3, #1
 80067f0:	4543      	cmp	r3, r8
 80067f2:	dc09      	bgt.n	8006808 <_printf_float+0x264>
 80067f4:	6823      	ldr	r3, [r4, #0]
 80067f6:	079b      	lsls	r3, r3, #30
 80067f8:	f100 8105 	bmi.w	8006a06 <_printf_float+0x462>
 80067fc:	68e0      	ldr	r0, [r4, #12]
 80067fe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006800:	4298      	cmp	r0, r3
 8006802:	bfb8      	it	lt
 8006804:	4618      	movlt	r0, r3
 8006806:	e730      	b.n	800666a <_printf_float+0xc6>
 8006808:	2301      	movs	r3, #1
 800680a:	464a      	mov	r2, r9
 800680c:	4631      	mov	r1, r6
 800680e:	4628      	mov	r0, r5
 8006810:	47b8      	blx	r7
 8006812:	3001      	adds	r0, #1
 8006814:	f43f af27 	beq.w	8006666 <_printf_float+0xc2>
 8006818:	f108 0801 	add.w	r8, r8, #1
 800681c:	e7e6      	b.n	80067ec <_printf_float+0x248>
 800681e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006820:	2b00      	cmp	r3, #0
 8006822:	dc39      	bgt.n	8006898 <_printf_float+0x2f4>
 8006824:	4a1b      	ldr	r2, [pc, #108]	; (8006894 <_printf_float+0x2f0>)
 8006826:	2301      	movs	r3, #1
 8006828:	4631      	mov	r1, r6
 800682a:	4628      	mov	r0, r5
 800682c:	47b8      	blx	r7
 800682e:	3001      	adds	r0, #1
 8006830:	f43f af19 	beq.w	8006666 <_printf_float+0xc2>
 8006834:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006838:	4313      	orrs	r3, r2
 800683a:	d102      	bne.n	8006842 <_printf_float+0x29e>
 800683c:	6823      	ldr	r3, [r4, #0]
 800683e:	07d9      	lsls	r1, r3, #31
 8006840:	d5d8      	bpl.n	80067f4 <_printf_float+0x250>
 8006842:	ee18 3a10 	vmov	r3, s16
 8006846:	4652      	mov	r2, sl
 8006848:	4631      	mov	r1, r6
 800684a:	4628      	mov	r0, r5
 800684c:	47b8      	blx	r7
 800684e:	3001      	adds	r0, #1
 8006850:	f43f af09 	beq.w	8006666 <_printf_float+0xc2>
 8006854:	f04f 0900 	mov.w	r9, #0
 8006858:	f104 0a1a 	add.w	sl, r4, #26
 800685c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800685e:	425b      	negs	r3, r3
 8006860:	454b      	cmp	r3, r9
 8006862:	dc01      	bgt.n	8006868 <_printf_float+0x2c4>
 8006864:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006866:	e792      	b.n	800678e <_printf_float+0x1ea>
 8006868:	2301      	movs	r3, #1
 800686a:	4652      	mov	r2, sl
 800686c:	4631      	mov	r1, r6
 800686e:	4628      	mov	r0, r5
 8006870:	47b8      	blx	r7
 8006872:	3001      	adds	r0, #1
 8006874:	f43f aef7 	beq.w	8006666 <_printf_float+0xc2>
 8006878:	f109 0901 	add.w	r9, r9, #1
 800687c:	e7ee      	b.n	800685c <_printf_float+0x2b8>
 800687e:	bf00      	nop
 8006880:	7fefffff 	.word	0x7fefffff
 8006884:	08009000 	.word	0x08009000
 8006888:	08009004 	.word	0x08009004
 800688c:	0800900c 	.word	0x0800900c
 8006890:	08009008 	.word	0x08009008
 8006894:	08009010 	.word	0x08009010
 8006898:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800689a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800689c:	429a      	cmp	r2, r3
 800689e:	bfa8      	it	ge
 80068a0:	461a      	movge	r2, r3
 80068a2:	2a00      	cmp	r2, #0
 80068a4:	4691      	mov	r9, r2
 80068a6:	dc37      	bgt.n	8006918 <_printf_float+0x374>
 80068a8:	f04f 0b00 	mov.w	fp, #0
 80068ac:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80068b0:	f104 021a 	add.w	r2, r4, #26
 80068b4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80068b6:	9305      	str	r3, [sp, #20]
 80068b8:	eba3 0309 	sub.w	r3, r3, r9
 80068bc:	455b      	cmp	r3, fp
 80068be:	dc33      	bgt.n	8006928 <_printf_float+0x384>
 80068c0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80068c4:	429a      	cmp	r2, r3
 80068c6:	db3b      	blt.n	8006940 <_printf_float+0x39c>
 80068c8:	6823      	ldr	r3, [r4, #0]
 80068ca:	07da      	lsls	r2, r3, #31
 80068cc:	d438      	bmi.n	8006940 <_printf_float+0x39c>
 80068ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80068d0:	9a05      	ldr	r2, [sp, #20]
 80068d2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80068d4:	1a9a      	subs	r2, r3, r2
 80068d6:	eba3 0901 	sub.w	r9, r3, r1
 80068da:	4591      	cmp	r9, r2
 80068dc:	bfa8      	it	ge
 80068de:	4691      	movge	r9, r2
 80068e0:	f1b9 0f00 	cmp.w	r9, #0
 80068e4:	dc35      	bgt.n	8006952 <_printf_float+0x3ae>
 80068e6:	f04f 0800 	mov.w	r8, #0
 80068ea:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80068ee:	f104 0a1a 	add.w	sl, r4, #26
 80068f2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80068f6:	1a9b      	subs	r3, r3, r2
 80068f8:	eba3 0309 	sub.w	r3, r3, r9
 80068fc:	4543      	cmp	r3, r8
 80068fe:	f77f af79 	ble.w	80067f4 <_printf_float+0x250>
 8006902:	2301      	movs	r3, #1
 8006904:	4652      	mov	r2, sl
 8006906:	4631      	mov	r1, r6
 8006908:	4628      	mov	r0, r5
 800690a:	47b8      	blx	r7
 800690c:	3001      	adds	r0, #1
 800690e:	f43f aeaa 	beq.w	8006666 <_printf_float+0xc2>
 8006912:	f108 0801 	add.w	r8, r8, #1
 8006916:	e7ec      	b.n	80068f2 <_printf_float+0x34e>
 8006918:	4613      	mov	r3, r2
 800691a:	4631      	mov	r1, r6
 800691c:	4642      	mov	r2, r8
 800691e:	4628      	mov	r0, r5
 8006920:	47b8      	blx	r7
 8006922:	3001      	adds	r0, #1
 8006924:	d1c0      	bne.n	80068a8 <_printf_float+0x304>
 8006926:	e69e      	b.n	8006666 <_printf_float+0xc2>
 8006928:	2301      	movs	r3, #1
 800692a:	4631      	mov	r1, r6
 800692c:	4628      	mov	r0, r5
 800692e:	9205      	str	r2, [sp, #20]
 8006930:	47b8      	blx	r7
 8006932:	3001      	adds	r0, #1
 8006934:	f43f ae97 	beq.w	8006666 <_printf_float+0xc2>
 8006938:	9a05      	ldr	r2, [sp, #20]
 800693a:	f10b 0b01 	add.w	fp, fp, #1
 800693e:	e7b9      	b.n	80068b4 <_printf_float+0x310>
 8006940:	ee18 3a10 	vmov	r3, s16
 8006944:	4652      	mov	r2, sl
 8006946:	4631      	mov	r1, r6
 8006948:	4628      	mov	r0, r5
 800694a:	47b8      	blx	r7
 800694c:	3001      	adds	r0, #1
 800694e:	d1be      	bne.n	80068ce <_printf_float+0x32a>
 8006950:	e689      	b.n	8006666 <_printf_float+0xc2>
 8006952:	9a05      	ldr	r2, [sp, #20]
 8006954:	464b      	mov	r3, r9
 8006956:	4442      	add	r2, r8
 8006958:	4631      	mov	r1, r6
 800695a:	4628      	mov	r0, r5
 800695c:	47b8      	blx	r7
 800695e:	3001      	adds	r0, #1
 8006960:	d1c1      	bne.n	80068e6 <_printf_float+0x342>
 8006962:	e680      	b.n	8006666 <_printf_float+0xc2>
 8006964:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006966:	2a01      	cmp	r2, #1
 8006968:	dc01      	bgt.n	800696e <_printf_float+0x3ca>
 800696a:	07db      	lsls	r3, r3, #31
 800696c:	d538      	bpl.n	80069e0 <_printf_float+0x43c>
 800696e:	2301      	movs	r3, #1
 8006970:	4642      	mov	r2, r8
 8006972:	4631      	mov	r1, r6
 8006974:	4628      	mov	r0, r5
 8006976:	47b8      	blx	r7
 8006978:	3001      	adds	r0, #1
 800697a:	f43f ae74 	beq.w	8006666 <_printf_float+0xc2>
 800697e:	ee18 3a10 	vmov	r3, s16
 8006982:	4652      	mov	r2, sl
 8006984:	4631      	mov	r1, r6
 8006986:	4628      	mov	r0, r5
 8006988:	47b8      	blx	r7
 800698a:	3001      	adds	r0, #1
 800698c:	f43f ae6b 	beq.w	8006666 <_printf_float+0xc2>
 8006990:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006994:	2200      	movs	r2, #0
 8006996:	2300      	movs	r3, #0
 8006998:	f7fa f8be 	bl	8000b18 <__aeabi_dcmpeq>
 800699c:	b9d8      	cbnz	r0, 80069d6 <_printf_float+0x432>
 800699e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80069a0:	f108 0201 	add.w	r2, r8, #1
 80069a4:	3b01      	subs	r3, #1
 80069a6:	4631      	mov	r1, r6
 80069a8:	4628      	mov	r0, r5
 80069aa:	47b8      	blx	r7
 80069ac:	3001      	adds	r0, #1
 80069ae:	d10e      	bne.n	80069ce <_printf_float+0x42a>
 80069b0:	e659      	b.n	8006666 <_printf_float+0xc2>
 80069b2:	2301      	movs	r3, #1
 80069b4:	4652      	mov	r2, sl
 80069b6:	4631      	mov	r1, r6
 80069b8:	4628      	mov	r0, r5
 80069ba:	47b8      	blx	r7
 80069bc:	3001      	adds	r0, #1
 80069be:	f43f ae52 	beq.w	8006666 <_printf_float+0xc2>
 80069c2:	f108 0801 	add.w	r8, r8, #1
 80069c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80069c8:	3b01      	subs	r3, #1
 80069ca:	4543      	cmp	r3, r8
 80069cc:	dcf1      	bgt.n	80069b2 <_printf_float+0x40e>
 80069ce:	464b      	mov	r3, r9
 80069d0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80069d4:	e6dc      	b.n	8006790 <_printf_float+0x1ec>
 80069d6:	f04f 0800 	mov.w	r8, #0
 80069da:	f104 0a1a 	add.w	sl, r4, #26
 80069de:	e7f2      	b.n	80069c6 <_printf_float+0x422>
 80069e0:	2301      	movs	r3, #1
 80069e2:	4642      	mov	r2, r8
 80069e4:	e7df      	b.n	80069a6 <_printf_float+0x402>
 80069e6:	2301      	movs	r3, #1
 80069e8:	464a      	mov	r2, r9
 80069ea:	4631      	mov	r1, r6
 80069ec:	4628      	mov	r0, r5
 80069ee:	47b8      	blx	r7
 80069f0:	3001      	adds	r0, #1
 80069f2:	f43f ae38 	beq.w	8006666 <_printf_float+0xc2>
 80069f6:	f108 0801 	add.w	r8, r8, #1
 80069fa:	68e3      	ldr	r3, [r4, #12]
 80069fc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80069fe:	1a5b      	subs	r3, r3, r1
 8006a00:	4543      	cmp	r3, r8
 8006a02:	dcf0      	bgt.n	80069e6 <_printf_float+0x442>
 8006a04:	e6fa      	b.n	80067fc <_printf_float+0x258>
 8006a06:	f04f 0800 	mov.w	r8, #0
 8006a0a:	f104 0919 	add.w	r9, r4, #25
 8006a0e:	e7f4      	b.n	80069fa <_printf_float+0x456>

08006a10 <_printf_common>:
 8006a10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006a14:	4616      	mov	r6, r2
 8006a16:	4699      	mov	r9, r3
 8006a18:	688a      	ldr	r2, [r1, #8]
 8006a1a:	690b      	ldr	r3, [r1, #16]
 8006a1c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006a20:	4293      	cmp	r3, r2
 8006a22:	bfb8      	it	lt
 8006a24:	4613      	movlt	r3, r2
 8006a26:	6033      	str	r3, [r6, #0]
 8006a28:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006a2c:	4607      	mov	r7, r0
 8006a2e:	460c      	mov	r4, r1
 8006a30:	b10a      	cbz	r2, 8006a36 <_printf_common+0x26>
 8006a32:	3301      	adds	r3, #1
 8006a34:	6033      	str	r3, [r6, #0]
 8006a36:	6823      	ldr	r3, [r4, #0]
 8006a38:	0699      	lsls	r1, r3, #26
 8006a3a:	bf42      	ittt	mi
 8006a3c:	6833      	ldrmi	r3, [r6, #0]
 8006a3e:	3302      	addmi	r3, #2
 8006a40:	6033      	strmi	r3, [r6, #0]
 8006a42:	6825      	ldr	r5, [r4, #0]
 8006a44:	f015 0506 	ands.w	r5, r5, #6
 8006a48:	d106      	bne.n	8006a58 <_printf_common+0x48>
 8006a4a:	f104 0a19 	add.w	sl, r4, #25
 8006a4e:	68e3      	ldr	r3, [r4, #12]
 8006a50:	6832      	ldr	r2, [r6, #0]
 8006a52:	1a9b      	subs	r3, r3, r2
 8006a54:	42ab      	cmp	r3, r5
 8006a56:	dc26      	bgt.n	8006aa6 <_printf_common+0x96>
 8006a58:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006a5c:	1e13      	subs	r3, r2, #0
 8006a5e:	6822      	ldr	r2, [r4, #0]
 8006a60:	bf18      	it	ne
 8006a62:	2301      	movne	r3, #1
 8006a64:	0692      	lsls	r2, r2, #26
 8006a66:	d42b      	bmi.n	8006ac0 <_printf_common+0xb0>
 8006a68:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006a6c:	4649      	mov	r1, r9
 8006a6e:	4638      	mov	r0, r7
 8006a70:	47c0      	blx	r8
 8006a72:	3001      	adds	r0, #1
 8006a74:	d01e      	beq.n	8006ab4 <_printf_common+0xa4>
 8006a76:	6823      	ldr	r3, [r4, #0]
 8006a78:	68e5      	ldr	r5, [r4, #12]
 8006a7a:	6832      	ldr	r2, [r6, #0]
 8006a7c:	f003 0306 	and.w	r3, r3, #6
 8006a80:	2b04      	cmp	r3, #4
 8006a82:	bf08      	it	eq
 8006a84:	1aad      	subeq	r5, r5, r2
 8006a86:	68a3      	ldr	r3, [r4, #8]
 8006a88:	6922      	ldr	r2, [r4, #16]
 8006a8a:	bf0c      	ite	eq
 8006a8c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006a90:	2500      	movne	r5, #0
 8006a92:	4293      	cmp	r3, r2
 8006a94:	bfc4      	itt	gt
 8006a96:	1a9b      	subgt	r3, r3, r2
 8006a98:	18ed      	addgt	r5, r5, r3
 8006a9a:	2600      	movs	r6, #0
 8006a9c:	341a      	adds	r4, #26
 8006a9e:	42b5      	cmp	r5, r6
 8006aa0:	d11a      	bne.n	8006ad8 <_printf_common+0xc8>
 8006aa2:	2000      	movs	r0, #0
 8006aa4:	e008      	b.n	8006ab8 <_printf_common+0xa8>
 8006aa6:	2301      	movs	r3, #1
 8006aa8:	4652      	mov	r2, sl
 8006aaa:	4649      	mov	r1, r9
 8006aac:	4638      	mov	r0, r7
 8006aae:	47c0      	blx	r8
 8006ab0:	3001      	adds	r0, #1
 8006ab2:	d103      	bne.n	8006abc <_printf_common+0xac>
 8006ab4:	f04f 30ff 	mov.w	r0, #4294967295
 8006ab8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006abc:	3501      	adds	r5, #1
 8006abe:	e7c6      	b.n	8006a4e <_printf_common+0x3e>
 8006ac0:	18e1      	adds	r1, r4, r3
 8006ac2:	1c5a      	adds	r2, r3, #1
 8006ac4:	2030      	movs	r0, #48	; 0x30
 8006ac6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006aca:	4422      	add	r2, r4
 8006acc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006ad0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006ad4:	3302      	adds	r3, #2
 8006ad6:	e7c7      	b.n	8006a68 <_printf_common+0x58>
 8006ad8:	2301      	movs	r3, #1
 8006ada:	4622      	mov	r2, r4
 8006adc:	4649      	mov	r1, r9
 8006ade:	4638      	mov	r0, r7
 8006ae0:	47c0      	blx	r8
 8006ae2:	3001      	adds	r0, #1
 8006ae4:	d0e6      	beq.n	8006ab4 <_printf_common+0xa4>
 8006ae6:	3601      	adds	r6, #1
 8006ae8:	e7d9      	b.n	8006a9e <_printf_common+0x8e>
	...

08006aec <_printf_i>:
 8006aec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006af0:	7e0f      	ldrb	r7, [r1, #24]
 8006af2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006af4:	2f78      	cmp	r7, #120	; 0x78
 8006af6:	4691      	mov	r9, r2
 8006af8:	4680      	mov	r8, r0
 8006afa:	460c      	mov	r4, r1
 8006afc:	469a      	mov	sl, r3
 8006afe:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006b02:	d807      	bhi.n	8006b14 <_printf_i+0x28>
 8006b04:	2f62      	cmp	r7, #98	; 0x62
 8006b06:	d80a      	bhi.n	8006b1e <_printf_i+0x32>
 8006b08:	2f00      	cmp	r7, #0
 8006b0a:	f000 80d8 	beq.w	8006cbe <_printf_i+0x1d2>
 8006b0e:	2f58      	cmp	r7, #88	; 0x58
 8006b10:	f000 80a3 	beq.w	8006c5a <_printf_i+0x16e>
 8006b14:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006b18:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006b1c:	e03a      	b.n	8006b94 <_printf_i+0xa8>
 8006b1e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006b22:	2b15      	cmp	r3, #21
 8006b24:	d8f6      	bhi.n	8006b14 <_printf_i+0x28>
 8006b26:	a101      	add	r1, pc, #4	; (adr r1, 8006b2c <_printf_i+0x40>)
 8006b28:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006b2c:	08006b85 	.word	0x08006b85
 8006b30:	08006b99 	.word	0x08006b99
 8006b34:	08006b15 	.word	0x08006b15
 8006b38:	08006b15 	.word	0x08006b15
 8006b3c:	08006b15 	.word	0x08006b15
 8006b40:	08006b15 	.word	0x08006b15
 8006b44:	08006b99 	.word	0x08006b99
 8006b48:	08006b15 	.word	0x08006b15
 8006b4c:	08006b15 	.word	0x08006b15
 8006b50:	08006b15 	.word	0x08006b15
 8006b54:	08006b15 	.word	0x08006b15
 8006b58:	08006ca5 	.word	0x08006ca5
 8006b5c:	08006bc9 	.word	0x08006bc9
 8006b60:	08006c87 	.word	0x08006c87
 8006b64:	08006b15 	.word	0x08006b15
 8006b68:	08006b15 	.word	0x08006b15
 8006b6c:	08006cc7 	.word	0x08006cc7
 8006b70:	08006b15 	.word	0x08006b15
 8006b74:	08006bc9 	.word	0x08006bc9
 8006b78:	08006b15 	.word	0x08006b15
 8006b7c:	08006b15 	.word	0x08006b15
 8006b80:	08006c8f 	.word	0x08006c8f
 8006b84:	682b      	ldr	r3, [r5, #0]
 8006b86:	1d1a      	adds	r2, r3, #4
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	602a      	str	r2, [r5, #0]
 8006b8c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006b90:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006b94:	2301      	movs	r3, #1
 8006b96:	e0a3      	b.n	8006ce0 <_printf_i+0x1f4>
 8006b98:	6820      	ldr	r0, [r4, #0]
 8006b9a:	6829      	ldr	r1, [r5, #0]
 8006b9c:	0606      	lsls	r6, r0, #24
 8006b9e:	f101 0304 	add.w	r3, r1, #4
 8006ba2:	d50a      	bpl.n	8006bba <_printf_i+0xce>
 8006ba4:	680e      	ldr	r6, [r1, #0]
 8006ba6:	602b      	str	r3, [r5, #0]
 8006ba8:	2e00      	cmp	r6, #0
 8006baa:	da03      	bge.n	8006bb4 <_printf_i+0xc8>
 8006bac:	232d      	movs	r3, #45	; 0x2d
 8006bae:	4276      	negs	r6, r6
 8006bb0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006bb4:	485e      	ldr	r0, [pc, #376]	; (8006d30 <_printf_i+0x244>)
 8006bb6:	230a      	movs	r3, #10
 8006bb8:	e019      	b.n	8006bee <_printf_i+0x102>
 8006bba:	680e      	ldr	r6, [r1, #0]
 8006bbc:	602b      	str	r3, [r5, #0]
 8006bbe:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006bc2:	bf18      	it	ne
 8006bc4:	b236      	sxthne	r6, r6
 8006bc6:	e7ef      	b.n	8006ba8 <_printf_i+0xbc>
 8006bc8:	682b      	ldr	r3, [r5, #0]
 8006bca:	6820      	ldr	r0, [r4, #0]
 8006bcc:	1d19      	adds	r1, r3, #4
 8006bce:	6029      	str	r1, [r5, #0]
 8006bd0:	0601      	lsls	r1, r0, #24
 8006bd2:	d501      	bpl.n	8006bd8 <_printf_i+0xec>
 8006bd4:	681e      	ldr	r6, [r3, #0]
 8006bd6:	e002      	b.n	8006bde <_printf_i+0xf2>
 8006bd8:	0646      	lsls	r6, r0, #25
 8006bda:	d5fb      	bpl.n	8006bd4 <_printf_i+0xe8>
 8006bdc:	881e      	ldrh	r6, [r3, #0]
 8006bde:	4854      	ldr	r0, [pc, #336]	; (8006d30 <_printf_i+0x244>)
 8006be0:	2f6f      	cmp	r7, #111	; 0x6f
 8006be2:	bf0c      	ite	eq
 8006be4:	2308      	moveq	r3, #8
 8006be6:	230a      	movne	r3, #10
 8006be8:	2100      	movs	r1, #0
 8006bea:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006bee:	6865      	ldr	r5, [r4, #4]
 8006bf0:	60a5      	str	r5, [r4, #8]
 8006bf2:	2d00      	cmp	r5, #0
 8006bf4:	bfa2      	ittt	ge
 8006bf6:	6821      	ldrge	r1, [r4, #0]
 8006bf8:	f021 0104 	bicge.w	r1, r1, #4
 8006bfc:	6021      	strge	r1, [r4, #0]
 8006bfe:	b90e      	cbnz	r6, 8006c04 <_printf_i+0x118>
 8006c00:	2d00      	cmp	r5, #0
 8006c02:	d04d      	beq.n	8006ca0 <_printf_i+0x1b4>
 8006c04:	4615      	mov	r5, r2
 8006c06:	fbb6 f1f3 	udiv	r1, r6, r3
 8006c0a:	fb03 6711 	mls	r7, r3, r1, r6
 8006c0e:	5dc7      	ldrb	r7, [r0, r7]
 8006c10:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006c14:	4637      	mov	r7, r6
 8006c16:	42bb      	cmp	r3, r7
 8006c18:	460e      	mov	r6, r1
 8006c1a:	d9f4      	bls.n	8006c06 <_printf_i+0x11a>
 8006c1c:	2b08      	cmp	r3, #8
 8006c1e:	d10b      	bne.n	8006c38 <_printf_i+0x14c>
 8006c20:	6823      	ldr	r3, [r4, #0]
 8006c22:	07de      	lsls	r6, r3, #31
 8006c24:	d508      	bpl.n	8006c38 <_printf_i+0x14c>
 8006c26:	6923      	ldr	r3, [r4, #16]
 8006c28:	6861      	ldr	r1, [r4, #4]
 8006c2a:	4299      	cmp	r1, r3
 8006c2c:	bfde      	ittt	le
 8006c2e:	2330      	movle	r3, #48	; 0x30
 8006c30:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006c34:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006c38:	1b52      	subs	r2, r2, r5
 8006c3a:	6122      	str	r2, [r4, #16]
 8006c3c:	f8cd a000 	str.w	sl, [sp]
 8006c40:	464b      	mov	r3, r9
 8006c42:	aa03      	add	r2, sp, #12
 8006c44:	4621      	mov	r1, r4
 8006c46:	4640      	mov	r0, r8
 8006c48:	f7ff fee2 	bl	8006a10 <_printf_common>
 8006c4c:	3001      	adds	r0, #1
 8006c4e:	d14c      	bne.n	8006cea <_printf_i+0x1fe>
 8006c50:	f04f 30ff 	mov.w	r0, #4294967295
 8006c54:	b004      	add	sp, #16
 8006c56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c5a:	4835      	ldr	r0, [pc, #212]	; (8006d30 <_printf_i+0x244>)
 8006c5c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006c60:	6829      	ldr	r1, [r5, #0]
 8006c62:	6823      	ldr	r3, [r4, #0]
 8006c64:	f851 6b04 	ldr.w	r6, [r1], #4
 8006c68:	6029      	str	r1, [r5, #0]
 8006c6a:	061d      	lsls	r5, r3, #24
 8006c6c:	d514      	bpl.n	8006c98 <_printf_i+0x1ac>
 8006c6e:	07df      	lsls	r7, r3, #31
 8006c70:	bf44      	itt	mi
 8006c72:	f043 0320 	orrmi.w	r3, r3, #32
 8006c76:	6023      	strmi	r3, [r4, #0]
 8006c78:	b91e      	cbnz	r6, 8006c82 <_printf_i+0x196>
 8006c7a:	6823      	ldr	r3, [r4, #0]
 8006c7c:	f023 0320 	bic.w	r3, r3, #32
 8006c80:	6023      	str	r3, [r4, #0]
 8006c82:	2310      	movs	r3, #16
 8006c84:	e7b0      	b.n	8006be8 <_printf_i+0xfc>
 8006c86:	6823      	ldr	r3, [r4, #0]
 8006c88:	f043 0320 	orr.w	r3, r3, #32
 8006c8c:	6023      	str	r3, [r4, #0]
 8006c8e:	2378      	movs	r3, #120	; 0x78
 8006c90:	4828      	ldr	r0, [pc, #160]	; (8006d34 <_printf_i+0x248>)
 8006c92:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006c96:	e7e3      	b.n	8006c60 <_printf_i+0x174>
 8006c98:	0659      	lsls	r1, r3, #25
 8006c9a:	bf48      	it	mi
 8006c9c:	b2b6      	uxthmi	r6, r6
 8006c9e:	e7e6      	b.n	8006c6e <_printf_i+0x182>
 8006ca0:	4615      	mov	r5, r2
 8006ca2:	e7bb      	b.n	8006c1c <_printf_i+0x130>
 8006ca4:	682b      	ldr	r3, [r5, #0]
 8006ca6:	6826      	ldr	r6, [r4, #0]
 8006ca8:	6961      	ldr	r1, [r4, #20]
 8006caa:	1d18      	adds	r0, r3, #4
 8006cac:	6028      	str	r0, [r5, #0]
 8006cae:	0635      	lsls	r5, r6, #24
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	d501      	bpl.n	8006cb8 <_printf_i+0x1cc>
 8006cb4:	6019      	str	r1, [r3, #0]
 8006cb6:	e002      	b.n	8006cbe <_printf_i+0x1d2>
 8006cb8:	0670      	lsls	r0, r6, #25
 8006cba:	d5fb      	bpl.n	8006cb4 <_printf_i+0x1c8>
 8006cbc:	8019      	strh	r1, [r3, #0]
 8006cbe:	2300      	movs	r3, #0
 8006cc0:	6123      	str	r3, [r4, #16]
 8006cc2:	4615      	mov	r5, r2
 8006cc4:	e7ba      	b.n	8006c3c <_printf_i+0x150>
 8006cc6:	682b      	ldr	r3, [r5, #0]
 8006cc8:	1d1a      	adds	r2, r3, #4
 8006cca:	602a      	str	r2, [r5, #0]
 8006ccc:	681d      	ldr	r5, [r3, #0]
 8006cce:	6862      	ldr	r2, [r4, #4]
 8006cd0:	2100      	movs	r1, #0
 8006cd2:	4628      	mov	r0, r5
 8006cd4:	f7f9 faac 	bl	8000230 <memchr>
 8006cd8:	b108      	cbz	r0, 8006cde <_printf_i+0x1f2>
 8006cda:	1b40      	subs	r0, r0, r5
 8006cdc:	6060      	str	r0, [r4, #4]
 8006cde:	6863      	ldr	r3, [r4, #4]
 8006ce0:	6123      	str	r3, [r4, #16]
 8006ce2:	2300      	movs	r3, #0
 8006ce4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006ce8:	e7a8      	b.n	8006c3c <_printf_i+0x150>
 8006cea:	6923      	ldr	r3, [r4, #16]
 8006cec:	462a      	mov	r2, r5
 8006cee:	4649      	mov	r1, r9
 8006cf0:	4640      	mov	r0, r8
 8006cf2:	47d0      	blx	sl
 8006cf4:	3001      	adds	r0, #1
 8006cf6:	d0ab      	beq.n	8006c50 <_printf_i+0x164>
 8006cf8:	6823      	ldr	r3, [r4, #0]
 8006cfa:	079b      	lsls	r3, r3, #30
 8006cfc:	d413      	bmi.n	8006d26 <_printf_i+0x23a>
 8006cfe:	68e0      	ldr	r0, [r4, #12]
 8006d00:	9b03      	ldr	r3, [sp, #12]
 8006d02:	4298      	cmp	r0, r3
 8006d04:	bfb8      	it	lt
 8006d06:	4618      	movlt	r0, r3
 8006d08:	e7a4      	b.n	8006c54 <_printf_i+0x168>
 8006d0a:	2301      	movs	r3, #1
 8006d0c:	4632      	mov	r2, r6
 8006d0e:	4649      	mov	r1, r9
 8006d10:	4640      	mov	r0, r8
 8006d12:	47d0      	blx	sl
 8006d14:	3001      	adds	r0, #1
 8006d16:	d09b      	beq.n	8006c50 <_printf_i+0x164>
 8006d18:	3501      	adds	r5, #1
 8006d1a:	68e3      	ldr	r3, [r4, #12]
 8006d1c:	9903      	ldr	r1, [sp, #12]
 8006d1e:	1a5b      	subs	r3, r3, r1
 8006d20:	42ab      	cmp	r3, r5
 8006d22:	dcf2      	bgt.n	8006d0a <_printf_i+0x21e>
 8006d24:	e7eb      	b.n	8006cfe <_printf_i+0x212>
 8006d26:	2500      	movs	r5, #0
 8006d28:	f104 0619 	add.w	r6, r4, #25
 8006d2c:	e7f5      	b.n	8006d1a <_printf_i+0x22e>
 8006d2e:	bf00      	nop
 8006d30:	08009012 	.word	0x08009012
 8006d34:	08009023 	.word	0x08009023

08006d38 <iprintf>:
 8006d38:	b40f      	push	{r0, r1, r2, r3}
 8006d3a:	4b0a      	ldr	r3, [pc, #40]	; (8006d64 <iprintf+0x2c>)
 8006d3c:	b513      	push	{r0, r1, r4, lr}
 8006d3e:	681c      	ldr	r4, [r3, #0]
 8006d40:	b124      	cbz	r4, 8006d4c <iprintf+0x14>
 8006d42:	69a3      	ldr	r3, [r4, #24]
 8006d44:	b913      	cbnz	r3, 8006d4c <iprintf+0x14>
 8006d46:	4620      	mov	r0, r4
 8006d48:	f001 f8da 	bl	8007f00 <__sinit>
 8006d4c:	ab05      	add	r3, sp, #20
 8006d4e:	9a04      	ldr	r2, [sp, #16]
 8006d50:	68a1      	ldr	r1, [r4, #8]
 8006d52:	9301      	str	r3, [sp, #4]
 8006d54:	4620      	mov	r0, r4
 8006d56:	f001 fe97 	bl	8008a88 <_vfiprintf_r>
 8006d5a:	b002      	add	sp, #8
 8006d5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006d60:	b004      	add	sp, #16
 8006d62:	4770      	bx	lr
 8006d64:	2000000c 	.word	0x2000000c

08006d68 <_puts_r>:
 8006d68:	b570      	push	{r4, r5, r6, lr}
 8006d6a:	460e      	mov	r6, r1
 8006d6c:	4605      	mov	r5, r0
 8006d6e:	b118      	cbz	r0, 8006d78 <_puts_r+0x10>
 8006d70:	6983      	ldr	r3, [r0, #24]
 8006d72:	b90b      	cbnz	r3, 8006d78 <_puts_r+0x10>
 8006d74:	f001 f8c4 	bl	8007f00 <__sinit>
 8006d78:	69ab      	ldr	r3, [r5, #24]
 8006d7a:	68ac      	ldr	r4, [r5, #8]
 8006d7c:	b913      	cbnz	r3, 8006d84 <_puts_r+0x1c>
 8006d7e:	4628      	mov	r0, r5
 8006d80:	f001 f8be 	bl	8007f00 <__sinit>
 8006d84:	4b2c      	ldr	r3, [pc, #176]	; (8006e38 <_puts_r+0xd0>)
 8006d86:	429c      	cmp	r4, r3
 8006d88:	d120      	bne.n	8006dcc <_puts_r+0x64>
 8006d8a:	686c      	ldr	r4, [r5, #4]
 8006d8c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006d8e:	07db      	lsls	r3, r3, #31
 8006d90:	d405      	bmi.n	8006d9e <_puts_r+0x36>
 8006d92:	89a3      	ldrh	r3, [r4, #12]
 8006d94:	0598      	lsls	r0, r3, #22
 8006d96:	d402      	bmi.n	8006d9e <_puts_r+0x36>
 8006d98:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006d9a:	f001 f954 	bl	8008046 <__retarget_lock_acquire_recursive>
 8006d9e:	89a3      	ldrh	r3, [r4, #12]
 8006da0:	0719      	lsls	r1, r3, #28
 8006da2:	d51d      	bpl.n	8006de0 <_puts_r+0x78>
 8006da4:	6923      	ldr	r3, [r4, #16]
 8006da6:	b1db      	cbz	r3, 8006de0 <_puts_r+0x78>
 8006da8:	3e01      	subs	r6, #1
 8006daa:	68a3      	ldr	r3, [r4, #8]
 8006dac:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006db0:	3b01      	subs	r3, #1
 8006db2:	60a3      	str	r3, [r4, #8]
 8006db4:	bb39      	cbnz	r1, 8006e06 <_puts_r+0x9e>
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	da38      	bge.n	8006e2c <_puts_r+0xc4>
 8006dba:	4622      	mov	r2, r4
 8006dbc:	210a      	movs	r1, #10
 8006dbe:	4628      	mov	r0, r5
 8006dc0:	f000 f848 	bl	8006e54 <__swbuf_r>
 8006dc4:	3001      	adds	r0, #1
 8006dc6:	d011      	beq.n	8006dec <_puts_r+0x84>
 8006dc8:	250a      	movs	r5, #10
 8006dca:	e011      	b.n	8006df0 <_puts_r+0x88>
 8006dcc:	4b1b      	ldr	r3, [pc, #108]	; (8006e3c <_puts_r+0xd4>)
 8006dce:	429c      	cmp	r4, r3
 8006dd0:	d101      	bne.n	8006dd6 <_puts_r+0x6e>
 8006dd2:	68ac      	ldr	r4, [r5, #8]
 8006dd4:	e7da      	b.n	8006d8c <_puts_r+0x24>
 8006dd6:	4b1a      	ldr	r3, [pc, #104]	; (8006e40 <_puts_r+0xd8>)
 8006dd8:	429c      	cmp	r4, r3
 8006dda:	bf08      	it	eq
 8006ddc:	68ec      	ldreq	r4, [r5, #12]
 8006dde:	e7d5      	b.n	8006d8c <_puts_r+0x24>
 8006de0:	4621      	mov	r1, r4
 8006de2:	4628      	mov	r0, r5
 8006de4:	f000 f888 	bl	8006ef8 <__swsetup_r>
 8006de8:	2800      	cmp	r0, #0
 8006dea:	d0dd      	beq.n	8006da8 <_puts_r+0x40>
 8006dec:	f04f 35ff 	mov.w	r5, #4294967295
 8006df0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006df2:	07da      	lsls	r2, r3, #31
 8006df4:	d405      	bmi.n	8006e02 <_puts_r+0x9a>
 8006df6:	89a3      	ldrh	r3, [r4, #12]
 8006df8:	059b      	lsls	r3, r3, #22
 8006dfa:	d402      	bmi.n	8006e02 <_puts_r+0x9a>
 8006dfc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006dfe:	f001 f923 	bl	8008048 <__retarget_lock_release_recursive>
 8006e02:	4628      	mov	r0, r5
 8006e04:	bd70      	pop	{r4, r5, r6, pc}
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	da04      	bge.n	8006e14 <_puts_r+0xac>
 8006e0a:	69a2      	ldr	r2, [r4, #24]
 8006e0c:	429a      	cmp	r2, r3
 8006e0e:	dc06      	bgt.n	8006e1e <_puts_r+0xb6>
 8006e10:	290a      	cmp	r1, #10
 8006e12:	d004      	beq.n	8006e1e <_puts_r+0xb6>
 8006e14:	6823      	ldr	r3, [r4, #0]
 8006e16:	1c5a      	adds	r2, r3, #1
 8006e18:	6022      	str	r2, [r4, #0]
 8006e1a:	7019      	strb	r1, [r3, #0]
 8006e1c:	e7c5      	b.n	8006daa <_puts_r+0x42>
 8006e1e:	4622      	mov	r2, r4
 8006e20:	4628      	mov	r0, r5
 8006e22:	f000 f817 	bl	8006e54 <__swbuf_r>
 8006e26:	3001      	adds	r0, #1
 8006e28:	d1bf      	bne.n	8006daa <_puts_r+0x42>
 8006e2a:	e7df      	b.n	8006dec <_puts_r+0x84>
 8006e2c:	6823      	ldr	r3, [r4, #0]
 8006e2e:	250a      	movs	r5, #10
 8006e30:	1c5a      	adds	r2, r3, #1
 8006e32:	6022      	str	r2, [r4, #0]
 8006e34:	701d      	strb	r5, [r3, #0]
 8006e36:	e7db      	b.n	8006df0 <_puts_r+0x88>
 8006e38:	080090e4 	.word	0x080090e4
 8006e3c:	08009104 	.word	0x08009104
 8006e40:	080090c4 	.word	0x080090c4

08006e44 <puts>:
 8006e44:	4b02      	ldr	r3, [pc, #8]	; (8006e50 <puts+0xc>)
 8006e46:	4601      	mov	r1, r0
 8006e48:	6818      	ldr	r0, [r3, #0]
 8006e4a:	f7ff bf8d 	b.w	8006d68 <_puts_r>
 8006e4e:	bf00      	nop
 8006e50:	2000000c 	.word	0x2000000c

08006e54 <__swbuf_r>:
 8006e54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e56:	460e      	mov	r6, r1
 8006e58:	4614      	mov	r4, r2
 8006e5a:	4605      	mov	r5, r0
 8006e5c:	b118      	cbz	r0, 8006e66 <__swbuf_r+0x12>
 8006e5e:	6983      	ldr	r3, [r0, #24]
 8006e60:	b90b      	cbnz	r3, 8006e66 <__swbuf_r+0x12>
 8006e62:	f001 f84d 	bl	8007f00 <__sinit>
 8006e66:	4b21      	ldr	r3, [pc, #132]	; (8006eec <__swbuf_r+0x98>)
 8006e68:	429c      	cmp	r4, r3
 8006e6a:	d12b      	bne.n	8006ec4 <__swbuf_r+0x70>
 8006e6c:	686c      	ldr	r4, [r5, #4]
 8006e6e:	69a3      	ldr	r3, [r4, #24]
 8006e70:	60a3      	str	r3, [r4, #8]
 8006e72:	89a3      	ldrh	r3, [r4, #12]
 8006e74:	071a      	lsls	r2, r3, #28
 8006e76:	d52f      	bpl.n	8006ed8 <__swbuf_r+0x84>
 8006e78:	6923      	ldr	r3, [r4, #16]
 8006e7a:	b36b      	cbz	r3, 8006ed8 <__swbuf_r+0x84>
 8006e7c:	6923      	ldr	r3, [r4, #16]
 8006e7e:	6820      	ldr	r0, [r4, #0]
 8006e80:	1ac0      	subs	r0, r0, r3
 8006e82:	6963      	ldr	r3, [r4, #20]
 8006e84:	b2f6      	uxtb	r6, r6
 8006e86:	4283      	cmp	r3, r0
 8006e88:	4637      	mov	r7, r6
 8006e8a:	dc04      	bgt.n	8006e96 <__swbuf_r+0x42>
 8006e8c:	4621      	mov	r1, r4
 8006e8e:	4628      	mov	r0, r5
 8006e90:	f000 ffa2 	bl	8007dd8 <_fflush_r>
 8006e94:	bb30      	cbnz	r0, 8006ee4 <__swbuf_r+0x90>
 8006e96:	68a3      	ldr	r3, [r4, #8]
 8006e98:	3b01      	subs	r3, #1
 8006e9a:	60a3      	str	r3, [r4, #8]
 8006e9c:	6823      	ldr	r3, [r4, #0]
 8006e9e:	1c5a      	adds	r2, r3, #1
 8006ea0:	6022      	str	r2, [r4, #0]
 8006ea2:	701e      	strb	r6, [r3, #0]
 8006ea4:	6963      	ldr	r3, [r4, #20]
 8006ea6:	3001      	adds	r0, #1
 8006ea8:	4283      	cmp	r3, r0
 8006eaa:	d004      	beq.n	8006eb6 <__swbuf_r+0x62>
 8006eac:	89a3      	ldrh	r3, [r4, #12]
 8006eae:	07db      	lsls	r3, r3, #31
 8006eb0:	d506      	bpl.n	8006ec0 <__swbuf_r+0x6c>
 8006eb2:	2e0a      	cmp	r6, #10
 8006eb4:	d104      	bne.n	8006ec0 <__swbuf_r+0x6c>
 8006eb6:	4621      	mov	r1, r4
 8006eb8:	4628      	mov	r0, r5
 8006eba:	f000 ff8d 	bl	8007dd8 <_fflush_r>
 8006ebe:	b988      	cbnz	r0, 8006ee4 <__swbuf_r+0x90>
 8006ec0:	4638      	mov	r0, r7
 8006ec2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006ec4:	4b0a      	ldr	r3, [pc, #40]	; (8006ef0 <__swbuf_r+0x9c>)
 8006ec6:	429c      	cmp	r4, r3
 8006ec8:	d101      	bne.n	8006ece <__swbuf_r+0x7a>
 8006eca:	68ac      	ldr	r4, [r5, #8]
 8006ecc:	e7cf      	b.n	8006e6e <__swbuf_r+0x1a>
 8006ece:	4b09      	ldr	r3, [pc, #36]	; (8006ef4 <__swbuf_r+0xa0>)
 8006ed0:	429c      	cmp	r4, r3
 8006ed2:	bf08      	it	eq
 8006ed4:	68ec      	ldreq	r4, [r5, #12]
 8006ed6:	e7ca      	b.n	8006e6e <__swbuf_r+0x1a>
 8006ed8:	4621      	mov	r1, r4
 8006eda:	4628      	mov	r0, r5
 8006edc:	f000 f80c 	bl	8006ef8 <__swsetup_r>
 8006ee0:	2800      	cmp	r0, #0
 8006ee2:	d0cb      	beq.n	8006e7c <__swbuf_r+0x28>
 8006ee4:	f04f 37ff 	mov.w	r7, #4294967295
 8006ee8:	e7ea      	b.n	8006ec0 <__swbuf_r+0x6c>
 8006eea:	bf00      	nop
 8006eec:	080090e4 	.word	0x080090e4
 8006ef0:	08009104 	.word	0x08009104
 8006ef4:	080090c4 	.word	0x080090c4

08006ef8 <__swsetup_r>:
 8006ef8:	4b32      	ldr	r3, [pc, #200]	; (8006fc4 <__swsetup_r+0xcc>)
 8006efa:	b570      	push	{r4, r5, r6, lr}
 8006efc:	681d      	ldr	r5, [r3, #0]
 8006efe:	4606      	mov	r6, r0
 8006f00:	460c      	mov	r4, r1
 8006f02:	b125      	cbz	r5, 8006f0e <__swsetup_r+0x16>
 8006f04:	69ab      	ldr	r3, [r5, #24]
 8006f06:	b913      	cbnz	r3, 8006f0e <__swsetup_r+0x16>
 8006f08:	4628      	mov	r0, r5
 8006f0a:	f000 fff9 	bl	8007f00 <__sinit>
 8006f0e:	4b2e      	ldr	r3, [pc, #184]	; (8006fc8 <__swsetup_r+0xd0>)
 8006f10:	429c      	cmp	r4, r3
 8006f12:	d10f      	bne.n	8006f34 <__swsetup_r+0x3c>
 8006f14:	686c      	ldr	r4, [r5, #4]
 8006f16:	89a3      	ldrh	r3, [r4, #12]
 8006f18:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006f1c:	0719      	lsls	r1, r3, #28
 8006f1e:	d42c      	bmi.n	8006f7a <__swsetup_r+0x82>
 8006f20:	06dd      	lsls	r5, r3, #27
 8006f22:	d411      	bmi.n	8006f48 <__swsetup_r+0x50>
 8006f24:	2309      	movs	r3, #9
 8006f26:	6033      	str	r3, [r6, #0]
 8006f28:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006f2c:	81a3      	strh	r3, [r4, #12]
 8006f2e:	f04f 30ff 	mov.w	r0, #4294967295
 8006f32:	e03e      	b.n	8006fb2 <__swsetup_r+0xba>
 8006f34:	4b25      	ldr	r3, [pc, #148]	; (8006fcc <__swsetup_r+0xd4>)
 8006f36:	429c      	cmp	r4, r3
 8006f38:	d101      	bne.n	8006f3e <__swsetup_r+0x46>
 8006f3a:	68ac      	ldr	r4, [r5, #8]
 8006f3c:	e7eb      	b.n	8006f16 <__swsetup_r+0x1e>
 8006f3e:	4b24      	ldr	r3, [pc, #144]	; (8006fd0 <__swsetup_r+0xd8>)
 8006f40:	429c      	cmp	r4, r3
 8006f42:	bf08      	it	eq
 8006f44:	68ec      	ldreq	r4, [r5, #12]
 8006f46:	e7e6      	b.n	8006f16 <__swsetup_r+0x1e>
 8006f48:	0758      	lsls	r0, r3, #29
 8006f4a:	d512      	bpl.n	8006f72 <__swsetup_r+0x7a>
 8006f4c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006f4e:	b141      	cbz	r1, 8006f62 <__swsetup_r+0x6a>
 8006f50:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006f54:	4299      	cmp	r1, r3
 8006f56:	d002      	beq.n	8006f5e <__swsetup_r+0x66>
 8006f58:	4630      	mov	r0, r6
 8006f5a:	f001 fc8b 	bl	8008874 <_free_r>
 8006f5e:	2300      	movs	r3, #0
 8006f60:	6363      	str	r3, [r4, #52]	; 0x34
 8006f62:	89a3      	ldrh	r3, [r4, #12]
 8006f64:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006f68:	81a3      	strh	r3, [r4, #12]
 8006f6a:	2300      	movs	r3, #0
 8006f6c:	6063      	str	r3, [r4, #4]
 8006f6e:	6923      	ldr	r3, [r4, #16]
 8006f70:	6023      	str	r3, [r4, #0]
 8006f72:	89a3      	ldrh	r3, [r4, #12]
 8006f74:	f043 0308 	orr.w	r3, r3, #8
 8006f78:	81a3      	strh	r3, [r4, #12]
 8006f7a:	6923      	ldr	r3, [r4, #16]
 8006f7c:	b94b      	cbnz	r3, 8006f92 <__swsetup_r+0x9a>
 8006f7e:	89a3      	ldrh	r3, [r4, #12]
 8006f80:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006f84:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006f88:	d003      	beq.n	8006f92 <__swsetup_r+0x9a>
 8006f8a:	4621      	mov	r1, r4
 8006f8c:	4630      	mov	r0, r6
 8006f8e:	f001 f881 	bl	8008094 <__smakebuf_r>
 8006f92:	89a0      	ldrh	r0, [r4, #12]
 8006f94:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006f98:	f010 0301 	ands.w	r3, r0, #1
 8006f9c:	d00a      	beq.n	8006fb4 <__swsetup_r+0xbc>
 8006f9e:	2300      	movs	r3, #0
 8006fa0:	60a3      	str	r3, [r4, #8]
 8006fa2:	6963      	ldr	r3, [r4, #20]
 8006fa4:	425b      	negs	r3, r3
 8006fa6:	61a3      	str	r3, [r4, #24]
 8006fa8:	6923      	ldr	r3, [r4, #16]
 8006faa:	b943      	cbnz	r3, 8006fbe <__swsetup_r+0xc6>
 8006fac:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006fb0:	d1ba      	bne.n	8006f28 <__swsetup_r+0x30>
 8006fb2:	bd70      	pop	{r4, r5, r6, pc}
 8006fb4:	0781      	lsls	r1, r0, #30
 8006fb6:	bf58      	it	pl
 8006fb8:	6963      	ldrpl	r3, [r4, #20]
 8006fba:	60a3      	str	r3, [r4, #8]
 8006fbc:	e7f4      	b.n	8006fa8 <__swsetup_r+0xb0>
 8006fbe:	2000      	movs	r0, #0
 8006fc0:	e7f7      	b.n	8006fb2 <__swsetup_r+0xba>
 8006fc2:	bf00      	nop
 8006fc4:	2000000c 	.word	0x2000000c
 8006fc8:	080090e4 	.word	0x080090e4
 8006fcc:	08009104 	.word	0x08009104
 8006fd0:	080090c4 	.word	0x080090c4

08006fd4 <quorem>:
 8006fd4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006fd8:	6903      	ldr	r3, [r0, #16]
 8006fda:	690c      	ldr	r4, [r1, #16]
 8006fdc:	42a3      	cmp	r3, r4
 8006fde:	4607      	mov	r7, r0
 8006fe0:	f2c0 8081 	blt.w	80070e6 <quorem+0x112>
 8006fe4:	3c01      	subs	r4, #1
 8006fe6:	f101 0814 	add.w	r8, r1, #20
 8006fea:	f100 0514 	add.w	r5, r0, #20
 8006fee:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006ff2:	9301      	str	r3, [sp, #4]
 8006ff4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006ff8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006ffc:	3301      	adds	r3, #1
 8006ffe:	429a      	cmp	r2, r3
 8007000:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007004:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007008:	fbb2 f6f3 	udiv	r6, r2, r3
 800700c:	d331      	bcc.n	8007072 <quorem+0x9e>
 800700e:	f04f 0e00 	mov.w	lr, #0
 8007012:	4640      	mov	r0, r8
 8007014:	46ac      	mov	ip, r5
 8007016:	46f2      	mov	sl, lr
 8007018:	f850 2b04 	ldr.w	r2, [r0], #4
 800701c:	b293      	uxth	r3, r2
 800701e:	fb06 e303 	mla	r3, r6, r3, lr
 8007022:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8007026:	b29b      	uxth	r3, r3
 8007028:	ebaa 0303 	sub.w	r3, sl, r3
 800702c:	f8dc a000 	ldr.w	sl, [ip]
 8007030:	0c12      	lsrs	r2, r2, #16
 8007032:	fa13 f38a 	uxtah	r3, r3, sl
 8007036:	fb06 e202 	mla	r2, r6, r2, lr
 800703a:	9300      	str	r3, [sp, #0]
 800703c:	9b00      	ldr	r3, [sp, #0]
 800703e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007042:	b292      	uxth	r2, r2
 8007044:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8007048:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800704c:	f8bd 3000 	ldrh.w	r3, [sp]
 8007050:	4581      	cmp	r9, r0
 8007052:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007056:	f84c 3b04 	str.w	r3, [ip], #4
 800705a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800705e:	d2db      	bcs.n	8007018 <quorem+0x44>
 8007060:	f855 300b 	ldr.w	r3, [r5, fp]
 8007064:	b92b      	cbnz	r3, 8007072 <quorem+0x9e>
 8007066:	9b01      	ldr	r3, [sp, #4]
 8007068:	3b04      	subs	r3, #4
 800706a:	429d      	cmp	r5, r3
 800706c:	461a      	mov	r2, r3
 800706e:	d32e      	bcc.n	80070ce <quorem+0xfa>
 8007070:	613c      	str	r4, [r7, #16]
 8007072:	4638      	mov	r0, r7
 8007074:	f001 fae6 	bl	8008644 <__mcmp>
 8007078:	2800      	cmp	r0, #0
 800707a:	db24      	blt.n	80070c6 <quorem+0xf2>
 800707c:	3601      	adds	r6, #1
 800707e:	4628      	mov	r0, r5
 8007080:	f04f 0c00 	mov.w	ip, #0
 8007084:	f858 2b04 	ldr.w	r2, [r8], #4
 8007088:	f8d0 e000 	ldr.w	lr, [r0]
 800708c:	b293      	uxth	r3, r2
 800708e:	ebac 0303 	sub.w	r3, ip, r3
 8007092:	0c12      	lsrs	r2, r2, #16
 8007094:	fa13 f38e 	uxtah	r3, r3, lr
 8007098:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800709c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80070a0:	b29b      	uxth	r3, r3
 80070a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80070a6:	45c1      	cmp	r9, r8
 80070a8:	f840 3b04 	str.w	r3, [r0], #4
 80070ac:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80070b0:	d2e8      	bcs.n	8007084 <quorem+0xb0>
 80070b2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80070b6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80070ba:	b922      	cbnz	r2, 80070c6 <quorem+0xf2>
 80070bc:	3b04      	subs	r3, #4
 80070be:	429d      	cmp	r5, r3
 80070c0:	461a      	mov	r2, r3
 80070c2:	d30a      	bcc.n	80070da <quorem+0x106>
 80070c4:	613c      	str	r4, [r7, #16]
 80070c6:	4630      	mov	r0, r6
 80070c8:	b003      	add	sp, #12
 80070ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80070ce:	6812      	ldr	r2, [r2, #0]
 80070d0:	3b04      	subs	r3, #4
 80070d2:	2a00      	cmp	r2, #0
 80070d4:	d1cc      	bne.n	8007070 <quorem+0x9c>
 80070d6:	3c01      	subs	r4, #1
 80070d8:	e7c7      	b.n	800706a <quorem+0x96>
 80070da:	6812      	ldr	r2, [r2, #0]
 80070dc:	3b04      	subs	r3, #4
 80070de:	2a00      	cmp	r2, #0
 80070e0:	d1f0      	bne.n	80070c4 <quorem+0xf0>
 80070e2:	3c01      	subs	r4, #1
 80070e4:	e7eb      	b.n	80070be <quorem+0xea>
 80070e6:	2000      	movs	r0, #0
 80070e8:	e7ee      	b.n	80070c8 <quorem+0xf4>
 80070ea:	0000      	movs	r0, r0
 80070ec:	0000      	movs	r0, r0
	...

080070f0 <_dtoa_r>:
 80070f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070f4:	ed2d 8b04 	vpush	{d8-d9}
 80070f8:	ec57 6b10 	vmov	r6, r7, d0
 80070fc:	b093      	sub	sp, #76	; 0x4c
 80070fe:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007100:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007104:	9106      	str	r1, [sp, #24]
 8007106:	ee10 aa10 	vmov	sl, s0
 800710a:	4604      	mov	r4, r0
 800710c:	9209      	str	r2, [sp, #36]	; 0x24
 800710e:	930c      	str	r3, [sp, #48]	; 0x30
 8007110:	46bb      	mov	fp, r7
 8007112:	b975      	cbnz	r5, 8007132 <_dtoa_r+0x42>
 8007114:	2010      	movs	r0, #16
 8007116:	f000 fffd 	bl	8008114 <malloc>
 800711a:	4602      	mov	r2, r0
 800711c:	6260      	str	r0, [r4, #36]	; 0x24
 800711e:	b920      	cbnz	r0, 800712a <_dtoa_r+0x3a>
 8007120:	4ba7      	ldr	r3, [pc, #668]	; (80073c0 <_dtoa_r+0x2d0>)
 8007122:	21ea      	movs	r1, #234	; 0xea
 8007124:	48a7      	ldr	r0, [pc, #668]	; (80073c4 <_dtoa_r+0x2d4>)
 8007126:	f001 fe45 	bl	8008db4 <__assert_func>
 800712a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800712e:	6005      	str	r5, [r0, #0]
 8007130:	60c5      	str	r5, [r0, #12]
 8007132:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007134:	6819      	ldr	r1, [r3, #0]
 8007136:	b151      	cbz	r1, 800714e <_dtoa_r+0x5e>
 8007138:	685a      	ldr	r2, [r3, #4]
 800713a:	604a      	str	r2, [r1, #4]
 800713c:	2301      	movs	r3, #1
 800713e:	4093      	lsls	r3, r2
 8007140:	608b      	str	r3, [r1, #8]
 8007142:	4620      	mov	r0, r4
 8007144:	f001 f83c 	bl	80081c0 <_Bfree>
 8007148:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800714a:	2200      	movs	r2, #0
 800714c:	601a      	str	r2, [r3, #0]
 800714e:	1e3b      	subs	r3, r7, #0
 8007150:	bfaa      	itet	ge
 8007152:	2300      	movge	r3, #0
 8007154:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8007158:	f8c8 3000 	strge.w	r3, [r8]
 800715c:	4b9a      	ldr	r3, [pc, #616]	; (80073c8 <_dtoa_r+0x2d8>)
 800715e:	bfbc      	itt	lt
 8007160:	2201      	movlt	r2, #1
 8007162:	f8c8 2000 	strlt.w	r2, [r8]
 8007166:	ea33 030b 	bics.w	r3, r3, fp
 800716a:	d11b      	bne.n	80071a4 <_dtoa_r+0xb4>
 800716c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800716e:	f242 730f 	movw	r3, #9999	; 0x270f
 8007172:	6013      	str	r3, [r2, #0]
 8007174:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007178:	4333      	orrs	r3, r6
 800717a:	f000 8592 	beq.w	8007ca2 <_dtoa_r+0xbb2>
 800717e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007180:	b963      	cbnz	r3, 800719c <_dtoa_r+0xac>
 8007182:	4b92      	ldr	r3, [pc, #584]	; (80073cc <_dtoa_r+0x2dc>)
 8007184:	e022      	b.n	80071cc <_dtoa_r+0xdc>
 8007186:	4b92      	ldr	r3, [pc, #584]	; (80073d0 <_dtoa_r+0x2e0>)
 8007188:	9301      	str	r3, [sp, #4]
 800718a:	3308      	adds	r3, #8
 800718c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800718e:	6013      	str	r3, [r2, #0]
 8007190:	9801      	ldr	r0, [sp, #4]
 8007192:	b013      	add	sp, #76	; 0x4c
 8007194:	ecbd 8b04 	vpop	{d8-d9}
 8007198:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800719c:	4b8b      	ldr	r3, [pc, #556]	; (80073cc <_dtoa_r+0x2dc>)
 800719e:	9301      	str	r3, [sp, #4]
 80071a0:	3303      	adds	r3, #3
 80071a2:	e7f3      	b.n	800718c <_dtoa_r+0x9c>
 80071a4:	2200      	movs	r2, #0
 80071a6:	2300      	movs	r3, #0
 80071a8:	4650      	mov	r0, sl
 80071aa:	4659      	mov	r1, fp
 80071ac:	f7f9 fcb4 	bl	8000b18 <__aeabi_dcmpeq>
 80071b0:	ec4b ab19 	vmov	d9, sl, fp
 80071b4:	4680      	mov	r8, r0
 80071b6:	b158      	cbz	r0, 80071d0 <_dtoa_r+0xe0>
 80071b8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80071ba:	2301      	movs	r3, #1
 80071bc:	6013      	str	r3, [r2, #0]
 80071be:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	f000 856b 	beq.w	8007c9c <_dtoa_r+0xbac>
 80071c6:	4883      	ldr	r0, [pc, #524]	; (80073d4 <_dtoa_r+0x2e4>)
 80071c8:	6018      	str	r0, [r3, #0]
 80071ca:	1e43      	subs	r3, r0, #1
 80071cc:	9301      	str	r3, [sp, #4]
 80071ce:	e7df      	b.n	8007190 <_dtoa_r+0xa0>
 80071d0:	ec4b ab10 	vmov	d0, sl, fp
 80071d4:	aa10      	add	r2, sp, #64	; 0x40
 80071d6:	a911      	add	r1, sp, #68	; 0x44
 80071d8:	4620      	mov	r0, r4
 80071da:	f001 fad9 	bl	8008790 <__d2b>
 80071de:	f3cb 550a 	ubfx	r5, fp, #20, #11
 80071e2:	ee08 0a10 	vmov	s16, r0
 80071e6:	2d00      	cmp	r5, #0
 80071e8:	f000 8084 	beq.w	80072f4 <_dtoa_r+0x204>
 80071ec:	ee19 3a90 	vmov	r3, s19
 80071f0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80071f4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80071f8:	4656      	mov	r6, sl
 80071fa:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80071fe:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007202:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8007206:	4b74      	ldr	r3, [pc, #464]	; (80073d8 <_dtoa_r+0x2e8>)
 8007208:	2200      	movs	r2, #0
 800720a:	4630      	mov	r0, r6
 800720c:	4639      	mov	r1, r7
 800720e:	f7f9 f863 	bl	80002d8 <__aeabi_dsub>
 8007212:	a365      	add	r3, pc, #404	; (adr r3, 80073a8 <_dtoa_r+0x2b8>)
 8007214:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007218:	f7f9 fa16 	bl	8000648 <__aeabi_dmul>
 800721c:	a364      	add	r3, pc, #400	; (adr r3, 80073b0 <_dtoa_r+0x2c0>)
 800721e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007222:	f7f9 f85b 	bl	80002dc <__adddf3>
 8007226:	4606      	mov	r6, r0
 8007228:	4628      	mov	r0, r5
 800722a:	460f      	mov	r7, r1
 800722c:	f7f9 f9a2 	bl	8000574 <__aeabi_i2d>
 8007230:	a361      	add	r3, pc, #388	; (adr r3, 80073b8 <_dtoa_r+0x2c8>)
 8007232:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007236:	f7f9 fa07 	bl	8000648 <__aeabi_dmul>
 800723a:	4602      	mov	r2, r0
 800723c:	460b      	mov	r3, r1
 800723e:	4630      	mov	r0, r6
 8007240:	4639      	mov	r1, r7
 8007242:	f7f9 f84b 	bl	80002dc <__adddf3>
 8007246:	4606      	mov	r6, r0
 8007248:	460f      	mov	r7, r1
 800724a:	f7f9 fcad 	bl	8000ba8 <__aeabi_d2iz>
 800724e:	2200      	movs	r2, #0
 8007250:	9000      	str	r0, [sp, #0]
 8007252:	2300      	movs	r3, #0
 8007254:	4630      	mov	r0, r6
 8007256:	4639      	mov	r1, r7
 8007258:	f7f9 fc68 	bl	8000b2c <__aeabi_dcmplt>
 800725c:	b150      	cbz	r0, 8007274 <_dtoa_r+0x184>
 800725e:	9800      	ldr	r0, [sp, #0]
 8007260:	f7f9 f988 	bl	8000574 <__aeabi_i2d>
 8007264:	4632      	mov	r2, r6
 8007266:	463b      	mov	r3, r7
 8007268:	f7f9 fc56 	bl	8000b18 <__aeabi_dcmpeq>
 800726c:	b910      	cbnz	r0, 8007274 <_dtoa_r+0x184>
 800726e:	9b00      	ldr	r3, [sp, #0]
 8007270:	3b01      	subs	r3, #1
 8007272:	9300      	str	r3, [sp, #0]
 8007274:	9b00      	ldr	r3, [sp, #0]
 8007276:	2b16      	cmp	r3, #22
 8007278:	d85a      	bhi.n	8007330 <_dtoa_r+0x240>
 800727a:	9a00      	ldr	r2, [sp, #0]
 800727c:	4b57      	ldr	r3, [pc, #348]	; (80073dc <_dtoa_r+0x2ec>)
 800727e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007282:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007286:	ec51 0b19 	vmov	r0, r1, d9
 800728a:	f7f9 fc4f 	bl	8000b2c <__aeabi_dcmplt>
 800728e:	2800      	cmp	r0, #0
 8007290:	d050      	beq.n	8007334 <_dtoa_r+0x244>
 8007292:	9b00      	ldr	r3, [sp, #0]
 8007294:	3b01      	subs	r3, #1
 8007296:	9300      	str	r3, [sp, #0]
 8007298:	2300      	movs	r3, #0
 800729a:	930b      	str	r3, [sp, #44]	; 0x2c
 800729c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800729e:	1b5d      	subs	r5, r3, r5
 80072a0:	1e6b      	subs	r3, r5, #1
 80072a2:	9305      	str	r3, [sp, #20]
 80072a4:	bf45      	ittet	mi
 80072a6:	f1c5 0301 	rsbmi	r3, r5, #1
 80072aa:	9304      	strmi	r3, [sp, #16]
 80072ac:	2300      	movpl	r3, #0
 80072ae:	2300      	movmi	r3, #0
 80072b0:	bf4c      	ite	mi
 80072b2:	9305      	strmi	r3, [sp, #20]
 80072b4:	9304      	strpl	r3, [sp, #16]
 80072b6:	9b00      	ldr	r3, [sp, #0]
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	db3d      	blt.n	8007338 <_dtoa_r+0x248>
 80072bc:	9b05      	ldr	r3, [sp, #20]
 80072be:	9a00      	ldr	r2, [sp, #0]
 80072c0:	920a      	str	r2, [sp, #40]	; 0x28
 80072c2:	4413      	add	r3, r2
 80072c4:	9305      	str	r3, [sp, #20]
 80072c6:	2300      	movs	r3, #0
 80072c8:	9307      	str	r3, [sp, #28]
 80072ca:	9b06      	ldr	r3, [sp, #24]
 80072cc:	2b09      	cmp	r3, #9
 80072ce:	f200 8089 	bhi.w	80073e4 <_dtoa_r+0x2f4>
 80072d2:	2b05      	cmp	r3, #5
 80072d4:	bfc4      	itt	gt
 80072d6:	3b04      	subgt	r3, #4
 80072d8:	9306      	strgt	r3, [sp, #24]
 80072da:	9b06      	ldr	r3, [sp, #24]
 80072dc:	f1a3 0302 	sub.w	r3, r3, #2
 80072e0:	bfcc      	ite	gt
 80072e2:	2500      	movgt	r5, #0
 80072e4:	2501      	movle	r5, #1
 80072e6:	2b03      	cmp	r3, #3
 80072e8:	f200 8087 	bhi.w	80073fa <_dtoa_r+0x30a>
 80072ec:	e8df f003 	tbb	[pc, r3]
 80072f0:	59383a2d 	.word	0x59383a2d
 80072f4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80072f8:	441d      	add	r5, r3
 80072fa:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80072fe:	2b20      	cmp	r3, #32
 8007300:	bfc1      	itttt	gt
 8007302:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007306:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800730a:	fa0b f303 	lslgt.w	r3, fp, r3
 800730e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8007312:	bfda      	itte	le
 8007314:	f1c3 0320 	rsble	r3, r3, #32
 8007318:	fa06 f003 	lslle.w	r0, r6, r3
 800731c:	4318      	orrgt	r0, r3
 800731e:	f7f9 f919 	bl	8000554 <__aeabi_ui2d>
 8007322:	2301      	movs	r3, #1
 8007324:	4606      	mov	r6, r0
 8007326:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800732a:	3d01      	subs	r5, #1
 800732c:	930e      	str	r3, [sp, #56]	; 0x38
 800732e:	e76a      	b.n	8007206 <_dtoa_r+0x116>
 8007330:	2301      	movs	r3, #1
 8007332:	e7b2      	b.n	800729a <_dtoa_r+0x1aa>
 8007334:	900b      	str	r0, [sp, #44]	; 0x2c
 8007336:	e7b1      	b.n	800729c <_dtoa_r+0x1ac>
 8007338:	9b04      	ldr	r3, [sp, #16]
 800733a:	9a00      	ldr	r2, [sp, #0]
 800733c:	1a9b      	subs	r3, r3, r2
 800733e:	9304      	str	r3, [sp, #16]
 8007340:	4253      	negs	r3, r2
 8007342:	9307      	str	r3, [sp, #28]
 8007344:	2300      	movs	r3, #0
 8007346:	930a      	str	r3, [sp, #40]	; 0x28
 8007348:	e7bf      	b.n	80072ca <_dtoa_r+0x1da>
 800734a:	2300      	movs	r3, #0
 800734c:	9308      	str	r3, [sp, #32]
 800734e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007350:	2b00      	cmp	r3, #0
 8007352:	dc55      	bgt.n	8007400 <_dtoa_r+0x310>
 8007354:	2301      	movs	r3, #1
 8007356:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800735a:	461a      	mov	r2, r3
 800735c:	9209      	str	r2, [sp, #36]	; 0x24
 800735e:	e00c      	b.n	800737a <_dtoa_r+0x28a>
 8007360:	2301      	movs	r3, #1
 8007362:	e7f3      	b.n	800734c <_dtoa_r+0x25c>
 8007364:	2300      	movs	r3, #0
 8007366:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007368:	9308      	str	r3, [sp, #32]
 800736a:	9b00      	ldr	r3, [sp, #0]
 800736c:	4413      	add	r3, r2
 800736e:	9302      	str	r3, [sp, #8]
 8007370:	3301      	adds	r3, #1
 8007372:	2b01      	cmp	r3, #1
 8007374:	9303      	str	r3, [sp, #12]
 8007376:	bfb8      	it	lt
 8007378:	2301      	movlt	r3, #1
 800737a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800737c:	2200      	movs	r2, #0
 800737e:	6042      	str	r2, [r0, #4]
 8007380:	2204      	movs	r2, #4
 8007382:	f102 0614 	add.w	r6, r2, #20
 8007386:	429e      	cmp	r6, r3
 8007388:	6841      	ldr	r1, [r0, #4]
 800738a:	d93d      	bls.n	8007408 <_dtoa_r+0x318>
 800738c:	4620      	mov	r0, r4
 800738e:	f000 fed7 	bl	8008140 <_Balloc>
 8007392:	9001      	str	r0, [sp, #4]
 8007394:	2800      	cmp	r0, #0
 8007396:	d13b      	bne.n	8007410 <_dtoa_r+0x320>
 8007398:	4b11      	ldr	r3, [pc, #68]	; (80073e0 <_dtoa_r+0x2f0>)
 800739a:	4602      	mov	r2, r0
 800739c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80073a0:	e6c0      	b.n	8007124 <_dtoa_r+0x34>
 80073a2:	2301      	movs	r3, #1
 80073a4:	e7df      	b.n	8007366 <_dtoa_r+0x276>
 80073a6:	bf00      	nop
 80073a8:	636f4361 	.word	0x636f4361
 80073ac:	3fd287a7 	.word	0x3fd287a7
 80073b0:	8b60c8b3 	.word	0x8b60c8b3
 80073b4:	3fc68a28 	.word	0x3fc68a28
 80073b8:	509f79fb 	.word	0x509f79fb
 80073bc:	3fd34413 	.word	0x3fd34413
 80073c0:	08009041 	.word	0x08009041
 80073c4:	08009058 	.word	0x08009058
 80073c8:	7ff00000 	.word	0x7ff00000
 80073cc:	0800903d 	.word	0x0800903d
 80073d0:	08009034 	.word	0x08009034
 80073d4:	08009011 	.word	0x08009011
 80073d8:	3ff80000 	.word	0x3ff80000
 80073dc:	080091a8 	.word	0x080091a8
 80073e0:	080090b3 	.word	0x080090b3
 80073e4:	2501      	movs	r5, #1
 80073e6:	2300      	movs	r3, #0
 80073e8:	9306      	str	r3, [sp, #24]
 80073ea:	9508      	str	r5, [sp, #32]
 80073ec:	f04f 33ff 	mov.w	r3, #4294967295
 80073f0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80073f4:	2200      	movs	r2, #0
 80073f6:	2312      	movs	r3, #18
 80073f8:	e7b0      	b.n	800735c <_dtoa_r+0x26c>
 80073fa:	2301      	movs	r3, #1
 80073fc:	9308      	str	r3, [sp, #32]
 80073fe:	e7f5      	b.n	80073ec <_dtoa_r+0x2fc>
 8007400:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007402:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007406:	e7b8      	b.n	800737a <_dtoa_r+0x28a>
 8007408:	3101      	adds	r1, #1
 800740a:	6041      	str	r1, [r0, #4]
 800740c:	0052      	lsls	r2, r2, #1
 800740e:	e7b8      	b.n	8007382 <_dtoa_r+0x292>
 8007410:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007412:	9a01      	ldr	r2, [sp, #4]
 8007414:	601a      	str	r2, [r3, #0]
 8007416:	9b03      	ldr	r3, [sp, #12]
 8007418:	2b0e      	cmp	r3, #14
 800741a:	f200 809d 	bhi.w	8007558 <_dtoa_r+0x468>
 800741e:	2d00      	cmp	r5, #0
 8007420:	f000 809a 	beq.w	8007558 <_dtoa_r+0x468>
 8007424:	9b00      	ldr	r3, [sp, #0]
 8007426:	2b00      	cmp	r3, #0
 8007428:	dd32      	ble.n	8007490 <_dtoa_r+0x3a0>
 800742a:	4ab7      	ldr	r2, [pc, #732]	; (8007708 <_dtoa_r+0x618>)
 800742c:	f003 030f 	and.w	r3, r3, #15
 8007430:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007434:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007438:	9b00      	ldr	r3, [sp, #0]
 800743a:	05d8      	lsls	r0, r3, #23
 800743c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8007440:	d516      	bpl.n	8007470 <_dtoa_r+0x380>
 8007442:	4bb2      	ldr	r3, [pc, #712]	; (800770c <_dtoa_r+0x61c>)
 8007444:	ec51 0b19 	vmov	r0, r1, d9
 8007448:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800744c:	f7f9 fa26 	bl	800089c <__aeabi_ddiv>
 8007450:	f007 070f 	and.w	r7, r7, #15
 8007454:	4682      	mov	sl, r0
 8007456:	468b      	mov	fp, r1
 8007458:	2503      	movs	r5, #3
 800745a:	4eac      	ldr	r6, [pc, #688]	; (800770c <_dtoa_r+0x61c>)
 800745c:	b957      	cbnz	r7, 8007474 <_dtoa_r+0x384>
 800745e:	4642      	mov	r2, r8
 8007460:	464b      	mov	r3, r9
 8007462:	4650      	mov	r0, sl
 8007464:	4659      	mov	r1, fp
 8007466:	f7f9 fa19 	bl	800089c <__aeabi_ddiv>
 800746a:	4682      	mov	sl, r0
 800746c:	468b      	mov	fp, r1
 800746e:	e028      	b.n	80074c2 <_dtoa_r+0x3d2>
 8007470:	2502      	movs	r5, #2
 8007472:	e7f2      	b.n	800745a <_dtoa_r+0x36a>
 8007474:	07f9      	lsls	r1, r7, #31
 8007476:	d508      	bpl.n	800748a <_dtoa_r+0x39a>
 8007478:	4640      	mov	r0, r8
 800747a:	4649      	mov	r1, r9
 800747c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007480:	f7f9 f8e2 	bl	8000648 <__aeabi_dmul>
 8007484:	3501      	adds	r5, #1
 8007486:	4680      	mov	r8, r0
 8007488:	4689      	mov	r9, r1
 800748a:	107f      	asrs	r7, r7, #1
 800748c:	3608      	adds	r6, #8
 800748e:	e7e5      	b.n	800745c <_dtoa_r+0x36c>
 8007490:	f000 809b 	beq.w	80075ca <_dtoa_r+0x4da>
 8007494:	9b00      	ldr	r3, [sp, #0]
 8007496:	4f9d      	ldr	r7, [pc, #628]	; (800770c <_dtoa_r+0x61c>)
 8007498:	425e      	negs	r6, r3
 800749a:	4b9b      	ldr	r3, [pc, #620]	; (8007708 <_dtoa_r+0x618>)
 800749c:	f006 020f 	and.w	r2, r6, #15
 80074a0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80074a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074a8:	ec51 0b19 	vmov	r0, r1, d9
 80074ac:	f7f9 f8cc 	bl	8000648 <__aeabi_dmul>
 80074b0:	1136      	asrs	r6, r6, #4
 80074b2:	4682      	mov	sl, r0
 80074b4:	468b      	mov	fp, r1
 80074b6:	2300      	movs	r3, #0
 80074b8:	2502      	movs	r5, #2
 80074ba:	2e00      	cmp	r6, #0
 80074bc:	d17a      	bne.n	80075b4 <_dtoa_r+0x4c4>
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d1d3      	bne.n	800746a <_dtoa_r+0x37a>
 80074c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	f000 8082 	beq.w	80075ce <_dtoa_r+0x4de>
 80074ca:	4b91      	ldr	r3, [pc, #580]	; (8007710 <_dtoa_r+0x620>)
 80074cc:	2200      	movs	r2, #0
 80074ce:	4650      	mov	r0, sl
 80074d0:	4659      	mov	r1, fp
 80074d2:	f7f9 fb2b 	bl	8000b2c <__aeabi_dcmplt>
 80074d6:	2800      	cmp	r0, #0
 80074d8:	d079      	beq.n	80075ce <_dtoa_r+0x4de>
 80074da:	9b03      	ldr	r3, [sp, #12]
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d076      	beq.n	80075ce <_dtoa_r+0x4de>
 80074e0:	9b02      	ldr	r3, [sp, #8]
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	dd36      	ble.n	8007554 <_dtoa_r+0x464>
 80074e6:	9b00      	ldr	r3, [sp, #0]
 80074e8:	4650      	mov	r0, sl
 80074ea:	4659      	mov	r1, fp
 80074ec:	1e5f      	subs	r7, r3, #1
 80074ee:	2200      	movs	r2, #0
 80074f0:	4b88      	ldr	r3, [pc, #544]	; (8007714 <_dtoa_r+0x624>)
 80074f2:	f7f9 f8a9 	bl	8000648 <__aeabi_dmul>
 80074f6:	9e02      	ldr	r6, [sp, #8]
 80074f8:	4682      	mov	sl, r0
 80074fa:	468b      	mov	fp, r1
 80074fc:	3501      	adds	r5, #1
 80074fe:	4628      	mov	r0, r5
 8007500:	f7f9 f838 	bl	8000574 <__aeabi_i2d>
 8007504:	4652      	mov	r2, sl
 8007506:	465b      	mov	r3, fp
 8007508:	f7f9 f89e 	bl	8000648 <__aeabi_dmul>
 800750c:	4b82      	ldr	r3, [pc, #520]	; (8007718 <_dtoa_r+0x628>)
 800750e:	2200      	movs	r2, #0
 8007510:	f7f8 fee4 	bl	80002dc <__adddf3>
 8007514:	46d0      	mov	r8, sl
 8007516:	46d9      	mov	r9, fp
 8007518:	4682      	mov	sl, r0
 800751a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800751e:	2e00      	cmp	r6, #0
 8007520:	d158      	bne.n	80075d4 <_dtoa_r+0x4e4>
 8007522:	4b7e      	ldr	r3, [pc, #504]	; (800771c <_dtoa_r+0x62c>)
 8007524:	2200      	movs	r2, #0
 8007526:	4640      	mov	r0, r8
 8007528:	4649      	mov	r1, r9
 800752a:	f7f8 fed5 	bl	80002d8 <__aeabi_dsub>
 800752e:	4652      	mov	r2, sl
 8007530:	465b      	mov	r3, fp
 8007532:	4680      	mov	r8, r0
 8007534:	4689      	mov	r9, r1
 8007536:	f7f9 fb17 	bl	8000b68 <__aeabi_dcmpgt>
 800753a:	2800      	cmp	r0, #0
 800753c:	f040 8295 	bne.w	8007a6a <_dtoa_r+0x97a>
 8007540:	4652      	mov	r2, sl
 8007542:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8007546:	4640      	mov	r0, r8
 8007548:	4649      	mov	r1, r9
 800754a:	f7f9 faef 	bl	8000b2c <__aeabi_dcmplt>
 800754e:	2800      	cmp	r0, #0
 8007550:	f040 8289 	bne.w	8007a66 <_dtoa_r+0x976>
 8007554:	ec5b ab19 	vmov	sl, fp, d9
 8007558:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800755a:	2b00      	cmp	r3, #0
 800755c:	f2c0 8148 	blt.w	80077f0 <_dtoa_r+0x700>
 8007560:	9a00      	ldr	r2, [sp, #0]
 8007562:	2a0e      	cmp	r2, #14
 8007564:	f300 8144 	bgt.w	80077f0 <_dtoa_r+0x700>
 8007568:	4b67      	ldr	r3, [pc, #412]	; (8007708 <_dtoa_r+0x618>)
 800756a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800756e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007572:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007574:	2b00      	cmp	r3, #0
 8007576:	f280 80d5 	bge.w	8007724 <_dtoa_r+0x634>
 800757a:	9b03      	ldr	r3, [sp, #12]
 800757c:	2b00      	cmp	r3, #0
 800757e:	f300 80d1 	bgt.w	8007724 <_dtoa_r+0x634>
 8007582:	f040 826f 	bne.w	8007a64 <_dtoa_r+0x974>
 8007586:	4b65      	ldr	r3, [pc, #404]	; (800771c <_dtoa_r+0x62c>)
 8007588:	2200      	movs	r2, #0
 800758a:	4640      	mov	r0, r8
 800758c:	4649      	mov	r1, r9
 800758e:	f7f9 f85b 	bl	8000648 <__aeabi_dmul>
 8007592:	4652      	mov	r2, sl
 8007594:	465b      	mov	r3, fp
 8007596:	f7f9 fadd 	bl	8000b54 <__aeabi_dcmpge>
 800759a:	9e03      	ldr	r6, [sp, #12]
 800759c:	4637      	mov	r7, r6
 800759e:	2800      	cmp	r0, #0
 80075a0:	f040 8245 	bne.w	8007a2e <_dtoa_r+0x93e>
 80075a4:	9d01      	ldr	r5, [sp, #4]
 80075a6:	2331      	movs	r3, #49	; 0x31
 80075a8:	f805 3b01 	strb.w	r3, [r5], #1
 80075ac:	9b00      	ldr	r3, [sp, #0]
 80075ae:	3301      	adds	r3, #1
 80075b0:	9300      	str	r3, [sp, #0]
 80075b2:	e240      	b.n	8007a36 <_dtoa_r+0x946>
 80075b4:	07f2      	lsls	r2, r6, #31
 80075b6:	d505      	bpl.n	80075c4 <_dtoa_r+0x4d4>
 80075b8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80075bc:	f7f9 f844 	bl	8000648 <__aeabi_dmul>
 80075c0:	3501      	adds	r5, #1
 80075c2:	2301      	movs	r3, #1
 80075c4:	1076      	asrs	r6, r6, #1
 80075c6:	3708      	adds	r7, #8
 80075c8:	e777      	b.n	80074ba <_dtoa_r+0x3ca>
 80075ca:	2502      	movs	r5, #2
 80075cc:	e779      	b.n	80074c2 <_dtoa_r+0x3d2>
 80075ce:	9f00      	ldr	r7, [sp, #0]
 80075d0:	9e03      	ldr	r6, [sp, #12]
 80075d2:	e794      	b.n	80074fe <_dtoa_r+0x40e>
 80075d4:	9901      	ldr	r1, [sp, #4]
 80075d6:	4b4c      	ldr	r3, [pc, #304]	; (8007708 <_dtoa_r+0x618>)
 80075d8:	4431      	add	r1, r6
 80075da:	910d      	str	r1, [sp, #52]	; 0x34
 80075dc:	9908      	ldr	r1, [sp, #32]
 80075de:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80075e2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80075e6:	2900      	cmp	r1, #0
 80075e8:	d043      	beq.n	8007672 <_dtoa_r+0x582>
 80075ea:	494d      	ldr	r1, [pc, #308]	; (8007720 <_dtoa_r+0x630>)
 80075ec:	2000      	movs	r0, #0
 80075ee:	f7f9 f955 	bl	800089c <__aeabi_ddiv>
 80075f2:	4652      	mov	r2, sl
 80075f4:	465b      	mov	r3, fp
 80075f6:	f7f8 fe6f 	bl	80002d8 <__aeabi_dsub>
 80075fa:	9d01      	ldr	r5, [sp, #4]
 80075fc:	4682      	mov	sl, r0
 80075fe:	468b      	mov	fp, r1
 8007600:	4649      	mov	r1, r9
 8007602:	4640      	mov	r0, r8
 8007604:	f7f9 fad0 	bl	8000ba8 <__aeabi_d2iz>
 8007608:	4606      	mov	r6, r0
 800760a:	f7f8 ffb3 	bl	8000574 <__aeabi_i2d>
 800760e:	4602      	mov	r2, r0
 8007610:	460b      	mov	r3, r1
 8007612:	4640      	mov	r0, r8
 8007614:	4649      	mov	r1, r9
 8007616:	f7f8 fe5f 	bl	80002d8 <__aeabi_dsub>
 800761a:	3630      	adds	r6, #48	; 0x30
 800761c:	f805 6b01 	strb.w	r6, [r5], #1
 8007620:	4652      	mov	r2, sl
 8007622:	465b      	mov	r3, fp
 8007624:	4680      	mov	r8, r0
 8007626:	4689      	mov	r9, r1
 8007628:	f7f9 fa80 	bl	8000b2c <__aeabi_dcmplt>
 800762c:	2800      	cmp	r0, #0
 800762e:	d163      	bne.n	80076f8 <_dtoa_r+0x608>
 8007630:	4642      	mov	r2, r8
 8007632:	464b      	mov	r3, r9
 8007634:	4936      	ldr	r1, [pc, #216]	; (8007710 <_dtoa_r+0x620>)
 8007636:	2000      	movs	r0, #0
 8007638:	f7f8 fe4e 	bl	80002d8 <__aeabi_dsub>
 800763c:	4652      	mov	r2, sl
 800763e:	465b      	mov	r3, fp
 8007640:	f7f9 fa74 	bl	8000b2c <__aeabi_dcmplt>
 8007644:	2800      	cmp	r0, #0
 8007646:	f040 80b5 	bne.w	80077b4 <_dtoa_r+0x6c4>
 800764a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800764c:	429d      	cmp	r5, r3
 800764e:	d081      	beq.n	8007554 <_dtoa_r+0x464>
 8007650:	4b30      	ldr	r3, [pc, #192]	; (8007714 <_dtoa_r+0x624>)
 8007652:	2200      	movs	r2, #0
 8007654:	4650      	mov	r0, sl
 8007656:	4659      	mov	r1, fp
 8007658:	f7f8 fff6 	bl	8000648 <__aeabi_dmul>
 800765c:	4b2d      	ldr	r3, [pc, #180]	; (8007714 <_dtoa_r+0x624>)
 800765e:	4682      	mov	sl, r0
 8007660:	468b      	mov	fp, r1
 8007662:	4640      	mov	r0, r8
 8007664:	4649      	mov	r1, r9
 8007666:	2200      	movs	r2, #0
 8007668:	f7f8 ffee 	bl	8000648 <__aeabi_dmul>
 800766c:	4680      	mov	r8, r0
 800766e:	4689      	mov	r9, r1
 8007670:	e7c6      	b.n	8007600 <_dtoa_r+0x510>
 8007672:	4650      	mov	r0, sl
 8007674:	4659      	mov	r1, fp
 8007676:	f7f8 ffe7 	bl	8000648 <__aeabi_dmul>
 800767a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800767c:	9d01      	ldr	r5, [sp, #4]
 800767e:	930f      	str	r3, [sp, #60]	; 0x3c
 8007680:	4682      	mov	sl, r0
 8007682:	468b      	mov	fp, r1
 8007684:	4649      	mov	r1, r9
 8007686:	4640      	mov	r0, r8
 8007688:	f7f9 fa8e 	bl	8000ba8 <__aeabi_d2iz>
 800768c:	4606      	mov	r6, r0
 800768e:	f7f8 ff71 	bl	8000574 <__aeabi_i2d>
 8007692:	3630      	adds	r6, #48	; 0x30
 8007694:	4602      	mov	r2, r0
 8007696:	460b      	mov	r3, r1
 8007698:	4640      	mov	r0, r8
 800769a:	4649      	mov	r1, r9
 800769c:	f7f8 fe1c 	bl	80002d8 <__aeabi_dsub>
 80076a0:	f805 6b01 	strb.w	r6, [r5], #1
 80076a4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80076a6:	429d      	cmp	r5, r3
 80076a8:	4680      	mov	r8, r0
 80076aa:	4689      	mov	r9, r1
 80076ac:	f04f 0200 	mov.w	r2, #0
 80076b0:	d124      	bne.n	80076fc <_dtoa_r+0x60c>
 80076b2:	4b1b      	ldr	r3, [pc, #108]	; (8007720 <_dtoa_r+0x630>)
 80076b4:	4650      	mov	r0, sl
 80076b6:	4659      	mov	r1, fp
 80076b8:	f7f8 fe10 	bl	80002dc <__adddf3>
 80076bc:	4602      	mov	r2, r0
 80076be:	460b      	mov	r3, r1
 80076c0:	4640      	mov	r0, r8
 80076c2:	4649      	mov	r1, r9
 80076c4:	f7f9 fa50 	bl	8000b68 <__aeabi_dcmpgt>
 80076c8:	2800      	cmp	r0, #0
 80076ca:	d173      	bne.n	80077b4 <_dtoa_r+0x6c4>
 80076cc:	4652      	mov	r2, sl
 80076ce:	465b      	mov	r3, fp
 80076d0:	4913      	ldr	r1, [pc, #76]	; (8007720 <_dtoa_r+0x630>)
 80076d2:	2000      	movs	r0, #0
 80076d4:	f7f8 fe00 	bl	80002d8 <__aeabi_dsub>
 80076d8:	4602      	mov	r2, r0
 80076da:	460b      	mov	r3, r1
 80076dc:	4640      	mov	r0, r8
 80076de:	4649      	mov	r1, r9
 80076e0:	f7f9 fa24 	bl	8000b2c <__aeabi_dcmplt>
 80076e4:	2800      	cmp	r0, #0
 80076e6:	f43f af35 	beq.w	8007554 <_dtoa_r+0x464>
 80076ea:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80076ec:	1e6b      	subs	r3, r5, #1
 80076ee:	930f      	str	r3, [sp, #60]	; 0x3c
 80076f0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80076f4:	2b30      	cmp	r3, #48	; 0x30
 80076f6:	d0f8      	beq.n	80076ea <_dtoa_r+0x5fa>
 80076f8:	9700      	str	r7, [sp, #0]
 80076fa:	e049      	b.n	8007790 <_dtoa_r+0x6a0>
 80076fc:	4b05      	ldr	r3, [pc, #20]	; (8007714 <_dtoa_r+0x624>)
 80076fe:	f7f8 ffa3 	bl	8000648 <__aeabi_dmul>
 8007702:	4680      	mov	r8, r0
 8007704:	4689      	mov	r9, r1
 8007706:	e7bd      	b.n	8007684 <_dtoa_r+0x594>
 8007708:	080091a8 	.word	0x080091a8
 800770c:	08009180 	.word	0x08009180
 8007710:	3ff00000 	.word	0x3ff00000
 8007714:	40240000 	.word	0x40240000
 8007718:	401c0000 	.word	0x401c0000
 800771c:	40140000 	.word	0x40140000
 8007720:	3fe00000 	.word	0x3fe00000
 8007724:	9d01      	ldr	r5, [sp, #4]
 8007726:	4656      	mov	r6, sl
 8007728:	465f      	mov	r7, fp
 800772a:	4642      	mov	r2, r8
 800772c:	464b      	mov	r3, r9
 800772e:	4630      	mov	r0, r6
 8007730:	4639      	mov	r1, r7
 8007732:	f7f9 f8b3 	bl	800089c <__aeabi_ddiv>
 8007736:	f7f9 fa37 	bl	8000ba8 <__aeabi_d2iz>
 800773a:	4682      	mov	sl, r0
 800773c:	f7f8 ff1a 	bl	8000574 <__aeabi_i2d>
 8007740:	4642      	mov	r2, r8
 8007742:	464b      	mov	r3, r9
 8007744:	f7f8 ff80 	bl	8000648 <__aeabi_dmul>
 8007748:	4602      	mov	r2, r0
 800774a:	460b      	mov	r3, r1
 800774c:	4630      	mov	r0, r6
 800774e:	4639      	mov	r1, r7
 8007750:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8007754:	f7f8 fdc0 	bl	80002d8 <__aeabi_dsub>
 8007758:	f805 6b01 	strb.w	r6, [r5], #1
 800775c:	9e01      	ldr	r6, [sp, #4]
 800775e:	9f03      	ldr	r7, [sp, #12]
 8007760:	1bae      	subs	r6, r5, r6
 8007762:	42b7      	cmp	r7, r6
 8007764:	4602      	mov	r2, r0
 8007766:	460b      	mov	r3, r1
 8007768:	d135      	bne.n	80077d6 <_dtoa_r+0x6e6>
 800776a:	f7f8 fdb7 	bl	80002dc <__adddf3>
 800776e:	4642      	mov	r2, r8
 8007770:	464b      	mov	r3, r9
 8007772:	4606      	mov	r6, r0
 8007774:	460f      	mov	r7, r1
 8007776:	f7f9 f9f7 	bl	8000b68 <__aeabi_dcmpgt>
 800777a:	b9d0      	cbnz	r0, 80077b2 <_dtoa_r+0x6c2>
 800777c:	4642      	mov	r2, r8
 800777e:	464b      	mov	r3, r9
 8007780:	4630      	mov	r0, r6
 8007782:	4639      	mov	r1, r7
 8007784:	f7f9 f9c8 	bl	8000b18 <__aeabi_dcmpeq>
 8007788:	b110      	cbz	r0, 8007790 <_dtoa_r+0x6a0>
 800778a:	f01a 0f01 	tst.w	sl, #1
 800778e:	d110      	bne.n	80077b2 <_dtoa_r+0x6c2>
 8007790:	4620      	mov	r0, r4
 8007792:	ee18 1a10 	vmov	r1, s16
 8007796:	f000 fd13 	bl	80081c0 <_Bfree>
 800779a:	2300      	movs	r3, #0
 800779c:	9800      	ldr	r0, [sp, #0]
 800779e:	702b      	strb	r3, [r5, #0]
 80077a0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80077a2:	3001      	adds	r0, #1
 80077a4:	6018      	str	r0, [r3, #0]
 80077a6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	f43f acf1 	beq.w	8007190 <_dtoa_r+0xa0>
 80077ae:	601d      	str	r5, [r3, #0]
 80077b0:	e4ee      	b.n	8007190 <_dtoa_r+0xa0>
 80077b2:	9f00      	ldr	r7, [sp, #0]
 80077b4:	462b      	mov	r3, r5
 80077b6:	461d      	mov	r5, r3
 80077b8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80077bc:	2a39      	cmp	r2, #57	; 0x39
 80077be:	d106      	bne.n	80077ce <_dtoa_r+0x6de>
 80077c0:	9a01      	ldr	r2, [sp, #4]
 80077c2:	429a      	cmp	r2, r3
 80077c4:	d1f7      	bne.n	80077b6 <_dtoa_r+0x6c6>
 80077c6:	9901      	ldr	r1, [sp, #4]
 80077c8:	2230      	movs	r2, #48	; 0x30
 80077ca:	3701      	adds	r7, #1
 80077cc:	700a      	strb	r2, [r1, #0]
 80077ce:	781a      	ldrb	r2, [r3, #0]
 80077d0:	3201      	adds	r2, #1
 80077d2:	701a      	strb	r2, [r3, #0]
 80077d4:	e790      	b.n	80076f8 <_dtoa_r+0x608>
 80077d6:	4ba6      	ldr	r3, [pc, #664]	; (8007a70 <_dtoa_r+0x980>)
 80077d8:	2200      	movs	r2, #0
 80077da:	f7f8 ff35 	bl	8000648 <__aeabi_dmul>
 80077de:	2200      	movs	r2, #0
 80077e0:	2300      	movs	r3, #0
 80077e2:	4606      	mov	r6, r0
 80077e4:	460f      	mov	r7, r1
 80077e6:	f7f9 f997 	bl	8000b18 <__aeabi_dcmpeq>
 80077ea:	2800      	cmp	r0, #0
 80077ec:	d09d      	beq.n	800772a <_dtoa_r+0x63a>
 80077ee:	e7cf      	b.n	8007790 <_dtoa_r+0x6a0>
 80077f0:	9a08      	ldr	r2, [sp, #32]
 80077f2:	2a00      	cmp	r2, #0
 80077f4:	f000 80d7 	beq.w	80079a6 <_dtoa_r+0x8b6>
 80077f8:	9a06      	ldr	r2, [sp, #24]
 80077fa:	2a01      	cmp	r2, #1
 80077fc:	f300 80ba 	bgt.w	8007974 <_dtoa_r+0x884>
 8007800:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007802:	2a00      	cmp	r2, #0
 8007804:	f000 80b2 	beq.w	800796c <_dtoa_r+0x87c>
 8007808:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800780c:	9e07      	ldr	r6, [sp, #28]
 800780e:	9d04      	ldr	r5, [sp, #16]
 8007810:	9a04      	ldr	r2, [sp, #16]
 8007812:	441a      	add	r2, r3
 8007814:	9204      	str	r2, [sp, #16]
 8007816:	9a05      	ldr	r2, [sp, #20]
 8007818:	2101      	movs	r1, #1
 800781a:	441a      	add	r2, r3
 800781c:	4620      	mov	r0, r4
 800781e:	9205      	str	r2, [sp, #20]
 8007820:	f000 fd86 	bl	8008330 <__i2b>
 8007824:	4607      	mov	r7, r0
 8007826:	2d00      	cmp	r5, #0
 8007828:	dd0c      	ble.n	8007844 <_dtoa_r+0x754>
 800782a:	9b05      	ldr	r3, [sp, #20]
 800782c:	2b00      	cmp	r3, #0
 800782e:	dd09      	ble.n	8007844 <_dtoa_r+0x754>
 8007830:	42ab      	cmp	r3, r5
 8007832:	9a04      	ldr	r2, [sp, #16]
 8007834:	bfa8      	it	ge
 8007836:	462b      	movge	r3, r5
 8007838:	1ad2      	subs	r2, r2, r3
 800783a:	9204      	str	r2, [sp, #16]
 800783c:	9a05      	ldr	r2, [sp, #20]
 800783e:	1aed      	subs	r5, r5, r3
 8007840:	1ad3      	subs	r3, r2, r3
 8007842:	9305      	str	r3, [sp, #20]
 8007844:	9b07      	ldr	r3, [sp, #28]
 8007846:	b31b      	cbz	r3, 8007890 <_dtoa_r+0x7a0>
 8007848:	9b08      	ldr	r3, [sp, #32]
 800784a:	2b00      	cmp	r3, #0
 800784c:	f000 80af 	beq.w	80079ae <_dtoa_r+0x8be>
 8007850:	2e00      	cmp	r6, #0
 8007852:	dd13      	ble.n	800787c <_dtoa_r+0x78c>
 8007854:	4639      	mov	r1, r7
 8007856:	4632      	mov	r2, r6
 8007858:	4620      	mov	r0, r4
 800785a:	f000 fe29 	bl	80084b0 <__pow5mult>
 800785e:	ee18 2a10 	vmov	r2, s16
 8007862:	4601      	mov	r1, r0
 8007864:	4607      	mov	r7, r0
 8007866:	4620      	mov	r0, r4
 8007868:	f000 fd78 	bl	800835c <__multiply>
 800786c:	ee18 1a10 	vmov	r1, s16
 8007870:	4680      	mov	r8, r0
 8007872:	4620      	mov	r0, r4
 8007874:	f000 fca4 	bl	80081c0 <_Bfree>
 8007878:	ee08 8a10 	vmov	s16, r8
 800787c:	9b07      	ldr	r3, [sp, #28]
 800787e:	1b9a      	subs	r2, r3, r6
 8007880:	d006      	beq.n	8007890 <_dtoa_r+0x7a0>
 8007882:	ee18 1a10 	vmov	r1, s16
 8007886:	4620      	mov	r0, r4
 8007888:	f000 fe12 	bl	80084b0 <__pow5mult>
 800788c:	ee08 0a10 	vmov	s16, r0
 8007890:	2101      	movs	r1, #1
 8007892:	4620      	mov	r0, r4
 8007894:	f000 fd4c 	bl	8008330 <__i2b>
 8007898:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800789a:	2b00      	cmp	r3, #0
 800789c:	4606      	mov	r6, r0
 800789e:	f340 8088 	ble.w	80079b2 <_dtoa_r+0x8c2>
 80078a2:	461a      	mov	r2, r3
 80078a4:	4601      	mov	r1, r0
 80078a6:	4620      	mov	r0, r4
 80078a8:	f000 fe02 	bl	80084b0 <__pow5mult>
 80078ac:	9b06      	ldr	r3, [sp, #24]
 80078ae:	2b01      	cmp	r3, #1
 80078b0:	4606      	mov	r6, r0
 80078b2:	f340 8081 	ble.w	80079b8 <_dtoa_r+0x8c8>
 80078b6:	f04f 0800 	mov.w	r8, #0
 80078ba:	6933      	ldr	r3, [r6, #16]
 80078bc:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80078c0:	6918      	ldr	r0, [r3, #16]
 80078c2:	f000 fce5 	bl	8008290 <__hi0bits>
 80078c6:	f1c0 0020 	rsb	r0, r0, #32
 80078ca:	9b05      	ldr	r3, [sp, #20]
 80078cc:	4418      	add	r0, r3
 80078ce:	f010 001f 	ands.w	r0, r0, #31
 80078d2:	f000 8092 	beq.w	80079fa <_dtoa_r+0x90a>
 80078d6:	f1c0 0320 	rsb	r3, r0, #32
 80078da:	2b04      	cmp	r3, #4
 80078dc:	f340 808a 	ble.w	80079f4 <_dtoa_r+0x904>
 80078e0:	f1c0 001c 	rsb	r0, r0, #28
 80078e4:	9b04      	ldr	r3, [sp, #16]
 80078e6:	4403      	add	r3, r0
 80078e8:	9304      	str	r3, [sp, #16]
 80078ea:	9b05      	ldr	r3, [sp, #20]
 80078ec:	4403      	add	r3, r0
 80078ee:	4405      	add	r5, r0
 80078f0:	9305      	str	r3, [sp, #20]
 80078f2:	9b04      	ldr	r3, [sp, #16]
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	dd07      	ble.n	8007908 <_dtoa_r+0x818>
 80078f8:	ee18 1a10 	vmov	r1, s16
 80078fc:	461a      	mov	r2, r3
 80078fe:	4620      	mov	r0, r4
 8007900:	f000 fe30 	bl	8008564 <__lshift>
 8007904:	ee08 0a10 	vmov	s16, r0
 8007908:	9b05      	ldr	r3, [sp, #20]
 800790a:	2b00      	cmp	r3, #0
 800790c:	dd05      	ble.n	800791a <_dtoa_r+0x82a>
 800790e:	4631      	mov	r1, r6
 8007910:	461a      	mov	r2, r3
 8007912:	4620      	mov	r0, r4
 8007914:	f000 fe26 	bl	8008564 <__lshift>
 8007918:	4606      	mov	r6, r0
 800791a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800791c:	2b00      	cmp	r3, #0
 800791e:	d06e      	beq.n	80079fe <_dtoa_r+0x90e>
 8007920:	ee18 0a10 	vmov	r0, s16
 8007924:	4631      	mov	r1, r6
 8007926:	f000 fe8d 	bl	8008644 <__mcmp>
 800792a:	2800      	cmp	r0, #0
 800792c:	da67      	bge.n	80079fe <_dtoa_r+0x90e>
 800792e:	9b00      	ldr	r3, [sp, #0]
 8007930:	3b01      	subs	r3, #1
 8007932:	ee18 1a10 	vmov	r1, s16
 8007936:	9300      	str	r3, [sp, #0]
 8007938:	220a      	movs	r2, #10
 800793a:	2300      	movs	r3, #0
 800793c:	4620      	mov	r0, r4
 800793e:	f000 fc61 	bl	8008204 <__multadd>
 8007942:	9b08      	ldr	r3, [sp, #32]
 8007944:	ee08 0a10 	vmov	s16, r0
 8007948:	2b00      	cmp	r3, #0
 800794a:	f000 81b1 	beq.w	8007cb0 <_dtoa_r+0xbc0>
 800794e:	2300      	movs	r3, #0
 8007950:	4639      	mov	r1, r7
 8007952:	220a      	movs	r2, #10
 8007954:	4620      	mov	r0, r4
 8007956:	f000 fc55 	bl	8008204 <__multadd>
 800795a:	9b02      	ldr	r3, [sp, #8]
 800795c:	2b00      	cmp	r3, #0
 800795e:	4607      	mov	r7, r0
 8007960:	f300 808e 	bgt.w	8007a80 <_dtoa_r+0x990>
 8007964:	9b06      	ldr	r3, [sp, #24]
 8007966:	2b02      	cmp	r3, #2
 8007968:	dc51      	bgt.n	8007a0e <_dtoa_r+0x91e>
 800796a:	e089      	b.n	8007a80 <_dtoa_r+0x990>
 800796c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800796e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007972:	e74b      	b.n	800780c <_dtoa_r+0x71c>
 8007974:	9b03      	ldr	r3, [sp, #12]
 8007976:	1e5e      	subs	r6, r3, #1
 8007978:	9b07      	ldr	r3, [sp, #28]
 800797a:	42b3      	cmp	r3, r6
 800797c:	bfbf      	itttt	lt
 800797e:	9b07      	ldrlt	r3, [sp, #28]
 8007980:	9607      	strlt	r6, [sp, #28]
 8007982:	1af2      	sublt	r2, r6, r3
 8007984:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8007986:	bfb6      	itet	lt
 8007988:	189b      	addlt	r3, r3, r2
 800798a:	1b9e      	subge	r6, r3, r6
 800798c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800798e:	9b03      	ldr	r3, [sp, #12]
 8007990:	bfb8      	it	lt
 8007992:	2600      	movlt	r6, #0
 8007994:	2b00      	cmp	r3, #0
 8007996:	bfb7      	itett	lt
 8007998:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800799c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80079a0:	1a9d      	sublt	r5, r3, r2
 80079a2:	2300      	movlt	r3, #0
 80079a4:	e734      	b.n	8007810 <_dtoa_r+0x720>
 80079a6:	9e07      	ldr	r6, [sp, #28]
 80079a8:	9d04      	ldr	r5, [sp, #16]
 80079aa:	9f08      	ldr	r7, [sp, #32]
 80079ac:	e73b      	b.n	8007826 <_dtoa_r+0x736>
 80079ae:	9a07      	ldr	r2, [sp, #28]
 80079b0:	e767      	b.n	8007882 <_dtoa_r+0x792>
 80079b2:	9b06      	ldr	r3, [sp, #24]
 80079b4:	2b01      	cmp	r3, #1
 80079b6:	dc18      	bgt.n	80079ea <_dtoa_r+0x8fa>
 80079b8:	f1ba 0f00 	cmp.w	sl, #0
 80079bc:	d115      	bne.n	80079ea <_dtoa_r+0x8fa>
 80079be:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80079c2:	b993      	cbnz	r3, 80079ea <_dtoa_r+0x8fa>
 80079c4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80079c8:	0d1b      	lsrs	r3, r3, #20
 80079ca:	051b      	lsls	r3, r3, #20
 80079cc:	b183      	cbz	r3, 80079f0 <_dtoa_r+0x900>
 80079ce:	9b04      	ldr	r3, [sp, #16]
 80079d0:	3301      	adds	r3, #1
 80079d2:	9304      	str	r3, [sp, #16]
 80079d4:	9b05      	ldr	r3, [sp, #20]
 80079d6:	3301      	adds	r3, #1
 80079d8:	9305      	str	r3, [sp, #20]
 80079da:	f04f 0801 	mov.w	r8, #1
 80079de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	f47f af6a 	bne.w	80078ba <_dtoa_r+0x7ca>
 80079e6:	2001      	movs	r0, #1
 80079e8:	e76f      	b.n	80078ca <_dtoa_r+0x7da>
 80079ea:	f04f 0800 	mov.w	r8, #0
 80079ee:	e7f6      	b.n	80079de <_dtoa_r+0x8ee>
 80079f0:	4698      	mov	r8, r3
 80079f2:	e7f4      	b.n	80079de <_dtoa_r+0x8ee>
 80079f4:	f43f af7d 	beq.w	80078f2 <_dtoa_r+0x802>
 80079f8:	4618      	mov	r0, r3
 80079fa:	301c      	adds	r0, #28
 80079fc:	e772      	b.n	80078e4 <_dtoa_r+0x7f4>
 80079fe:	9b03      	ldr	r3, [sp, #12]
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	dc37      	bgt.n	8007a74 <_dtoa_r+0x984>
 8007a04:	9b06      	ldr	r3, [sp, #24]
 8007a06:	2b02      	cmp	r3, #2
 8007a08:	dd34      	ble.n	8007a74 <_dtoa_r+0x984>
 8007a0a:	9b03      	ldr	r3, [sp, #12]
 8007a0c:	9302      	str	r3, [sp, #8]
 8007a0e:	9b02      	ldr	r3, [sp, #8]
 8007a10:	b96b      	cbnz	r3, 8007a2e <_dtoa_r+0x93e>
 8007a12:	4631      	mov	r1, r6
 8007a14:	2205      	movs	r2, #5
 8007a16:	4620      	mov	r0, r4
 8007a18:	f000 fbf4 	bl	8008204 <__multadd>
 8007a1c:	4601      	mov	r1, r0
 8007a1e:	4606      	mov	r6, r0
 8007a20:	ee18 0a10 	vmov	r0, s16
 8007a24:	f000 fe0e 	bl	8008644 <__mcmp>
 8007a28:	2800      	cmp	r0, #0
 8007a2a:	f73f adbb 	bgt.w	80075a4 <_dtoa_r+0x4b4>
 8007a2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a30:	9d01      	ldr	r5, [sp, #4]
 8007a32:	43db      	mvns	r3, r3
 8007a34:	9300      	str	r3, [sp, #0]
 8007a36:	f04f 0800 	mov.w	r8, #0
 8007a3a:	4631      	mov	r1, r6
 8007a3c:	4620      	mov	r0, r4
 8007a3e:	f000 fbbf 	bl	80081c0 <_Bfree>
 8007a42:	2f00      	cmp	r7, #0
 8007a44:	f43f aea4 	beq.w	8007790 <_dtoa_r+0x6a0>
 8007a48:	f1b8 0f00 	cmp.w	r8, #0
 8007a4c:	d005      	beq.n	8007a5a <_dtoa_r+0x96a>
 8007a4e:	45b8      	cmp	r8, r7
 8007a50:	d003      	beq.n	8007a5a <_dtoa_r+0x96a>
 8007a52:	4641      	mov	r1, r8
 8007a54:	4620      	mov	r0, r4
 8007a56:	f000 fbb3 	bl	80081c0 <_Bfree>
 8007a5a:	4639      	mov	r1, r7
 8007a5c:	4620      	mov	r0, r4
 8007a5e:	f000 fbaf 	bl	80081c0 <_Bfree>
 8007a62:	e695      	b.n	8007790 <_dtoa_r+0x6a0>
 8007a64:	2600      	movs	r6, #0
 8007a66:	4637      	mov	r7, r6
 8007a68:	e7e1      	b.n	8007a2e <_dtoa_r+0x93e>
 8007a6a:	9700      	str	r7, [sp, #0]
 8007a6c:	4637      	mov	r7, r6
 8007a6e:	e599      	b.n	80075a4 <_dtoa_r+0x4b4>
 8007a70:	40240000 	.word	0x40240000
 8007a74:	9b08      	ldr	r3, [sp, #32]
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	f000 80ca 	beq.w	8007c10 <_dtoa_r+0xb20>
 8007a7c:	9b03      	ldr	r3, [sp, #12]
 8007a7e:	9302      	str	r3, [sp, #8]
 8007a80:	2d00      	cmp	r5, #0
 8007a82:	dd05      	ble.n	8007a90 <_dtoa_r+0x9a0>
 8007a84:	4639      	mov	r1, r7
 8007a86:	462a      	mov	r2, r5
 8007a88:	4620      	mov	r0, r4
 8007a8a:	f000 fd6b 	bl	8008564 <__lshift>
 8007a8e:	4607      	mov	r7, r0
 8007a90:	f1b8 0f00 	cmp.w	r8, #0
 8007a94:	d05b      	beq.n	8007b4e <_dtoa_r+0xa5e>
 8007a96:	6879      	ldr	r1, [r7, #4]
 8007a98:	4620      	mov	r0, r4
 8007a9a:	f000 fb51 	bl	8008140 <_Balloc>
 8007a9e:	4605      	mov	r5, r0
 8007aa0:	b928      	cbnz	r0, 8007aae <_dtoa_r+0x9be>
 8007aa2:	4b87      	ldr	r3, [pc, #540]	; (8007cc0 <_dtoa_r+0xbd0>)
 8007aa4:	4602      	mov	r2, r0
 8007aa6:	f240 21ea 	movw	r1, #746	; 0x2ea
 8007aaa:	f7ff bb3b 	b.w	8007124 <_dtoa_r+0x34>
 8007aae:	693a      	ldr	r2, [r7, #16]
 8007ab0:	3202      	adds	r2, #2
 8007ab2:	0092      	lsls	r2, r2, #2
 8007ab4:	f107 010c 	add.w	r1, r7, #12
 8007ab8:	300c      	adds	r0, #12
 8007aba:	f000 fb33 	bl	8008124 <memcpy>
 8007abe:	2201      	movs	r2, #1
 8007ac0:	4629      	mov	r1, r5
 8007ac2:	4620      	mov	r0, r4
 8007ac4:	f000 fd4e 	bl	8008564 <__lshift>
 8007ac8:	9b01      	ldr	r3, [sp, #4]
 8007aca:	f103 0901 	add.w	r9, r3, #1
 8007ace:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8007ad2:	4413      	add	r3, r2
 8007ad4:	9305      	str	r3, [sp, #20]
 8007ad6:	f00a 0301 	and.w	r3, sl, #1
 8007ada:	46b8      	mov	r8, r7
 8007adc:	9304      	str	r3, [sp, #16]
 8007ade:	4607      	mov	r7, r0
 8007ae0:	4631      	mov	r1, r6
 8007ae2:	ee18 0a10 	vmov	r0, s16
 8007ae6:	f7ff fa75 	bl	8006fd4 <quorem>
 8007aea:	4641      	mov	r1, r8
 8007aec:	9002      	str	r0, [sp, #8]
 8007aee:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8007af2:	ee18 0a10 	vmov	r0, s16
 8007af6:	f000 fda5 	bl	8008644 <__mcmp>
 8007afa:	463a      	mov	r2, r7
 8007afc:	9003      	str	r0, [sp, #12]
 8007afe:	4631      	mov	r1, r6
 8007b00:	4620      	mov	r0, r4
 8007b02:	f000 fdbb 	bl	800867c <__mdiff>
 8007b06:	68c2      	ldr	r2, [r0, #12]
 8007b08:	f109 3bff 	add.w	fp, r9, #4294967295
 8007b0c:	4605      	mov	r5, r0
 8007b0e:	bb02      	cbnz	r2, 8007b52 <_dtoa_r+0xa62>
 8007b10:	4601      	mov	r1, r0
 8007b12:	ee18 0a10 	vmov	r0, s16
 8007b16:	f000 fd95 	bl	8008644 <__mcmp>
 8007b1a:	4602      	mov	r2, r0
 8007b1c:	4629      	mov	r1, r5
 8007b1e:	4620      	mov	r0, r4
 8007b20:	9207      	str	r2, [sp, #28]
 8007b22:	f000 fb4d 	bl	80081c0 <_Bfree>
 8007b26:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8007b2a:	ea43 0102 	orr.w	r1, r3, r2
 8007b2e:	9b04      	ldr	r3, [sp, #16]
 8007b30:	430b      	orrs	r3, r1
 8007b32:	464d      	mov	r5, r9
 8007b34:	d10f      	bne.n	8007b56 <_dtoa_r+0xa66>
 8007b36:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007b3a:	d02a      	beq.n	8007b92 <_dtoa_r+0xaa2>
 8007b3c:	9b03      	ldr	r3, [sp, #12]
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	dd02      	ble.n	8007b48 <_dtoa_r+0xa58>
 8007b42:	9b02      	ldr	r3, [sp, #8]
 8007b44:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8007b48:	f88b a000 	strb.w	sl, [fp]
 8007b4c:	e775      	b.n	8007a3a <_dtoa_r+0x94a>
 8007b4e:	4638      	mov	r0, r7
 8007b50:	e7ba      	b.n	8007ac8 <_dtoa_r+0x9d8>
 8007b52:	2201      	movs	r2, #1
 8007b54:	e7e2      	b.n	8007b1c <_dtoa_r+0xa2c>
 8007b56:	9b03      	ldr	r3, [sp, #12]
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	db04      	blt.n	8007b66 <_dtoa_r+0xa76>
 8007b5c:	9906      	ldr	r1, [sp, #24]
 8007b5e:	430b      	orrs	r3, r1
 8007b60:	9904      	ldr	r1, [sp, #16]
 8007b62:	430b      	orrs	r3, r1
 8007b64:	d122      	bne.n	8007bac <_dtoa_r+0xabc>
 8007b66:	2a00      	cmp	r2, #0
 8007b68:	ddee      	ble.n	8007b48 <_dtoa_r+0xa58>
 8007b6a:	ee18 1a10 	vmov	r1, s16
 8007b6e:	2201      	movs	r2, #1
 8007b70:	4620      	mov	r0, r4
 8007b72:	f000 fcf7 	bl	8008564 <__lshift>
 8007b76:	4631      	mov	r1, r6
 8007b78:	ee08 0a10 	vmov	s16, r0
 8007b7c:	f000 fd62 	bl	8008644 <__mcmp>
 8007b80:	2800      	cmp	r0, #0
 8007b82:	dc03      	bgt.n	8007b8c <_dtoa_r+0xa9c>
 8007b84:	d1e0      	bne.n	8007b48 <_dtoa_r+0xa58>
 8007b86:	f01a 0f01 	tst.w	sl, #1
 8007b8a:	d0dd      	beq.n	8007b48 <_dtoa_r+0xa58>
 8007b8c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007b90:	d1d7      	bne.n	8007b42 <_dtoa_r+0xa52>
 8007b92:	2339      	movs	r3, #57	; 0x39
 8007b94:	f88b 3000 	strb.w	r3, [fp]
 8007b98:	462b      	mov	r3, r5
 8007b9a:	461d      	mov	r5, r3
 8007b9c:	3b01      	subs	r3, #1
 8007b9e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007ba2:	2a39      	cmp	r2, #57	; 0x39
 8007ba4:	d071      	beq.n	8007c8a <_dtoa_r+0xb9a>
 8007ba6:	3201      	adds	r2, #1
 8007ba8:	701a      	strb	r2, [r3, #0]
 8007baa:	e746      	b.n	8007a3a <_dtoa_r+0x94a>
 8007bac:	2a00      	cmp	r2, #0
 8007bae:	dd07      	ble.n	8007bc0 <_dtoa_r+0xad0>
 8007bb0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007bb4:	d0ed      	beq.n	8007b92 <_dtoa_r+0xaa2>
 8007bb6:	f10a 0301 	add.w	r3, sl, #1
 8007bba:	f88b 3000 	strb.w	r3, [fp]
 8007bbe:	e73c      	b.n	8007a3a <_dtoa_r+0x94a>
 8007bc0:	9b05      	ldr	r3, [sp, #20]
 8007bc2:	f809 ac01 	strb.w	sl, [r9, #-1]
 8007bc6:	4599      	cmp	r9, r3
 8007bc8:	d047      	beq.n	8007c5a <_dtoa_r+0xb6a>
 8007bca:	ee18 1a10 	vmov	r1, s16
 8007bce:	2300      	movs	r3, #0
 8007bd0:	220a      	movs	r2, #10
 8007bd2:	4620      	mov	r0, r4
 8007bd4:	f000 fb16 	bl	8008204 <__multadd>
 8007bd8:	45b8      	cmp	r8, r7
 8007bda:	ee08 0a10 	vmov	s16, r0
 8007bde:	f04f 0300 	mov.w	r3, #0
 8007be2:	f04f 020a 	mov.w	r2, #10
 8007be6:	4641      	mov	r1, r8
 8007be8:	4620      	mov	r0, r4
 8007bea:	d106      	bne.n	8007bfa <_dtoa_r+0xb0a>
 8007bec:	f000 fb0a 	bl	8008204 <__multadd>
 8007bf0:	4680      	mov	r8, r0
 8007bf2:	4607      	mov	r7, r0
 8007bf4:	f109 0901 	add.w	r9, r9, #1
 8007bf8:	e772      	b.n	8007ae0 <_dtoa_r+0x9f0>
 8007bfa:	f000 fb03 	bl	8008204 <__multadd>
 8007bfe:	4639      	mov	r1, r7
 8007c00:	4680      	mov	r8, r0
 8007c02:	2300      	movs	r3, #0
 8007c04:	220a      	movs	r2, #10
 8007c06:	4620      	mov	r0, r4
 8007c08:	f000 fafc 	bl	8008204 <__multadd>
 8007c0c:	4607      	mov	r7, r0
 8007c0e:	e7f1      	b.n	8007bf4 <_dtoa_r+0xb04>
 8007c10:	9b03      	ldr	r3, [sp, #12]
 8007c12:	9302      	str	r3, [sp, #8]
 8007c14:	9d01      	ldr	r5, [sp, #4]
 8007c16:	ee18 0a10 	vmov	r0, s16
 8007c1a:	4631      	mov	r1, r6
 8007c1c:	f7ff f9da 	bl	8006fd4 <quorem>
 8007c20:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8007c24:	9b01      	ldr	r3, [sp, #4]
 8007c26:	f805 ab01 	strb.w	sl, [r5], #1
 8007c2a:	1aea      	subs	r2, r5, r3
 8007c2c:	9b02      	ldr	r3, [sp, #8]
 8007c2e:	4293      	cmp	r3, r2
 8007c30:	dd09      	ble.n	8007c46 <_dtoa_r+0xb56>
 8007c32:	ee18 1a10 	vmov	r1, s16
 8007c36:	2300      	movs	r3, #0
 8007c38:	220a      	movs	r2, #10
 8007c3a:	4620      	mov	r0, r4
 8007c3c:	f000 fae2 	bl	8008204 <__multadd>
 8007c40:	ee08 0a10 	vmov	s16, r0
 8007c44:	e7e7      	b.n	8007c16 <_dtoa_r+0xb26>
 8007c46:	9b02      	ldr	r3, [sp, #8]
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	bfc8      	it	gt
 8007c4c:	461d      	movgt	r5, r3
 8007c4e:	9b01      	ldr	r3, [sp, #4]
 8007c50:	bfd8      	it	le
 8007c52:	2501      	movle	r5, #1
 8007c54:	441d      	add	r5, r3
 8007c56:	f04f 0800 	mov.w	r8, #0
 8007c5a:	ee18 1a10 	vmov	r1, s16
 8007c5e:	2201      	movs	r2, #1
 8007c60:	4620      	mov	r0, r4
 8007c62:	f000 fc7f 	bl	8008564 <__lshift>
 8007c66:	4631      	mov	r1, r6
 8007c68:	ee08 0a10 	vmov	s16, r0
 8007c6c:	f000 fcea 	bl	8008644 <__mcmp>
 8007c70:	2800      	cmp	r0, #0
 8007c72:	dc91      	bgt.n	8007b98 <_dtoa_r+0xaa8>
 8007c74:	d102      	bne.n	8007c7c <_dtoa_r+0xb8c>
 8007c76:	f01a 0f01 	tst.w	sl, #1
 8007c7a:	d18d      	bne.n	8007b98 <_dtoa_r+0xaa8>
 8007c7c:	462b      	mov	r3, r5
 8007c7e:	461d      	mov	r5, r3
 8007c80:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007c84:	2a30      	cmp	r2, #48	; 0x30
 8007c86:	d0fa      	beq.n	8007c7e <_dtoa_r+0xb8e>
 8007c88:	e6d7      	b.n	8007a3a <_dtoa_r+0x94a>
 8007c8a:	9a01      	ldr	r2, [sp, #4]
 8007c8c:	429a      	cmp	r2, r3
 8007c8e:	d184      	bne.n	8007b9a <_dtoa_r+0xaaa>
 8007c90:	9b00      	ldr	r3, [sp, #0]
 8007c92:	3301      	adds	r3, #1
 8007c94:	9300      	str	r3, [sp, #0]
 8007c96:	2331      	movs	r3, #49	; 0x31
 8007c98:	7013      	strb	r3, [r2, #0]
 8007c9a:	e6ce      	b.n	8007a3a <_dtoa_r+0x94a>
 8007c9c:	4b09      	ldr	r3, [pc, #36]	; (8007cc4 <_dtoa_r+0xbd4>)
 8007c9e:	f7ff ba95 	b.w	80071cc <_dtoa_r+0xdc>
 8007ca2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	f47f aa6e 	bne.w	8007186 <_dtoa_r+0x96>
 8007caa:	4b07      	ldr	r3, [pc, #28]	; (8007cc8 <_dtoa_r+0xbd8>)
 8007cac:	f7ff ba8e 	b.w	80071cc <_dtoa_r+0xdc>
 8007cb0:	9b02      	ldr	r3, [sp, #8]
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	dcae      	bgt.n	8007c14 <_dtoa_r+0xb24>
 8007cb6:	9b06      	ldr	r3, [sp, #24]
 8007cb8:	2b02      	cmp	r3, #2
 8007cba:	f73f aea8 	bgt.w	8007a0e <_dtoa_r+0x91e>
 8007cbe:	e7a9      	b.n	8007c14 <_dtoa_r+0xb24>
 8007cc0:	080090b3 	.word	0x080090b3
 8007cc4:	08009010 	.word	0x08009010
 8007cc8:	08009034 	.word	0x08009034

08007ccc <__sflush_r>:
 8007ccc:	898a      	ldrh	r2, [r1, #12]
 8007cce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007cd2:	4605      	mov	r5, r0
 8007cd4:	0710      	lsls	r0, r2, #28
 8007cd6:	460c      	mov	r4, r1
 8007cd8:	d458      	bmi.n	8007d8c <__sflush_r+0xc0>
 8007cda:	684b      	ldr	r3, [r1, #4]
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	dc05      	bgt.n	8007cec <__sflush_r+0x20>
 8007ce0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	dc02      	bgt.n	8007cec <__sflush_r+0x20>
 8007ce6:	2000      	movs	r0, #0
 8007ce8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007cec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007cee:	2e00      	cmp	r6, #0
 8007cf0:	d0f9      	beq.n	8007ce6 <__sflush_r+0x1a>
 8007cf2:	2300      	movs	r3, #0
 8007cf4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007cf8:	682f      	ldr	r7, [r5, #0]
 8007cfa:	602b      	str	r3, [r5, #0]
 8007cfc:	d032      	beq.n	8007d64 <__sflush_r+0x98>
 8007cfe:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007d00:	89a3      	ldrh	r3, [r4, #12]
 8007d02:	075a      	lsls	r2, r3, #29
 8007d04:	d505      	bpl.n	8007d12 <__sflush_r+0x46>
 8007d06:	6863      	ldr	r3, [r4, #4]
 8007d08:	1ac0      	subs	r0, r0, r3
 8007d0a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007d0c:	b10b      	cbz	r3, 8007d12 <__sflush_r+0x46>
 8007d0e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007d10:	1ac0      	subs	r0, r0, r3
 8007d12:	2300      	movs	r3, #0
 8007d14:	4602      	mov	r2, r0
 8007d16:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007d18:	6a21      	ldr	r1, [r4, #32]
 8007d1a:	4628      	mov	r0, r5
 8007d1c:	47b0      	blx	r6
 8007d1e:	1c43      	adds	r3, r0, #1
 8007d20:	89a3      	ldrh	r3, [r4, #12]
 8007d22:	d106      	bne.n	8007d32 <__sflush_r+0x66>
 8007d24:	6829      	ldr	r1, [r5, #0]
 8007d26:	291d      	cmp	r1, #29
 8007d28:	d82c      	bhi.n	8007d84 <__sflush_r+0xb8>
 8007d2a:	4a2a      	ldr	r2, [pc, #168]	; (8007dd4 <__sflush_r+0x108>)
 8007d2c:	40ca      	lsrs	r2, r1
 8007d2e:	07d6      	lsls	r6, r2, #31
 8007d30:	d528      	bpl.n	8007d84 <__sflush_r+0xb8>
 8007d32:	2200      	movs	r2, #0
 8007d34:	6062      	str	r2, [r4, #4]
 8007d36:	04d9      	lsls	r1, r3, #19
 8007d38:	6922      	ldr	r2, [r4, #16]
 8007d3a:	6022      	str	r2, [r4, #0]
 8007d3c:	d504      	bpl.n	8007d48 <__sflush_r+0x7c>
 8007d3e:	1c42      	adds	r2, r0, #1
 8007d40:	d101      	bne.n	8007d46 <__sflush_r+0x7a>
 8007d42:	682b      	ldr	r3, [r5, #0]
 8007d44:	b903      	cbnz	r3, 8007d48 <__sflush_r+0x7c>
 8007d46:	6560      	str	r0, [r4, #84]	; 0x54
 8007d48:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007d4a:	602f      	str	r7, [r5, #0]
 8007d4c:	2900      	cmp	r1, #0
 8007d4e:	d0ca      	beq.n	8007ce6 <__sflush_r+0x1a>
 8007d50:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007d54:	4299      	cmp	r1, r3
 8007d56:	d002      	beq.n	8007d5e <__sflush_r+0x92>
 8007d58:	4628      	mov	r0, r5
 8007d5a:	f000 fd8b 	bl	8008874 <_free_r>
 8007d5e:	2000      	movs	r0, #0
 8007d60:	6360      	str	r0, [r4, #52]	; 0x34
 8007d62:	e7c1      	b.n	8007ce8 <__sflush_r+0x1c>
 8007d64:	6a21      	ldr	r1, [r4, #32]
 8007d66:	2301      	movs	r3, #1
 8007d68:	4628      	mov	r0, r5
 8007d6a:	47b0      	blx	r6
 8007d6c:	1c41      	adds	r1, r0, #1
 8007d6e:	d1c7      	bne.n	8007d00 <__sflush_r+0x34>
 8007d70:	682b      	ldr	r3, [r5, #0]
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d0c4      	beq.n	8007d00 <__sflush_r+0x34>
 8007d76:	2b1d      	cmp	r3, #29
 8007d78:	d001      	beq.n	8007d7e <__sflush_r+0xb2>
 8007d7a:	2b16      	cmp	r3, #22
 8007d7c:	d101      	bne.n	8007d82 <__sflush_r+0xb6>
 8007d7e:	602f      	str	r7, [r5, #0]
 8007d80:	e7b1      	b.n	8007ce6 <__sflush_r+0x1a>
 8007d82:	89a3      	ldrh	r3, [r4, #12]
 8007d84:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007d88:	81a3      	strh	r3, [r4, #12]
 8007d8a:	e7ad      	b.n	8007ce8 <__sflush_r+0x1c>
 8007d8c:	690f      	ldr	r7, [r1, #16]
 8007d8e:	2f00      	cmp	r7, #0
 8007d90:	d0a9      	beq.n	8007ce6 <__sflush_r+0x1a>
 8007d92:	0793      	lsls	r3, r2, #30
 8007d94:	680e      	ldr	r6, [r1, #0]
 8007d96:	bf08      	it	eq
 8007d98:	694b      	ldreq	r3, [r1, #20]
 8007d9a:	600f      	str	r7, [r1, #0]
 8007d9c:	bf18      	it	ne
 8007d9e:	2300      	movne	r3, #0
 8007da0:	eba6 0807 	sub.w	r8, r6, r7
 8007da4:	608b      	str	r3, [r1, #8]
 8007da6:	f1b8 0f00 	cmp.w	r8, #0
 8007daa:	dd9c      	ble.n	8007ce6 <__sflush_r+0x1a>
 8007dac:	6a21      	ldr	r1, [r4, #32]
 8007dae:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007db0:	4643      	mov	r3, r8
 8007db2:	463a      	mov	r2, r7
 8007db4:	4628      	mov	r0, r5
 8007db6:	47b0      	blx	r6
 8007db8:	2800      	cmp	r0, #0
 8007dba:	dc06      	bgt.n	8007dca <__sflush_r+0xfe>
 8007dbc:	89a3      	ldrh	r3, [r4, #12]
 8007dbe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007dc2:	81a3      	strh	r3, [r4, #12]
 8007dc4:	f04f 30ff 	mov.w	r0, #4294967295
 8007dc8:	e78e      	b.n	8007ce8 <__sflush_r+0x1c>
 8007dca:	4407      	add	r7, r0
 8007dcc:	eba8 0800 	sub.w	r8, r8, r0
 8007dd0:	e7e9      	b.n	8007da6 <__sflush_r+0xda>
 8007dd2:	bf00      	nop
 8007dd4:	20400001 	.word	0x20400001

08007dd8 <_fflush_r>:
 8007dd8:	b538      	push	{r3, r4, r5, lr}
 8007dda:	690b      	ldr	r3, [r1, #16]
 8007ddc:	4605      	mov	r5, r0
 8007dde:	460c      	mov	r4, r1
 8007de0:	b913      	cbnz	r3, 8007de8 <_fflush_r+0x10>
 8007de2:	2500      	movs	r5, #0
 8007de4:	4628      	mov	r0, r5
 8007de6:	bd38      	pop	{r3, r4, r5, pc}
 8007de8:	b118      	cbz	r0, 8007df2 <_fflush_r+0x1a>
 8007dea:	6983      	ldr	r3, [r0, #24]
 8007dec:	b90b      	cbnz	r3, 8007df2 <_fflush_r+0x1a>
 8007dee:	f000 f887 	bl	8007f00 <__sinit>
 8007df2:	4b14      	ldr	r3, [pc, #80]	; (8007e44 <_fflush_r+0x6c>)
 8007df4:	429c      	cmp	r4, r3
 8007df6:	d11b      	bne.n	8007e30 <_fflush_r+0x58>
 8007df8:	686c      	ldr	r4, [r5, #4]
 8007dfa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d0ef      	beq.n	8007de2 <_fflush_r+0xa>
 8007e02:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007e04:	07d0      	lsls	r0, r2, #31
 8007e06:	d404      	bmi.n	8007e12 <_fflush_r+0x3a>
 8007e08:	0599      	lsls	r1, r3, #22
 8007e0a:	d402      	bmi.n	8007e12 <_fflush_r+0x3a>
 8007e0c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007e0e:	f000 f91a 	bl	8008046 <__retarget_lock_acquire_recursive>
 8007e12:	4628      	mov	r0, r5
 8007e14:	4621      	mov	r1, r4
 8007e16:	f7ff ff59 	bl	8007ccc <__sflush_r>
 8007e1a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007e1c:	07da      	lsls	r2, r3, #31
 8007e1e:	4605      	mov	r5, r0
 8007e20:	d4e0      	bmi.n	8007de4 <_fflush_r+0xc>
 8007e22:	89a3      	ldrh	r3, [r4, #12]
 8007e24:	059b      	lsls	r3, r3, #22
 8007e26:	d4dd      	bmi.n	8007de4 <_fflush_r+0xc>
 8007e28:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007e2a:	f000 f90d 	bl	8008048 <__retarget_lock_release_recursive>
 8007e2e:	e7d9      	b.n	8007de4 <_fflush_r+0xc>
 8007e30:	4b05      	ldr	r3, [pc, #20]	; (8007e48 <_fflush_r+0x70>)
 8007e32:	429c      	cmp	r4, r3
 8007e34:	d101      	bne.n	8007e3a <_fflush_r+0x62>
 8007e36:	68ac      	ldr	r4, [r5, #8]
 8007e38:	e7df      	b.n	8007dfa <_fflush_r+0x22>
 8007e3a:	4b04      	ldr	r3, [pc, #16]	; (8007e4c <_fflush_r+0x74>)
 8007e3c:	429c      	cmp	r4, r3
 8007e3e:	bf08      	it	eq
 8007e40:	68ec      	ldreq	r4, [r5, #12]
 8007e42:	e7da      	b.n	8007dfa <_fflush_r+0x22>
 8007e44:	080090e4 	.word	0x080090e4
 8007e48:	08009104 	.word	0x08009104
 8007e4c:	080090c4 	.word	0x080090c4

08007e50 <std>:
 8007e50:	2300      	movs	r3, #0
 8007e52:	b510      	push	{r4, lr}
 8007e54:	4604      	mov	r4, r0
 8007e56:	e9c0 3300 	strd	r3, r3, [r0]
 8007e5a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007e5e:	6083      	str	r3, [r0, #8]
 8007e60:	8181      	strh	r1, [r0, #12]
 8007e62:	6643      	str	r3, [r0, #100]	; 0x64
 8007e64:	81c2      	strh	r2, [r0, #14]
 8007e66:	6183      	str	r3, [r0, #24]
 8007e68:	4619      	mov	r1, r3
 8007e6a:	2208      	movs	r2, #8
 8007e6c:	305c      	adds	r0, #92	; 0x5c
 8007e6e:	f7fe faf1 	bl	8006454 <memset>
 8007e72:	4b05      	ldr	r3, [pc, #20]	; (8007e88 <std+0x38>)
 8007e74:	6263      	str	r3, [r4, #36]	; 0x24
 8007e76:	4b05      	ldr	r3, [pc, #20]	; (8007e8c <std+0x3c>)
 8007e78:	62a3      	str	r3, [r4, #40]	; 0x28
 8007e7a:	4b05      	ldr	r3, [pc, #20]	; (8007e90 <std+0x40>)
 8007e7c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007e7e:	4b05      	ldr	r3, [pc, #20]	; (8007e94 <std+0x44>)
 8007e80:	6224      	str	r4, [r4, #32]
 8007e82:	6323      	str	r3, [r4, #48]	; 0x30
 8007e84:	bd10      	pop	{r4, pc}
 8007e86:	bf00      	nop
 8007e88:	08008d09 	.word	0x08008d09
 8007e8c:	08008d2b 	.word	0x08008d2b
 8007e90:	08008d63 	.word	0x08008d63
 8007e94:	08008d87 	.word	0x08008d87

08007e98 <_cleanup_r>:
 8007e98:	4901      	ldr	r1, [pc, #4]	; (8007ea0 <_cleanup_r+0x8>)
 8007e9a:	f000 b8af 	b.w	8007ffc <_fwalk_reent>
 8007e9e:	bf00      	nop
 8007ea0:	08007dd9 	.word	0x08007dd9

08007ea4 <__sfmoreglue>:
 8007ea4:	b570      	push	{r4, r5, r6, lr}
 8007ea6:	2268      	movs	r2, #104	; 0x68
 8007ea8:	1e4d      	subs	r5, r1, #1
 8007eaa:	4355      	muls	r5, r2
 8007eac:	460e      	mov	r6, r1
 8007eae:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007eb2:	f000 fd4b 	bl	800894c <_malloc_r>
 8007eb6:	4604      	mov	r4, r0
 8007eb8:	b140      	cbz	r0, 8007ecc <__sfmoreglue+0x28>
 8007eba:	2100      	movs	r1, #0
 8007ebc:	e9c0 1600 	strd	r1, r6, [r0]
 8007ec0:	300c      	adds	r0, #12
 8007ec2:	60a0      	str	r0, [r4, #8]
 8007ec4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007ec8:	f7fe fac4 	bl	8006454 <memset>
 8007ecc:	4620      	mov	r0, r4
 8007ece:	bd70      	pop	{r4, r5, r6, pc}

08007ed0 <__sfp_lock_acquire>:
 8007ed0:	4801      	ldr	r0, [pc, #4]	; (8007ed8 <__sfp_lock_acquire+0x8>)
 8007ed2:	f000 b8b8 	b.w	8008046 <__retarget_lock_acquire_recursive>
 8007ed6:	bf00      	nop
 8007ed8:	200003a5 	.word	0x200003a5

08007edc <__sfp_lock_release>:
 8007edc:	4801      	ldr	r0, [pc, #4]	; (8007ee4 <__sfp_lock_release+0x8>)
 8007ede:	f000 b8b3 	b.w	8008048 <__retarget_lock_release_recursive>
 8007ee2:	bf00      	nop
 8007ee4:	200003a5 	.word	0x200003a5

08007ee8 <__sinit_lock_acquire>:
 8007ee8:	4801      	ldr	r0, [pc, #4]	; (8007ef0 <__sinit_lock_acquire+0x8>)
 8007eea:	f000 b8ac 	b.w	8008046 <__retarget_lock_acquire_recursive>
 8007eee:	bf00      	nop
 8007ef0:	200003a6 	.word	0x200003a6

08007ef4 <__sinit_lock_release>:
 8007ef4:	4801      	ldr	r0, [pc, #4]	; (8007efc <__sinit_lock_release+0x8>)
 8007ef6:	f000 b8a7 	b.w	8008048 <__retarget_lock_release_recursive>
 8007efa:	bf00      	nop
 8007efc:	200003a6 	.word	0x200003a6

08007f00 <__sinit>:
 8007f00:	b510      	push	{r4, lr}
 8007f02:	4604      	mov	r4, r0
 8007f04:	f7ff fff0 	bl	8007ee8 <__sinit_lock_acquire>
 8007f08:	69a3      	ldr	r3, [r4, #24]
 8007f0a:	b11b      	cbz	r3, 8007f14 <__sinit+0x14>
 8007f0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007f10:	f7ff bff0 	b.w	8007ef4 <__sinit_lock_release>
 8007f14:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007f18:	6523      	str	r3, [r4, #80]	; 0x50
 8007f1a:	4b13      	ldr	r3, [pc, #76]	; (8007f68 <__sinit+0x68>)
 8007f1c:	4a13      	ldr	r2, [pc, #76]	; (8007f6c <__sinit+0x6c>)
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	62a2      	str	r2, [r4, #40]	; 0x28
 8007f22:	42a3      	cmp	r3, r4
 8007f24:	bf04      	itt	eq
 8007f26:	2301      	moveq	r3, #1
 8007f28:	61a3      	streq	r3, [r4, #24]
 8007f2a:	4620      	mov	r0, r4
 8007f2c:	f000 f820 	bl	8007f70 <__sfp>
 8007f30:	6060      	str	r0, [r4, #4]
 8007f32:	4620      	mov	r0, r4
 8007f34:	f000 f81c 	bl	8007f70 <__sfp>
 8007f38:	60a0      	str	r0, [r4, #8]
 8007f3a:	4620      	mov	r0, r4
 8007f3c:	f000 f818 	bl	8007f70 <__sfp>
 8007f40:	2200      	movs	r2, #0
 8007f42:	60e0      	str	r0, [r4, #12]
 8007f44:	2104      	movs	r1, #4
 8007f46:	6860      	ldr	r0, [r4, #4]
 8007f48:	f7ff ff82 	bl	8007e50 <std>
 8007f4c:	68a0      	ldr	r0, [r4, #8]
 8007f4e:	2201      	movs	r2, #1
 8007f50:	2109      	movs	r1, #9
 8007f52:	f7ff ff7d 	bl	8007e50 <std>
 8007f56:	68e0      	ldr	r0, [r4, #12]
 8007f58:	2202      	movs	r2, #2
 8007f5a:	2112      	movs	r1, #18
 8007f5c:	f7ff ff78 	bl	8007e50 <std>
 8007f60:	2301      	movs	r3, #1
 8007f62:	61a3      	str	r3, [r4, #24]
 8007f64:	e7d2      	b.n	8007f0c <__sinit+0xc>
 8007f66:	bf00      	nop
 8007f68:	08008ffc 	.word	0x08008ffc
 8007f6c:	08007e99 	.word	0x08007e99

08007f70 <__sfp>:
 8007f70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f72:	4607      	mov	r7, r0
 8007f74:	f7ff ffac 	bl	8007ed0 <__sfp_lock_acquire>
 8007f78:	4b1e      	ldr	r3, [pc, #120]	; (8007ff4 <__sfp+0x84>)
 8007f7a:	681e      	ldr	r6, [r3, #0]
 8007f7c:	69b3      	ldr	r3, [r6, #24]
 8007f7e:	b913      	cbnz	r3, 8007f86 <__sfp+0x16>
 8007f80:	4630      	mov	r0, r6
 8007f82:	f7ff ffbd 	bl	8007f00 <__sinit>
 8007f86:	3648      	adds	r6, #72	; 0x48
 8007f88:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007f8c:	3b01      	subs	r3, #1
 8007f8e:	d503      	bpl.n	8007f98 <__sfp+0x28>
 8007f90:	6833      	ldr	r3, [r6, #0]
 8007f92:	b30b      	cbz	r3, 8007fd8 <__sfp+0x68>
 8007f94:	6836      	ldr	r6, [r6, #0]
 8007f96:	e7f7      	b.n	8007f88 <__sfp+0x18>
 8007f98:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007f9c:	b9d5      	cbnz	r5, 8007fd4 <__sfp+0x64>
 8007f9e:	4b16      	ldr	r3, [pc, #88]	; (8007ff8 <__sfp+0x88>)
 8007fa0:	60e3      	str	r3, [r4, #12]
 8007fa2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007fa6:	6665      	str	r5, [r4, #100]	; 0x64
 8007fa8:	f000 f84c 	bl	8008044 <__retarget_lock_init_recursive>
 8007fac:	f7ff ff96 	bl	8007edc <__sfp_lock_release>
 8007fb0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007fb4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007fb8:	6025      	str	r5, [r4, #0]
 8007fba:	61a5      	str	r5, [r4, #24]
 8007fbc:	2208      	movs	r2, #8
 8007fbe:	4629      	mov	r1, r5
 8007fc0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007fc4:	f7fe fa46 	bl	8006454 <memset>
 8007fc8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007fcc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007fd0:	4620      	mov	r0, r4
 8007fd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007fd4:	3468      	adds	r4, #104	; 0x68
 8007fd6:	e7d9      	b.n	8007f8c <__sfp+0x1c>
 8007fd8:	2104      	movs	r1, #4
 8007fda:	4638      	mov	r0, r7
 8007fdc:	f7ff ff62 	bl	8007ea4 <__sfmoreglue>
 8007fe0:	4604      	mov	r4, r0
 8007fe2:	6030      	str	r0, [r6, #0]
 8007fe4:	2800      	cmp	r0, #0
 8007fe6:	d1d5      	bne.n	8007f94 <__sfp+0x24>
 8007fe8:	f7ff ff78 	bl	8007edc <__sfp_lock_release>
 8007fec:	230c      	movs	r3, #12
 8007fee:	603b      	str	r3, [r7, #0]
 8007ff0:	e7ee      	b.n	8007fd0 <__sfp+0x60>
 8007ff2:	bf00      	nop
 8007ff4:	08008ffc 	.word	0x08008ffc
 8007ff8:	ffff0001 	.word	0xffff0001

08007ffc <_fwalk_reent>:
 8007ffc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008000:	4606      	mov	r6, r0
 8008002:	4688      	mov	r8, r1
 8008004:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008008:	2700      	movs	r7, #0
 800800a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800800e:	f1b9 0901 	subs.w	r9, r9, #1
 8008012:	d505      	bpl.n	8008020 <_fwalk_reent+0x24>
 8008014:	6824      	ldr	r4, [r4, #0]
 8008016:	2c00      	cmp	r4, #0
 8008018:	d1f7      	bne.n	800800a <_fwalk_reent+0xe>
 800801a:	4638      	mov	r0, r7
 800801c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008020:	89ab      	ldrh	r3, [r5, #12]
 8008022:	2b01      	cmp	r3, #1
 8008024:	d907      	bls.n	8008036 <_fwalk_reent+0x3a>
 8008026:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800802a:	3301      	adds	r3, #1
 800802c:	d003      	beq.n	8008036 <_fwalk_reent+0x3a>
 800802e:	4629      	mov	r1, r5
 8008030:	4630      	mov	r0, r6
 8008032:	47c0      	blx	r8
 8008034:	4307      	orrs	r7, r0
 8008036:	3568      	adds	r5, #104	; 0x68
 8008038:	e7e9      	b.n	800800e <_fwalk_reent+0x12>
	...

0800803c <_localeconv_r>:
 800803c:	4800      	ldr	r0, [pc, #0]	; (8008040 <_localeconv_r+0x4>)
 800803e:	4770      	bx	lr
 8008040:	20000160 	.word	0x20000160

08008044 <__retarget_lock_init_recursive>:
 8008044:	4770      	bx	lr

08008046 <__retarget_lock_acquire_recursive>:
 8008046:	4770      	bx	lr

08008048 <__retarget_lock_release_recursive>:
 8008048:	4770      	bx	lr

0800804a <__swhatbuf_r>:
 800804a:	b570      	push	{r4, r5, r6, lr}
 800804c:	460e      	mov	r6, r1
 800804e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008052:	2900      	cmp	r1, #0
 8008054:	b096      	sub	sp, #88	; 0x58
 8008056:	4614      	mov	r4, r2
 8008058:	461d      	mov	r5, r3
 800805a:	da08      	bge.n	800806e <__swhatbuf_r+0x24>
 800805c:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8008060:	2200      	movs	r2, #0
 8008062:	602a      	str	r2, [r5, #0]
 8008064:	061a      	lsls	r2, r3, #24
 8008066:	d410      	bmi.n	800808a <__swhatbuf_r+0x40>
 8008068:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800806c:	e00e      	b.n	800808c <__swhatbuf_r+0x42>
 800806e:	466a      	mov	r2, sp
 8008070:	f000 fee0 	bl	8008e34 <_fstat_r>
 8008074:	2800      	cmp	r0, #0
 8008076:	dbf1      	blt.n	800805c <__swhatbuf_r+0x12>
 8008078:	9a01      	ldr	r2, [sp, #4]
 800807a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800807e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008082:	425a      	negs	r2, r3
 8008084:	415a      	adcs	r2, r3
 8008086:	602a      	str	r2, [r5, #0]
 8008088:	e7ee      	b.n	8008068 <__swhatbuf_r+0x1e>
 800808a:	2340      	movs	r3, #64	; 0x40
 800808c:	2000      	movs	r0, #0
 800808e:	6023      	str	r3, [r4, #0]
 8008090:	b016      	add	sp, #88	; 0x58
 8008092:	bd70      	pop	{r4, r5, r6, pc}

08008094 <__smakebuf_r>:
 8008094:	898b      	ldrh	r3, [r1, #12]
 8008096:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008098:	079d      	lsls	r5, r3, #30
 800809a:	4606      	mov	r6, r0
 800809c:	460c      	mov	r4, r1
 800809e:	d507      	bpl.n	80080b0 <__smakebuf_r+0x1c>
 80080a0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80080a4:	6023      	str	r3, [r4, #0]
 80080a6:	6123      	str	r3, [r4, #16]
 80080a8:	2301      	movs	r3, #1
 80080aa:	6163      	str	r3, [r4, #20]
 80080ac:	b002      	add	sp, #8
 80080ae:	bd70      	pop	{r4, r5, r6, pc}
 80080b0:	ab01      	add	r3, sp, #4
 80080b2:	466a      	mov	r2, sp
 80080b4:	f7ff ffc9 	bl	800804a <__swhatbuf_r>
 80080b8:	9900      	ldr	r1, [sp, #0]
 80080ba:	4605      	mov	r5, r0
 80080bc:	4630      	mov	r0, r6
 80080be:	f000 fc45 	bl	800894c <_malloc_r>
 80080c2:	b948      	cbnz	r0, 80080d8 <__smakebuf_r+0x44>
 80080c4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80080c8:	059a      	lsls	r2, r3, #22
 80080ca:	d4ef      	bmi.n	80080ac <__smakebuf_r+0x18>
 80080cc:	f023 0303 	bic.w	r3, r3, #3
 80080d0:	f043 0302 	orr.w	r3, r3, #2
 80080d4:	81a3      	strh	r3, [r4, #12]
 80080d6:	e7e3      	b.n	80080a0 <__smakebuf_r+0xc>
 80080d8:	4b0d      	ldr	r3, [pc, #52]	; (8008110 <__smakebuf_r+0x7c>)
 80080da:	62b3      	str	r3, [r6, #40]	; 0x28
 80080dc:	89a3      	ldrh	r3, [r4, #12]
 80080de:	6020      	str	r0, [r4, #0]
 80080e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80080e4:	81a3      	strh	r3, [r4, #12]
 80080e6:	9b00      	ldr	r3, [sp, #0]
 80080e8:	6163      	str	r3, [r4, #20]
 80080ea:	9b01      	ldr	r3, [sp, #4]
 80080ec:	6120      	str	r0, [r4, #16]
 80080ee:	b15b      	cbz	r3, 8008108 <__smakebuf_r+0x74>
 80080f0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80080f4:	4630      	mov	r0, r6
 80080f6:	f000 feaf 	bl	8008e58 <_isatty_r>
 80080fa:	b128      	cbz	r0, 8008108 <__smakebuf_r+0x74>
 80080fc:	89a3      	ldrh	r3, [r4, #12]
 80080fe:	f023 0303 	bic.w	r3, r3, #3
 8008102:	f043 0301 	orr.w	r3, r3, #1
 8008106:	81a3      	strh	r3, [r4, #12]
 8008108:	89a0      	ldrh	r0, [r4, #12]
 800810a:	4305      	orrs	r5, r0
 800810c:	81a5      	strh	r5, [r4, #12]
 800810e:	e7cd      	b.n	80080ac <__smakebuf_r+0x18>
 8008110:	08007e99 	.word	0x08007e99

08008114 <malloc>:
 8008114:	4b02      	ldr	r3, [pc, #8]	; (8008120 <malloc+0xc>)
 8008116:	4601      	mov	r1, r0
 8008118:	6818      	ldr	r0, [r3, #0]
 800811a:	f000 bc17 	b.w	800894c <_malloc_r>
 800811e:	bf00      	nop
 8008120:	2000000c 	.word	0x2000000c

08008124 <memcpy>:
 8008124:	440a      	add	r2, r1
 8008126:	4291      	cmp	r1, r2
 8008128:	f100 33ff 	add.w	r3, r0, #4294967295
 800812c:	d100      	bne.n	8008130 <memcpy+0xc>
 800812e:	4770      	bx	lr
 8008130:	b510      	push	{r4, lr}
 8008132:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008136:	f803 4f01 	strb.w	r4, [r3, #1]!
 800813a:	4291      	cmp	r1, r2
 800813c:	d1f9      	bne.n	8008132 <memcpy+0xe>
 800813e:	bd10      	pop	{r4, pc}

08008140 <_Balloc>:
 8008140:	b570      	push	{r4, r5, r6, lr}
 8008142:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008144:	4604      	mov	r4, r0
 8008146:	460d      	mov	r5, r1
 8008148:	b976      	cbnz	r6, 8008168 <_Balloc+0x28>
 800814a:	2010      	movs	r0, #16
 800814c:	f7ff ffe2 	bl	8008114 <malloc>
 8008150:	4602      	mov	r2, r0
 8008152:	6260      	str	r0, [r4, #36]	; 0x24
 8008154:	b920      	cbnz	r0, 8008160 <_Balloc+0x20>
 8008156:	4b18      	ldr	r3, [pc, #96]	; (80081b8 <_Balloc+0x78>)
 8008158:	4818      	ldr	r0, [pc, #96]	; (80081bc <_Balloc+0x7c>)
 800815a:	2166      	movs	r1, #102	; 0x66
 800815c:	f000 fe2a 	bl	8008db4 <__assert_func>
 8008160:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008164:	6006      	str	r6, [r0, #0]
 8008166:	60c6      	str	r6, [r0, #12]
 8008168:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800816a:	68f3      	ldr	r3, [r6, #12]
 800816c:	b183      	cbz	r3, 8008190 <_Balloc+0x50>
 800816e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008170:	68db      	ldr	r3, [r3, #12]
 8008172:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008176:	b9b8      	cbnz	r0, 80081a8 <_Balloc+0x68>
 8008178:	2101      	movs	r1, #1
 800817a:	fa01 f605 	lsl.w	r6, r1, r5
 800817e:	1d72      	adds	r2, r6, #5
 8008180:	0092      	lsls	r2, r2, #2
 8008182:	4620      	mov	r0, r4
 8008184:	f000 fb60 	bl	8008848 <_calloc_r>
 8008188:	b160      	cbz	r0, 80081a4 <_Balloc+0x64>
 800818a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800818e:	e00e      	b.n	80081ae <_Balloc+0x6e>
 8008190:	2221      	movs	r2, #33	; 0x21
 8008192:	2104      	movs	r1, #4
 8008194:	4620      	mov	r0, r4
 8008196:	f000 fb57 	bl	8008848 <_calloc_r>
 800819a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800819c:	60f0      	str	r0, [r6, #12]
 800819e:	68db      	ldr	r3, [r3, #12]
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d1e4      	bne.n	800816e <_Balloc+0x2e>
 80081a4:	2000      	movs	r0, #0
 80081a6:	bd70      	pop	{r4, r5, r6, pc}
 80081a8:	6802      	ldr	r2, [r0, #0]
 80081aa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80081ae:	2300      	movs	r3, #0
 80081b0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80081b4:	e7f7      	b.n	80081a6 <_Balloc+0x66>
 80081b6:	bf00      	nop
 80081b8:	08009041 	.word	0x08009041
 80081bc:	08009124 	.word	0x08009124

080081c0 <_Bfree>:
 80081c0:	b570      	push	{r4, r5, r6, lr}
 80081c2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80081c4:	4605      	mov	r5, r0
 80081c6:	460c      	mov	r4, r1
 80081c8:	b976      	cbnz	r6, 80081e8 <_Bfree+0x28>
 80081ca:	2010      	movs	r0, #16
 80081cc:	f7ff ffa2 	bl	8008114 <malloc>
 80081d0:	4602      	mov	r2, r0
 80081d2:	6268      	str	r0, [r5, #36]	; 0x24
 80081d4:	b920      	cbnz	r0, 80081e0 <_Bfree+0x20>
 80081d6:	4b09      	ldr	r3, [pc, #36]	; (80081fc <_Bfree+0x3c>)
 80081d8:	4809      	ldr	r0, [pc, #36]	; (8008200 <_Bfree+0x40>)
 80081da:	218a      	movs	r1, #138	; 0x8a
 80081dc:	f000 fdea 	bl	8008db4 <__assert_func>
 80081e0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80081e4:	6006      	str	r6, [r0, #0]
 80081e6:	60c6      	str	r6, [r0, #12]
 80081e8:	b13c      	cbz	r4, 80081fa <_Bfree+0x3a>
 80081ea:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80081ec:	6862      	ldr	r2, [r4, #4]
 80081ee:	68db      	ldr	r3, [r3, #12]
 80081f0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80081f4:	6021      	str	r1, [r4, #0]
 80081f6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80081fa:	bd70      	pop	{r4, r5, r6, pc}
 80081fc:	08009041 	.word	0x08009041
 8008200:	08009124 	.word	0x08009124

08008204 <__multadd>:
 8008204:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008208:	690d      	ldr	r5, [r1, #16]
 800820a:	4607      	mov	r7, r0
 800820c:	460c      	mov	r4, r1
 800820e:	461e      	mov	r6, r3
 8008210:	f101 0c14 	add.w	ip, r1, #20
 8008214:	2000      	movs	r0, #0
 8008216:	f8dc 3000 	ldr.w	r3, [ip]
 800821a:	b299      	uxth	r1, r3
 800821c:	fb02 6101 	mla	r1, r2, r1, r6
 8008220:	0c1e      	lsrs	r6, r3, #16
 8008222:	0c0b      	lsrs	r3, r1, #16
 8008224:	fb02 3306 	mla	r3, r2, r6, r3
 8008228:	b289      	uxth	r1, r1
 800822a:	3001      	adds	r0, #1
 800822c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008230:	4285      	cmp	r5, r0
 8008232:	f84c 1b04 	str.w	r1, [ip], #4
 8008236:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800823a:	dcec      	bgt.n	8008216 <__multadd+0x12>
 800823c:	b30e      	cbz	r6, 8008282 <__multadd+0x7e>
 800823e:	68a3      	ldr	r3, [r4, #8]
 8008240:	42ab      	cmp	r3, r5
 8008242:	dc19      	bgt.n	8008278 <__multadd+0x74>
 8008244:	6861      	ldr	r1, [r4, #4]
 8008246:	4638      	mov	r0, r7
 8008248:	3101      	adds	r1, #1
 800824a:	f7ff ff79 	bl	8008140 <_Balloc>
 800824e:	4680      	mov	r8, r0
 8008250:	b928      	cbnz	r0, 800825e <__multadd+0x5a>
 8008252:	4602      	mov	r2, r0
 8008254:	4b0c      	ldr	r3, [pc, #48]	; (8008288 <__multadd+0x84>)
 8008256:	480d      	ldr	r0, [pc, #52]	; (800828c <__multadd+0x88>)
 8008258:	21b5      	movs	r1, #181	; 0xb5
 800825a:	f000 fdab 	bl	8008db4 <__assert_func>
 800825e:	6922      	ldr	r2, [r4, #16]
 8008260:	3202      	adds	r2, #2
 8008262:	f104 010c 	add.w	r1, r4, #12
 8008266:	0092      	lsls	r2, r2, #2
 8008268:	300c      	adds	r0, #12
 800826a:	f7ff ff5b 	bl	8008124 <memcpy>
 800826e:	4621      	mov	r1, r4
 8008270:	4638      	mov	r0, r7
 8008272:	f7ff ffa5 	bl	80081c0 <_Bfree>
 8008276:	4644      	mov	r4, r8
 8008278:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800827c:	3501      	adds	r5, #1
 800827e:	615e      	str	r6, [r3, #20]
 8008280:	6125      	str	r5, [r4, #16]
 8008282:	4620      	mov	r0, r4
 8008284:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008288:	080090b3 	.word	0x080090b3
 800828c:	08009124 	.word	0x08009124

08008290 <__hi0bits>:
 8008290:	0c03      	lsrs	r3, r0, #16
 8008292:	041b      	lsls	r3, r3, #16
 8008294:	b9d3      	cbnz	r3, 80082cc <__hi0bits+0x3c>
 8008296:	0400      	lsls	r0, r0, #16
 8008298:	2310      	movs	r3, #16
 800829a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800829e:	bf04      	itt	eq
 80082a0:	0200      	lsleq	r0, r0, #8
 80082a2:	3308      	addeq	r3, #8
 80082a4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80082a8:	bf04      	itt	eq
 80082aa:	0100      	lsleq	r0, r0, #4
 80082ac:	3304      	addeq	r3, #4
 80082ae:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80082b2:	bf04      	itt	eq
 80082b4:	0080      	lsleq	r0, r0, #2
 80082b6:	3302      	addeq	r3, #2
 80082b8:	2800      	cmp	r0, #0
 80082ba:	db05      	blt.n	80082c8 <__hi0bits+0x38>
 80082bc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80082c0:	f103 0301 	add.w	r3, r3, #1
 80082c4:	bf08      	it	eq
 80082c6:	2320      	moveq	r3, #32
 80082c8:	4618      	mov	r0, r3
 80082ca:	4770      	bx	lr
 80082cc:	2300      	movs	r3, #0
 80082ce:	e7e4      	b.n	800829a <__hi0bits+0xa>

080082d0 <__lo0bits>:
 80082d0:	6803      	ldr	r3, [r0, #0]
 80082d2:	f013 0207 	ands.w	r2, r3, #7
 80082d6:	4601      	mov	r1, r0
 80082d8:	d00b      	beq.n	80082f2 <__lo0bits+0x22>
 80082da:	07da      	lsls	r2, r3, #31
 80082dc:	d423      	bmi.n	8008326 <__lo0bits+0x56>
 80082de:	0798      	lsls	r0, r3, #30
 80082e0:	bf49      	itett	mi
 80082e2:	085b      	lsrmi	r3, r3, #1
 80082e4:	089b      	lsrpl	r3, r3, #2
 80082e6:	2001      	movmi	r0, #1
 80082e8:	600b      	strmi	r3, [r1, #0]
 80082ea:	bf5c      	itt	pl
 80082ec:	600b      	strpl	r3, [r1, #0]
 80082ee:	2002      	movpl	r0, #2
 80082f0:	4770      	bx	lr
 80082f2:	b298      	uxth	r0, r3
 80082f4:	b9a8      	cbnz	r0, 8008322 <__lo0bits+0x52>
 80082f6:	0c1b      	lsrs	r3, r3, #16
 80082f8:	2010      	movs	r0, #16
 80082fa:	b2da      	uxtb	r2, r3
 80082fc:	b90a      	cbnz	r2, 8008302 <__lo0bits+0x32>
 80082fe:	3008      	adds	r0, #8
 8008300:	0a1b      	lsrs	r3, r3, #8
 8008302:	071a      	lsls	r2, r3, #28
 8008304:	bf04      	itt	eq
 8008306:	091b      	lsreq	r3, r3, #4
 8008308:	3004      	addeq	r0, #4
 800830a:	079a      	lsls	r2, r3, #30
 800830c:	bf04      	itt	eq
 800830e:	089b      	lsreq	r3, r3, #2
 8008310:	3002      	addeq	r0, #2
 8008312:	07da      	lsls	r2, r3, #31
 8008314:	d403      	bmi.n	800831e <__lo0bits+0x4e>
 8008316:	085b      	lsrs	r3, r3, #1
 8008318:	f100 0001 	add.w	r0, r0, #1
 800831c:	d005      	beq.n	800832a <__lo0bits+0x5a>
 800831e:	600b      	str	r3, [r1, #0]
 8008320:	4770      	bx	lr
 8008322:	4610      	mov	r0, r2
 8008324:	e7e9      	b.n	80082fa <__lo0bits+0x2a>
 8008326:	2000      	movs	r0, #0
 8008328:	4770      	bx	lr
 800832a:	2020      	movs	r0, #32
 800832c:	4770      	bx	lr
	...

08008330 <__i2b>:
 8008330:	b510      	push	{r4, lr}
 8008332:	460c      	mov	r4, r1
 8008334:	2101      	movs	r1, #1
 8008336:	f7ff ff03 	bl	8008140 <_Balloc>
 800833a:	4602      	mov	r2, r0
 800833c:	b928      	cbnz	r0, 800834a <__i2b+0x1a>
 800833e:	4b05      	ldr	r3, [pc, #20]	; (8008354 <__i2b+0x24>)
 8008340:	4805      	ldr	r0, [pc, #20]	; (8008358 <__i2b+0x28>)
 8008342:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8008346:	f000 fd35 	bl	8008db4 <__assert_func>
 800834a:	2301      	movs	r3, #1
 800834c:	6144      	str	r4, [r0, #20]
 800834e:	6103      	str	r3, [r0, #16]
 8008350:	bd10      	pop	{r4, pc}
 8008352:	bf00      	nop
 8008354:	080090b3 	.word	0x080090b3
 8008358:	08009124 	.word	0x08009124

0800835c <__multiply>:
 800835c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008360:	4691      	mov	r9, r2
 8008362:	690a      	ldr	r2, [r1, #16]
 8008364:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008368:	429a      	cmp	r2, r3
 800836a:	bfb8      	it	lt
 800836c:	460b      	movlt	r3, r1
 800836e:	460c      	mov	r4, r1
 8008370:	bfbc      	itt	lt
 8008372:	464c      	movlt	r4, r9
 8008374:	4699      	movlt	r9, r3
 8008376:	6927      	ldr	r7, [r4, #16]
 8008378:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800837c:	68a3      	ldr	r3, [r4, #8]
 800837e:	6861      	ldr	r1, [r4, #4]
 8008380:	eb07 060a 	add.w	r6, r7, sl
 8008384:	42b3      	cmp	r3, r6
 8008386:	b085      	sub	sp, #20
 8008388:	bfb8      	it	lt
 800838a:	3101      	addlt	r1, #1
 800838c:	f7ff fed8 	bl	8008140 <_Balloc>
 8008390:	b930      	cbnz	r0, 80083a0 <__multiply+0x44>
 8008392:	4602      	mov	r2, r0
 8008394:	4b44      	ldr	r3, [pc, #272]	; (80084a8 <__multiply+0x14c>)
 8008396:	4845      	ldr	r0, [pc, #276]	; (80084ac <__multiply+0x150>)
 8008398:	f240 115d 	movw	r1, #349	; 0x15d
 800839c:	f000 fd0a 	bl	8008db4 <__assert_func>
 80083a0:	f100 0514 	add.w	r5, r0, #20
 80083a4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80083a8:	462b      	mov	r3, r5
 80083aa:	2200      	movs	r2, #0
 80083ac:	4543      	cmp	r3, r8
 80083ae:	d321      	bcc.n	80083f4 <__multiply+0x98>
 80083b0:	f104 0314 	add.w	r3, r4, #20
 80083b4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80083b8:	f109 0314 	add.w	r3, r9, #20
 80083bc:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80083c0:	9202      	str	r2, [sp, #8]
 80083c2:	1b3a      	subs	r2, r7, r4
 80083c4:	3a15      	subs	r2, #21
 80083c6:	f022 0203 	bic.w	r2, r2, #3
 80083ca:	3204      	adds	r2, #4
 80083cc:	f104 0115 	add.w	r1, r4, #21
 80083d0:	428f      	cmp	r7, r1
 80083d2:	bf38      	it	cc
 80083d4:	2204      	movcc	r2, #4
 80083d6:	9201      	str	r2, [sp, #4]
 80083d8:	9a02      	ldr	r2, [sp, #8]
 80083da:	9303      	str	r3, [sp, #12]
 80083dc:	429a      	cmp	r2, r3
 80083de:	d80c      	bhi.n	80083fa <__multiply+0x9e>
 80083e0:	2e00      	cmp	r6, #0
 80083e2:	dd03      	ble.n	80083ec <__multiply+0x90>
 80083e4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d05a      	beq.n	80084a2 <__multiply+0x146>
 80083ec:	6106      	str	r6, [r0, #16]
 80083ee:	b005      	add	sp, #20
 80083f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80083f4:	f843 2b04 	str.w	r2, [r3], #4
 80083f8:	e7d8      	b.n	80083ac <__multiply+0x50>
 80083fa:	f8b3 a000 	ldrh.w	sl, [r3]
 80083fe:	f1ba 0f00 	cmp.w	sl, #0
 8008402:	d024      	beq.n	800844e <__multiply+0xf2>
 8008404:	f104 0e14 	add.w	lr, r4, #20
 8008408:	46a9      	mov	r9, r5
 800840a:	f04f 0c00 	mov.w	ip, #0
 800840e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8008412:	f8d9 1000 	ldr.w	r1, [r9]
 8008416:	fa1f fb82 	uxth.w	fp, r2
 800841a:	b289      	uxth	r1, r1
 800841c:	fb0a 110b 	mla	r1, sl, fp, r1
 8008420:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8008424:	f8d9 2000 	ldr.w	r2, [r9]
 8008428:	4461      	add	r1, ip
 800842a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800842e:	fb0a c20b 	mla	r2, sl, fp, ip
 8008432:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8008436:	b289      	uxth	r1, r1
 8008438:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800843c:	4577      	cmp	r7, lr
 800843e:	f849 1b04 	str.w	r1, [r9], #4
 8008442:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008446:	d8e2      	bhi.n	800840e <__multiply+0xb2>
 8008448:	9a01      	ldr	r2, [sp, #4]
 800844a:	f845 c002 	str.w	ip, [r5, r2]
 800844e:	9a03      	ldr	r2, [sp, #12]
 8008450:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008454:	3304      	adds	r3, #4
 8008456:	f1b9 0f00 	cmp.w	r9, #0
 800845a:	d020      	beq.n	800849e <__multiply+0x142>
 800845c:	6829      	ldr	r1, [r5, #0]
 800845e:	f104 0c14 	add.w	ip, r4, #20
 8008462:	46ae      	mov	lr, r5
 8008464:	f04f 0a00 	mov.w	sl, #0
 8008468:	f8bc b000 	ldrh.w	fp, [ip]
 800846c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8008470:	fb09 220b 	mla	r2, r9, fp, r2
 8008474:	4492      	add	sl, r2
 8008476:	b289      	uxth	r1, r1
 8008478:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800847c:	f84e 1b04 	str.w	r1, [lr], #4
 8008480:	f85c 2b04 	ldr.w	r2, [ip], #4
 8008484:	f8be 1000 	ldrh.w	r1, [lr]
 8008488:	0c12      	lsrs	r2, r2, #16
 800848a:	fb09 1102 	mla	r1, r9, r2, r1
 800848e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8008492:	4567      	cmp	r7, ip
 8008494:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008498:	d8e6      	bhi.n	8008468 <__multiply+0x10c>
 800849a:	9a01      	ldr	r2, [sp, #4]
 800849c:	50a9      	str	r1, [r5, r2]
 800849e:	3504      	adds	r5, #4
 80084a0:	e79a      	b.n	80083d8 <__multiply+0x7c>
 80084a2:	3e01      	subs	r6, #1
 80084a4:	e79c      	b.n	80083e0 <__multiply+0x84>
 80084a6:	bf00      	nop
 80084a8:	080090b3 	.word	0x080090b3
 80084ac:	08009124 	.word	0x08009124

080084b0 <__pow5mult>:
 80084b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80084b4:	4615      	mov	r5, r2
 80084b6:	f012 0203 	ands.w	r2, r2, #3
 80084ba:	4606      	mov	r6, r0
 80084bc:	460f      	mov	r7, r1
 80084be:	d007      	beq.n	80084d0 <__pow5mult+0x20>
 80084c0:	4c25      	ldr	r4, [pc, #148]	; (8008558 <__pow5mult+0xa8>)
 80084c2:	3a01      	subs	r2, #1
 80084c4:	2300      	movs	r3, #0
 80084c6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80084ca:	f7ff fe9b 	bl	8008204 <__multadd>
 80084ce:	4607      	mov	r7, r0
 80084d0:	10ad      	asrs	r5, r5, #2
 80084d2:	d03d      	beq.n	8008550 <__pow5mult+0xa0>
 80084d4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80084d6:	b97c      	cbnz	r4, 80084f8 <__pow5mult+0x48>
 80084d8:	2010      	movs	r0, #16
 80084da:	f7ff fe1b 	bl	8008114 <malloc>
 80084de:	4602      	mov	r2, r0
 80084e0:	6270      	str	r0, [r6, #36]	; 0x24
 80084e2:	b928      	cbnz	r0, 80084f0 <__pow5mult+0x40>
 80084e4:	4b1d      	ldr	r3, [pc, #116]	; (800855c <__pow5mult+0xac>)
 80084e6:	481e      	ldr	r0, [pc, #120]	; (8008560 <__pow5mult+0xb0>)
 80084e8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80084ec:	f000 fc62 	bl	8008db4 <__assert_func>
 80084f0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80084f4:	6004      	str	r4, [r0, #0]
 80084f6:	60c4      	str	r4, [r0, #12]
 80084f8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80084fc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008500:	b94c      	cbnz	r4, 8008516 <__pow5mult+0x66>
 8008502:	f240 2171 	movw	r1, #625	; 0x271
 8008506:	4630      	mov	r0, r6
 8008508:	f7ff ff12 	bl	8008330 <__i2b>
 800850c:	2300      	movs	r3, #0
 800850e:	f8c8 0008 	str.w	r0, [r8, #8]
 8008512:	4604      	mov	r4, r0
 8008514:	6003      	str	r3, [r0, #0]
 8008516:	f04f 0900 	mov.w	r9, #0
 800851a:	07eb      	lsls	r3, r5, #31
 800851c:	d50a      	bpl.n	8008534 <__pow5mult+0x84>
 800851e:	4639      	mov	r1, r7
 8008520:	4622      	mov	r2, r4
 8008522:	4630      	mov	r0, r6
 8008524:	f7ff ff1a 	bl	800835c <__multiply>
 8008528:	4639      	mov	r1, r7
 800852a:	4680      	mov	r8, r0
 800852c:	4630      	mov	r0, r6
 800852e:	f7ff fe47 	bl	80081c0 <_Bfree>
 8008532:	4647      	mov	r7, r8
 8008534:	106d      	asrs	r5, r5, #1
 8008536:	d00b      	beq.n	8008550 <__pow5mult+0xa0>
 8008538:	6820      	ldr	r0, [r4, #0]
 800853a:	b938      	cbnz	r0, 800854c <__pow5mult+0x9c>
 800853c:	4622      	mov	r2, r4
 800853e:	4621      	mov	r1, r4
 8008540:	4630      	mov	r0, r6
 8008542:	f7ff ff0b 	bl	800835c <__multiply>
 8008546:	6020      	str	r0, [r4, #0]
 8008548:	f8c0 9000 	str.w	r9, [r0]
 800854c:	4604      	mov	r4, r0
 800854e:	e7e4      	b.n	800851a <__pow5mult+0x6a>
 8008550:	4638      	mov	r0, r7
 8008552:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008556:	bf00      	nop
 8008558:	08009270 	.word	0x08009270
 800855c:	08009041 	.word	0x08009041
 8008560:	08009124 	.word	0x08009124

08008564 <__lshift>:
 8008564:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008568:	460c      	mov	r4, r1
 800856a:	6849      	ldr	r1, [r1, #4]
 800856c:	6923      	ldr	r3, [r4, #16]
 800856e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008572:	68a3      	ldr	r3, [r4, #8]
 8008574:	4607      	mov	r7, r0
 8008576:	4691      	mov	r9, r2
 8008578:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800857c:	f108 0601 	add.w	r6, r8, #1
 8008580:	42b3      	cmp	r3, r6
 8008582:	db0b      	blt.n	800859c <__lshift+0x38>
 8008584:	4638      	mov	r0, r7
 8008586:	f7ff fddb 	bl	8008140 <_Balloc>
 800858a:	4605      	mov	r5, r0
 800858c:	b948      	cbnz	r0, 80085a2 <__lshift+0x3e>
 800858e:	4602      	mov	r2, r0
 8008590:	4b2a      	ldr	r3, [pc, #168]	; (800863c <__lshift+0xd8>)
 8008592:	482b      	ldr	r0, [pc, #172]	; (8008640 <__lshift+0xdc>)
 8008594:	f240 11d9 	movw	r1, #473	; 0x1d9
 8008598:	f000 fc0c 	bl	8008db4 <__assert_func>
 800859c:	3101      	adds	r1, #1
 800859e:	005b      	lsls	r3, r3, #1
 80085a0:	e7ee      	b.n	8008580 <__lshift+0x1c>
 80085a2:	2300      	movs	r3, #0
 80085a4:	f100 0114 	add.w	r1, r0, #20
 80085a8:	f100 0210 	add.w	r2, r0, #16
 80085ac:	4618      	mov	r0, r3
 80085ae:	4553      	cmp	r3, sl
 80085b0:	db37      	blt.n	8008622 <__lshift+0xbe>
 80085b2:	6920      	ldr	r0, [r4, #16]
 80085b4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80085b8:	f104 0314 	add.w	r3, r4, #20
 80085bc:	f019 091f 	ands.w	r9, r9, #31
 80085c0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80085c4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80085c8:	d02f      	beq.n	800862a <__lshift+0xc6>
 80085ca:	f1c9 0e20 	rsb	lr, r9, #32
 80085ce:	468a      	mov	sl, r1
 80085d0:	f04f 0c00 	mov.w	ip, #0
 80085d4:	681a      	ldr	r2, [r3, #0]
 80085d6:	fa02 f209 	lsl.w	r2, r2, r9
 80085da:	ea42 020c 	orr.w	r2, r2, ip
 80085de:	f84a 2b04 	str.w	r2, [sl], #4
 80085e2:	f853 2b04 	ldr.w	r2, [r3], #4
 80085e6:	4298      	cmp	r0, r3
 80085e8:	fa22 fc0e 	lsr.w	ip, r2, lr
 80085ec:	d8f2      	bhi.n	80085d4 <__lshift+0x70>
 80085ee:	1b03      	subs	r3, r0, r4
 80085f0:	3b15      	subs	r3, #21
 80085f2:	f023 0303 	bic.w	r3, r3, #3
 80085f6:	3304      	adds	r3, #4
 80085f8:	f104 0215 	add.w	r2, r4, #21
 80085fc:	4290      	cmp	r0, r2
 80085fe:	bf38      	it	cc
 8008600:	2304      	movcc	r3, #4
 8008602:	f841 c003 	str.w	ip, [r1, r3]
 8008606:	f1bc 0f00 	cmp.w	ip, #0
 800860a:	d001      	beq.n	8008610 <__lshift+0xac>
 800860c:	f108 0602 	add.w	r6, r8, #2
 8008610:	3e01      	subs	r6, #1
 8008612:	4638      	mov	r0, r7
 8008614:	612e      	str	r6, [r5, #16]
 8008616:	4621      	mov	r1, r4
 8008618:	f7ff fdd2 	bl	80081c0 <_Bfree>
 800861c:	4628      	mov	r0, r5
 800861e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008622:	f842 0f04 	str.w	r0, [r2, #4]!
 8008626:	3301      	adds	r3, #1
 8008628:	e7c1      	b.n	80085ae <__lshift+0x4a>
 800862a:	3904      	subs	r1, #4
 800862c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008630:	f841 2f04 	str.w	r2, [r1, #4]!
 8008634:	4298      	cmp	r0, r3
 8008636:	d8f9      	bhi.n	800862c <__lshift+0xc8>
 8008638:	e7ea      	b.n	8008610 <__lshift+0xac>
 800863a:	bf00      	nop
 800863c:	080090b3 	.word	0x080090b3
 8008640:	08009124 	.word	0x08009124

08008644 <__mcmp>:
 8008644:	b530      	push	{r4, r5, lr}
 8008646:	6902      	ldr	r2, [r0, #16]
 8008648:	690c      	ldr	r4, [r1, #16]
 800864a:	1b12      	subs	r2, r2, r4
 800864c:	d10e      	bne.n	800866c <__mcmp+0x28>
 800864e:	f100 0314 	add.w	r3, r0, #20
 8008652:	3114      	adds	r1, #20
 8008654:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008658:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800865c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008660:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008664:	42a5      	cmp	r5, r4
 8008666:	d003      	beq.n	8008670 <__mcmp+0x2c>
 8008668:	d305      	bcc.n	8008676 <__mcmp+0x32>
 800866a:	2201      	movs	r2, #1
 800866c:	4610      	mov	r0, r2
 800866e:	bd30      	pop	{r4, r5, pc}
 8008670:	4283      	cmp	r3, r0
 8008672:	d3f3      	bcc.n	800865c <__mcmp+0x18>
 8008674:	e7fa      	b.n	800866c <__mcmp+0x28>
 8008676:	f04f 32ff 	mov.w	r2, #4294967295
 800867a:	e7f7      	b.n	800866c <__mcmp+0x28>

0800867c <__mdiff>:
 800867c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008680:	460c      	mov	r4, r1
 8008682:	4606      	mov	r6, r0
 8008684:	4611      	mov	r1, r2
 8008686:	4620      	mov	r0, r4
 8008688:	4690      	mov	r8, r2
 800868a:	f7ff ffdb 	bl	8008644 <__mcmp>
 800868e:	1e05      	subs	r5, r0, #0
 8008690:	d110      	bne.n	80086b4 <__mdiff+0x38>
 8008692:	4629      	mov	r1, r5
 8008694:	4630      	mov	r0, r6
 8008696:	f7ff fd53 	bl	8008140 <_Balloc>
 800869a:	b930      	cbnz	r0, 80086aa <__mdiff+0x2e>
 800869c:	4b3a      	ldr	r3, [pc, #232]	; (8008788 <__mdiff+0x10c>)
 800869e:	4602      	mov	r2, r0
 80086a0:	f240 2132 	movw	r1, #562	; 0x232
 80086a4:	4839      	ldr	r0, [pc, #228]	; (800878c <__mdiff+0x110>)
 80086a6:	f000 fb85 	bl	8008db4 <__assert_func>
 80086aa:	2301      	movs	r3, #1
 80086ac:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80086b0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80086b4:	bfa4      	itt	ge
 80086b6:	4643      	movge	r3, r8
 80086b8:	46a0      	movge	r8, r4
 80086ba:	4630      	mov	r0, r6
 80086bc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80086c0:	bfa6      	itte	ge
 80086c2:	461c      	movge	r4, r3
 80086c4:	2500      	movge	r5, #0
 80086c6:	2501      	movlt	r5, #1
 80086c8:	f7ff fd3a 	bl	8008140 <_Balloc>
 80086cc:	b920      	cbnz	r0, 80086d8 <__mdiff+0x5c>
 80086ce:	4b2e      	ldr	r3, [pc, #184]	; (8008788 <__mdiff+0x10c>)
 80086d0:	4602      	mov	r2, r0
 80086d2:	f44f 7110 	mov.w	r1, #576	; 0x240
 80086d6:	e7e5      	b.n	80086a4 <__mdiff+0x28>
 80086d8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80086dc:	6926      	ldr	r6, [r4, #16]
 80086de:	60c5      	str	r5, [r0, #12]
 80086e0:	f104 0914 	add.w	r9, r4, #20
 80086e4:	f108 0514 	add.w	r5, r8, #20
 80086e8:	f100 0e14 	add.w	lr, r0, #20
 80086ec:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80086f0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80086f4:	f108 0210 	add.w	r2, r8, #16
 80086f8:	46f2      	mov	sl, lr
 80086fa:	2100      	movs	r1, #0
 80086fc:	f859 3b04 	ldr.w	r3, [r9], #4
 8008700:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008704:	fa1f f883 	uxth.w	r8, r3
 8008708:	fa11 f18b 	uxtah	r1, r1, fp
 800870c:	0c1b      	lsrs	r3, r3, #16
 800870e:	eba1 0808 	sub.w	r8, r1, r8
 8008712:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008716:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800871a:	fa1f f888 	uxth.w	r8, r8
 800871e:	1419      	asrs	r1, r3, #16
 8008720:	454e      	cmp	r6, r9
 8008722:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8008726:	f84a 3b04 	str.w	r3, [sl], #4
 800872a:	d8e7      	bhi.n	80086fc <__mdiff+0x80>
 800872c:	1b33      	subs	r3, r6, r4
 800872e:	3b15      	subs	r3, #21
 8008730:	f023 0303 	bic.w	r3, r3, #3
 8008734:	3304      	adds	r3, #4
 8008736:	3415      	adds	r4, #21
 8008738:	42a6      	cmp	r6, r4
 800873a:	bf38      	it	cc
 800873c:	2304      	movcc	r3, #4
 800873e:	441d      	add	r5, r3
 8008740:	4473      	add	r3, lr
 8008742:	469e      	mov	lr, r3
 8008744:	462e      	mov	r6, r5
 8008746:	4566      	cmp	r6, ip
 8008748:	d30e      	bcc.n	8008768 <__mdiff+0xec>
 800874a:	f10c 0203 	add.w	r2, ip, #3
 800874e:	1b52      	subs	r2, r2, r5
 8008750:	f022 0203 	bic.w	r2, r2, #3
 8008754:	3d03      	subs	r5, #3
 8008756:	45ac      	cmp	ip, r5
 8008758:	bf38      	it	cc
 800875a:	2200      	movcc	r2, #0
 800875c:	441a      	add	r2, r3
 800875e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8008762:	b17b      	cbz	r3, 8008784 <__mdiff+0x108>
 8008764:	6107      	str	r7, [r0, #16]
 8008766:	e7a3      	b.n	80086b0 <__mdiff+0x34>
 8008768:	f856 8b04 	ldr.w	r8, [r6], #4
 800876c:	fa11 f288 	uxtah	r2, r1, r8
 8008770:	1414      	asrs	r4, r2, #16
 8008772:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8008776:	b292      	uxth	r2, r2
 8008778:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800877c:	f84e 2b04 	str.w	r2, [lr], #4
 8008780:	1421      	asrs	r1, r4, #16
 8008782:	e7e0      	b.n	8008746 <__mdiff+0xca>
 8008784:	3f01      	subs	r7, #1
 8008786:	e7ea      	b.n	800875e <__mdiff+0xe2>
 8008788:	080090b3 	.word	0x080090b3
 800878c:	08009124 	.word	0x08009124

08008790 <__d2b>:
 8008790:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008794:	4689      	mov	r9, r1
 8008796:	2101      	movs	r1, #1
 8008798:	ec57 6b10 	vmov	r6, r7, d0
 800879c:	4690      	mov	r8, r2
 800879e:	f7ff fccf 	bl	8008140 <_Balloc>
 80087a2:	4604      	mov	r4, r0
 80087a4:	b930      	cbnz	r0, 80087b4 <__d2b+0x24>
 80087a6:	4602      	mov	r2, r0
 80087a8:	4b25      	ldr	r3, [pc, #148]	; (8008840 <__d2b+0xb0>)
 80087aa:	4826      	ldr	r0, [pc, #152]	; (8008844 <__d2b+0xb4>)
 80087ac:	f240 310a 	movw	r1, #778	; 0x30a
 80087b0:	f000 fb00 	bl	8008db4 <__assert_func>
 80087b4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80087b8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80087bc:	bb35      	cbnz	r5, 800880c <__d2b+0x7c>
 80087be:	2e00      	cmp	r6, #0
 80087c0:	9301      	str	r3, [sp, #4]
 80087c2:	d028      	beq.n	8008816 <__d2b+0x86>
 80087c4:	4668      	mov	r0, sp
 80087c6:	9600      	str	r6, [sp, #0]
 80087c8:	f7ff fd82 	bl	80082d0 <__lo0bits>
 80087cc:	9900      	ldr	r1, [sp, #0]
 80087ce:	b300      	cbz	r0, 8008812 <__d2b+0x82>
 80087d0:	9a01      	ldr	r2, [sp, #4]
 80087d2:	f1c0 0320 	rsb	r3, r0, #32
 80087d6:	fa02 f303 	lsl.w	r3, r2, r3
 80087da:	430b      	orrs	r3, r1
 80087dc:	40c2      	lsrs	r2, r0
 80087de:	6163      	str	r3, [r4, #20]
 80087e0:	9201      	str	r2, [sp, #4]
 80087e2:	9b01      	ldr	r3, [sp, #4]
 80087e4:	61a3      	str	r3, [r4, #24]
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	bf14      	ite	ne
 80087ea:	2202      	movne	r2, #2
 80087ec:	2201      	moveq	r2, #1
 80087ee:	6122      	str	r2, [r4, #16]
 80087f0:	b1d5      	cbz	r5, 8008828 <__d2b+0x98>
 80087f2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80087f6:	4405      	add	r5, r0
 80087f8:	f8c9 5000 	str.w	r5, [r9]
 80087fc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008800:	f8c8 0000 	str.w	r0, [r8]
 8008804:	4620      	mov	r0, r4
 8008806:	b003      	add	sp, #12
 8008808:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800880c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008810:	e7d5      	b.n	80087be <__d2b+0x2e>
 8008812:	6161      	str	r1, [r4, #20]
 8008814:	e7e5      	b.n	80087e2 <__d2b+0x52>
 8008816:	a801      	add	r0, sp, #4
 8008818:	f7ff fd5a 	bl	80082d0 <__lo0bits>
 800881c:	9b01      	ldr	r3, [sp, #4]
 800881e:	6163      	str	r3, [r4, #20]
 8008820:	2201      	movs	r2, #1
 8008822:	6122      	str	r2, [r4, #16]
 8008824:	3020      	adds	r0, #32
 8008826:	e7e3      	b.n	80087f0 <__d2b+0x60>
 8008828:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800882c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008830:	f8c9 0000 	str.w	r0, [r9]
 8008834:	6918      	ldr	r0, [r3, #16]
 8008836:	f7ff fd2b 	bl	8008290 <__hi0bits>
 800883a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800883e:	e7df      	b.n	8008800 <__d2b+0x70>
 8008840:	080090b3 	.word	0x080090b3
 8008844:	08009124 	.word	0x08009124

08008848 <_calloc_r>:
 8008848:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800884a:	fba1 2402 	umull	r2, r4, r1, r2
 800884e:	b94c      	cbnz	r4, 8008864 <_calloc_r+0x1c>
 8008850:	4611      	mov	r1, r2
 8008852:	9201      	str	r2, [sp, #4]
 8008854:	f000 f87a 	bl	800894c <_malloc_r>
 8008858:	9a01      	ldr	r2, [sp, #4]
 800885a:	4605      	mov	r5, r0
 800885c:	b930      	cbnz	r0, 800886c <_calloc_r+0x24>
 800885e:	4628      	mov	r0, r5
 8008860:	b003      	add	sp, #12
 8008862:	bd30      	pop	{r4, r5, pc}
 8008864:	220c      	movs	r2, #12
 8008866:	6002      	str	r2, [r0, #0]
 8008868:	2500      	movs	r5, #0
 800886a:	e7f8      	b.n	800885e <_calloc_r+0x16>
 800886c:	4621      	mov	r1, r4
 800886e:	f7fd fdf1 	bl	8006454 <memset>
 8008872:	e7f4      	b.n	800885e <_calloc_r+0x16>

08008874 <_free_r>:
 8008874:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008876:	2900      	cmp	r1, #0
 8008878:	d044      	beq.n	8008904 <_free_r+0x90>
 800887a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800887e:	9001      	str	r0, [sp, #4]
 8008880:	2b00      	cmp	r3, #0
 8008882:	f1a1 0404 	sub.w	r4, r1, #4
 8008886:	bfb8      	it	lt
 8008888:	18e4      	addlt	r4, r4, r3
 800888a:	f000 fb19 	bl	8008ec0 <__malloc_lock>
 800888e:	4a1e      	ldr	r2, [pc, #120]	; (8008908 <_free_r+0x94>)
 8008890:	9801      	ldr	r0, [sp, #4]
 8008892:	6813      	ldr	r3, [r2, #0]
 8008894:	b933      	cbnz	r3, 80088a4 <_free_r+0x30>
 8008896:	6063      	str	r3, [r4, #4]
 8008898:	6014      	str	r4, [r2, #0]
 800889a:	b003      	add	sp, #12
 800889c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80088a0:	f000 bb14 	b.w	8008ecc <__malloc_unlock>
 80088a4:	42a3      	cmp	r3, r4
 80088a6:	d908      	bls.n	80088ba <_free_r+0x46>
 80088a8:	6825      	ldr	r5, [r4, #0]
 80088aa:	1961      	adds	r1, r4, r5
 80088ac:	428b      	cmp	r3, r1
 80088ae:	bf01      	itttt	eq
 80088b0:	6819      	ldreq	r1, [r3, #0]
 80088b2:	685b      	ldreq	r3, [r3, #4]
 80088b4:	1949      	addeq	r1, r1, r5
 80088b6:	6021      	streq	r1, [r4, #0]
 80088b8:	e7ed      	b.n	8008896 <_free_r+0x22>
 80088ba:	461a      	mov	r2, r3
 80088bc:	685b      	ldr	r3, [r3, #4]
 80088be:	b10b      	cbz	r3, 80088c4 <_free_r+0x50>
 80088c0:	42a3      	cmp	r3, r4
 80088c2:	d9fa      	bls.n	80088ba <_free_r+0x46>
 80088c4:	6811      	ldr	r1, [r2, #0]
 80088c6:	1855      	adds	r5, r2, r1
 80088c8:	42a5      	cmp	r5, r4
 80088ca:	d10b      	bne.n	80088e4 <_free_r+0x70>
 80088cc:	6824      	ldr	r4, [r4, #0]
 80088ce:	4421      	add	r1, r4
 80088d0:	1854      	adds	r4, r2, r1
 80088d2:	42a3      	cmp	r3, r4
 80088d4:	6011      	str	r1, [r2, #0]
 80088d6:	d1e0      	bne.n	800889a <_free_r+0x26>
 80088d8:	681c      	ldr	r4, [r3, #0]
 80088da:	685b      	ldr	r3, [r3, #4]
 80088dc:	6053      	str	r3, [r2, #4]
 80088de:	4421      	add	r1, r4
 80088e0:	6011      	str	r1, [r2, #0]
 80088e2:	e7da      	b.n	800889a <_free_r+0x26>
 80088e4:	d902      	bls.n	80088ec <_free_r+0x78>
 80088e6:	230c      	movs	r3, #12
 80088e8:	6003      	str	r3, [r0, #0]
 80088ea:	e7d6      	b.n	800889a <_free_r+0x26>
 80088ec:	6825      	ldr	r5, [r4, #0]
 80088ee:	1961      	adds	r1, r4, r5
 80088f0:	428b      	cmp	r3, r1
 80088f2:	bf04      	itt	eq
 80088f4:	6819      	ldreq	r1, [r3, #0]
 80088f6:	685b      	ldreq	r3, [r3, #4]
 80088f8:	6063      	str	r3, [r4, #4]
 80088fa:	bf04      	itt	eq
 80088fc:	1949      	addeq	r1, r1, r5
 80088fe:	6021      	streq	r1, [r4, #0]
 8008900:	6054      	str	r4, [r2, #4]
 8008902:	e7ca      	b.n	800889a <_free_r+0x26>
 8008904:	b003      	add	sp, #12
 8008906:	bd30      	pop	{r4, r5, pc}
 8008908:	200003a8 	.word	0x200003a8

0800890c <sbrk_aligned>:
 800890c:	b570      	push	{r4, r5, r6, lr}
 800890e:	4e0e      	ldr	r6, [pc, #56]	; (8008948 <sbrk_aligned+0x3c>)
 8008910:	460c      	mov	r4, r1
 8008912:	6831      	ldr	r1, [r6, #0]
 8008914:	4605      	mov	r5, r0
 8008916:	b911      	cbnz	r1, 800891e <sbrk_aligned+0x12>
 8008918:	f000 f9e6 	bl	8008ce8 <_sbrk_r>
 800891c:	6030      	str	r0, [r6, #0]
 800891e:	4621      	mov	r1, r4
 8008920:	4628      	mov	r0, r5
 8008922:	f000 f9e1 	bl	8008ce8 <_sbrk_r>
 8008926:	1c43      	adds	r3, r0, #1
 8008928:	d00a      	beq.n	8008940 <sbrk_aligned+0x34>
 800892a:	1cc4      	adds	r4, r0, #3
 800892c:	f024 0403 	bic.w	r4, r4, #3
 8008930:	42a0      	cmp	r0, r4
 8008932:	d007      	beq.n	8008944 <sbrk_aligned+0x38>
 8008934:	1a21      	subs	r1, r4, r0
 8008936:	4628      	mov	r0, r5
 8008938:	f000 f9d6 	bl	8008ce8 <_sbrk_r>
 800893c:	3001      	adds	r0, #1
 800893e:	d101      	bne.n	8008944 <sbrk_aligned+0x38>
 8008940:	f04f 34ff 	mov.w	r4, #4294967295
 8008944:	4620      	mov	r0, r4
 8008946:	bd70      	pop	{r4, r5, r6, pc}
 8008948:	200003ac 	.word	0x200003ac

0800894c <_malloc_r>:
 800894c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008950:	1ccd      	adds	r5, r1, #3
 8008952:	f025 0503 	bic.w	r5, r5, #3
 8008956:	3508      	adds	r5, #8
 8008958:	2d0c      	cmp	r5, #12
 800895a:	bf38      	it	cc
 800895c:	250c      	movcc	r5, #12
 800895e:	2d00      	cmp	r5, #0
 8008960:	4607      	mov	r7, r0
 8008962:	db01      	blt.n	8008968 <_malloc_r+0x1c>
 8008964:	42a9      	cmp	r1, r5
 8008966:	d905      	bls.n	8008974 <_malloc_r+0x28>
 8008968:	230c      	movs	r3, #12
 800896a:	603b      	str	r3, [r7, #0]
 800896c:	2600      	movs	r6, #0
 800896e:	4630      	mov	r0, r6
 8008970:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008974:	4e2e      	ldr	r6, [pc, #184]	; (8008a30 <_malloc_r+0xe4>)
 8008976:	f000 faa3 	bl	8008ec0 <__malloc_lock>
 800897a:	6833      	ldr	r3, [r6, #0]
 800897c:	461c      	mov	r4, r3
 800897e:	bb34      	cbnz	r4, 80089ce <_malloc_r+0x82>
 8008980:	4629      	mov	r1, r5
 8008982:	4638      	mov	r0, r7
 8008984:	f7ff ffc2 	bl	800890c <sbrk_aligned>
 8008988:	1c43      	adds	r3, r0, #1
 800898a:	4604      	mov	r4, r0
 800898c:	d14d      	bne.n	8008a2a <_malloc_r+0xde>
 800898e:	6834      	ldr	r4, [r6, #0]
 8008990:	4626      	mov	r6, r4
 8008992:	2e00      	cmp	r6, #0
 8008994:	d140      	bne.n	8008a18 <_malloc_r+0xcc>
 8008996:	6823      	ldr	r3, [r4, #0]
 8008998:	4631      	mov	r1, r6
 800899a:	4638      	mov	r0, r7
 800899c:	eb04 0803 	add.w	r8, r4, r3
 80089a0:	f000 f9a2 	bl	8008ce8 <_sbrk_r>
 80089a4:	4580      	cmp	r8, r0
 80089a6:	d13a      	bne.n	8008a1e <_malloc_r+0xd2>
 80089a8:	6821      	ldr	r1, [r4, #0]
 80089aa:	3503      	adds	r5, #3
 80089ac:	1a6d      	subs	r5, r5, r1
 80089ae:	f025 0503 	bic.w	r5, r5, #3
 80089b2:	3508      	adds	r5, #8
 80089b4:	2d0c      	cmp	r5, #12
 80089b6:	bf38      	it	cc
 80089b8:	250c      	movcc	r5, #12
 80089ba:	4629      	mov	r1, r5
 80089bc:	4638      	mov	r0, r7
 80089be:	f7ff ffa5 	bl	800890c <sbrk_aligned>
 80089c2:	3001      	adds	r0, #1
 80089c4:	d02b      	beq.n	8008a1e <_malloc_r+0xd2>
 80089c6:	6823      	ldr	r3, [r4, #0]
 80089c8:	442b      	add	r3, r5
 80089ca:	6023      	str	r3, [r4, #0]
 80089cc:	e00e      	b.n	80089ec <_malloc_r+0xa0>
 80089ce:	6822      	ldr	r2, [r4, #0]
 80089d0:	1b52      	subs	r2, r2, r5
 80089d2:	d41e      	bmi.n	8008a12 <_malloc_r+0xc6>
 80089d4:	2a0b      	cmp	r2, #11
 80089d6:	d916      	bls.n	8008a06 <_malloc_r+0xba>
 80089d8:	1961      	adds	r1, r4, r5
 80089da:	42a3      	cmp	r3, r4
 80089dc:	6025      	str	r5, [r4, #0]
 80089de:	bf18      	it	ne
 80089e0:	6059      	strne	r1, [r3, #4]
 80089e2:	6863      	ldr	r3, [r4, #4]
 80089e4:	bf08      	it	eq
 80089e6:	6031      	streq	r1, [r6, #0]
 80089e8:	5162      	str	r2, [r4, r5]
 80089ea:	604b      	str	r3, [r1, #4]
 80089ec:	4638      	mov	r0, r7
 80089ee:	f104 060b 	add.w	r6, r4, #11
 80089f2:	f000 fa6b 	bl	8008ecc <__malloc_unlock>
 80089f6:	f026 0607 	bic.w	r6, r6, #7
 80089fa:	1d23      	adds	r3, r4, #4
 80089fc:	1af2      	subs	r2, r6, r3
 80089fe:	d0b6      	beq.n	800896e <_malloc_r+0x22>
 8008a00:	1b9b      	subs	r3, r3, r6
 8008a02:	50a3      	str	r3, [r4, r2]
 8008a04:	e7b3      	b.n	800896e <_malloc_r+0x22>
 8008a06:	6862      	ldr	r2, [r4, #4]
 8008a08:	42a3      	cmp	r3, r4
 8008a0a:	bf0c      	ite	eq
 8008a0c:	6032      	streq	r2, [r6, #0]
 8008a0e:	605a      	strne	r2, [r3, #4]
 8008a10:	e7ec      	b.n	80089ec <_malloc_r+0xa0>
 8008a12:	4623      	mov	r3, r4
 8008a14:	6864      	ldr	r4, [r4, #4]
 8008a16:	e7b2      	b.n	800897e <_malloc_r+0x32>
 8008a18:	4634      	mov	r4, r6
 8008a1a:	6876      	ldr	r6, [r6, #4]
 8008a1c:	e7b9      	b.n	8008992 <_malloc_r+0x46>
 8008a1e:	230c      	movs	r3, #12
 8008a20:	603b      	str	r3, [r7, #0]
 8008a22:	4638      	mov	r0, r7
 8008a24:	f000 fa52 	bl	8008ecc <__malloc_unlock>
 8008a28:	e7a1      	b.n	800896e <_malloc_r+0x22>
 8008a2a:	6025      	str	r5, [r4, #0]
 8008a2c:	e7de      	b.n	80089ec <_malloc_r+0xa0>
 8008a2e:	bf00      	nop
 8008a30:	200003a8 	.word	0x200003a8

08008a34 <__sfputc_r>:
 8008a34:	6893      	ldr	r3, [r2, #8]
 8008a36:	3b01      	subs	r3, #1
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	b410      	push	{r4}
 8008a3c:	6093      	str	r3, [r2, #8]
 8008a3e:	da08      	bge.n	8008a52 <__sfputc_r+0x1e>
 8008a40:	6994      	ldr	r4, [r2, #24]
 8008a42:	42a3      	cmp	r3, r4
 8008a44:	db01      	blt.n	8008a4a <__sfputc_r+0x16>
 8008a46:	290a      	cmp	r1, #10
 8008a48:	d103      	bne.n	8008a52 <__sfputc_r+0x1e>
 8008a4a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008a4e:	f7fe ba01 	b.w	8006e54 <__swbuf_r>
 8008a52:	6813      	ldr	r3, [r2, #0]
 8008a54:	1c58      	adds	r0, r3, #1
 8008a56:	6010      	str	r0, [r2, #0]
 8008a58:	7019      	strb	r1, [r3, #0]
 8008a5a:	4608      	mov	r0, r1
 8008a5c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008a60:	4770      	bx	lr

08008a62 <__sfputs_r>:
 8008a62:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a64:	4606      	mov	r6, r0
 8008a66:	460f      	mov	r7, r1
 8008a68:	4614      	mov	r4, r2
 8008a6a:	18d5      	adds	r5, r2, r3
 8008a6c:	42ac      	cmp	r4, r5
 8008a6e:	d101      	bne.n	8008a74 <__sfputs_r+0x12>
 8008a70:	2000      	movs	r0, #0
 8008a72:	e007      	b.n	8008a84 <__sfputs_r+0x22>
 8008a74:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008a78:	463a      	mov	r2, r7
 8008a7a:	4630      	mov	r0, r6
 8008a7c:	f7ff ffda 	bl	8008a34 <__sfputc_r>
 8008a80:	1c43      	adds	r3, r0, #1
 8008a82:	d1f3      	bne.n	8008a6c <__sfputs_r+0xa>
 8008a84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008a88 <_vfiprintf_r>:
 8008a88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a8c:	460d      	mov	r5, r1
 8008a8e:	b09d      	sub	sp, #116	; 0x74
 8008a90:	4614      	mov	r4, r2
 8008a92:	4698      	mov	r8, r3
 8008a94:	4606      	mov	r6, r0
 8008a96:	b118      	cbz	r0, 8008aa0 <_vfiprintf_r+0x18>
 8008a98:	6983      	ldr	r3, [r0, #24]
 8008a9a:	b90b      	cbnz	r3, 8008aa0 <_vfiprintf_r+0x18>
 8008a9c:	f7ff fa30 	bl	8007f00 <__sinit>
 8008aa0:	4b89      	ldr	r3, [pc, #548]	; (8008cc8 <_vfiprintf_r+0x240>)
 8008aa2:	429d      	cmp	r5, r3
 8008aa4:	d11b      	bne.n	8008ade <_vfiprintf_r+0x56>
 8008aa6:	6875      	ldr	r5, [r6, #4]
 8008aa8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008aaa:	07d9      	lsls	r1, r3, #31
 8008aac:	d405      	bmi.n	8008aba <_vfiprintf_r+0x32>
 8008aae:	89ab      	ldrh	r3, [r5, #12]
 8008ab0:	059a      	lsls	r2, r3, #22
 8008ab2:	d402      	bmi.n	8008aba <_vfiprintf_r+0x32>
 8008ab4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008ab6:	f7ff fac6 	bl	8008046 <__retarget_lock_acquire_recursive>
 8008aba:	89ab      	ldrh	r3, [r5, #12]
 8008abc:	071b      	lsls	r3, r3, #28
 8008abe:	d501      	bpl.n	8008ac4 <_vfiprintf_r+0x3c>
 8008ac0:	692b      	ldr	r3, [r5, #16]
 8008ac2:	b9eb      	cbnz	r3, 8008b00 <_vfiprintf_r+0x78>
 8008ac4:	4629      	mov	r1, r5
 8008ac6:	4630      	mov	r0, r6
 8008ac8:	f7fe fa16 	bl	8006ef8 <__swsetup_r>
 8008acc:	b1c0      	cbz	r0, 8008b00 <_vfiprintf_r+0x78>
 8008ace:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008ad0:	07dc      	lsls	r4, r3, #31
 8008ad2:	d50e      	bpl.n	8008af2 <_vfiprintf_r+0x6a>
 8008ad4:	f04f 30ff 	mov.w	r0, #4294967295
 8008ad8:	b01d      	add	sp, #116	; 0x74
 8008ada:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ade:	4b7b      	ldr	r3, [pc, #492]	; (8008ccc <_vfiprintf_r+0x244>)
 8008ae0:	429d      	cmp	r5, r3
 8008ae2:	d101      	bne.n	8008ae8 <_vfiprintf_r+0x60>
 8008ae4:	68b5      	ldr	r5, [r6, #8]
 8008ae6:	e7df      	b.n	8008aa8 <_vfiprintf_r+0x20>
 8008ae8:	4b79      	ldr	r3, [pc, #484]	; (8008cd0 <_vfiprintf_r+0x248>)
 8008aea:	429d      	cmp	r5, r3
 8008aec:	bf08      	it	eq
 8008aee:	68f5      	ldreq	r5, [r6, #12]
 8008af0:	e7da      	b.n	8008aa8 <_vfiprintf_r+0x20>
 8008af2:	89ab      	ldrh	r3, [r5, #12]
 8008af4:	0598      	lsls	r0, r3, #22
 8008af6:	d4ed      	bmi.n	8008ad4 <_vfiprintf_r+0x4c>
 8008af8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008afa:	f7ff faa5 	bl	8008048 <__retarget_lock_release_recursive>
 8008afe:	e7e9      	b.n	8008ad4 <_vfiprintf_r+0x4c>
 8008b00:	2300      	movs	r3, #0
 8008b02:	9309      	str	r3, [sp, #36]	; 0x24
 8008b04:	2320      	movs	r3, #32
 8008b06:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008b0a:	f8cd 800c 	str.w	r8, [sp, #12]
 8008b0e:	2330      	movs	r3, #48	; 0x30
 8008b10:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008cd4 <_vfiprintf_r+0x24c>
 8008b14:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008b18:	f04f 0901 	mov.w	r9, #1
 8008b1c:	4623      	mov	r3, r4
 8008b1e:	469a      	mov	sl, r3
 8008b20:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008b24:	b10a      	cbz	r2, 8008b2a <_vfiprintf_r+0xa2>
 8008b26:	2a25      	cmp	r2, #37	; 0x25
 8008b28:	d1f9      	bne.n	8008b1e <_vfiprintf_r+0x96>
 8008b2a:	ebba 0b04 	subs.w	fp, sl, r4
 8008b2e:	d00b      	beq.n	8008b48 <_vfiprintf_r+0xc0>
 8008b30:	465b      	mov	r3, fp
 8008b32:	4622      	mov	r2, r4
 8008b34:	4629      	mov	r1, r5
 8008b36:	4630      	mov	r0, r6
 8008b38:	f7ff ff93 	bl	8008a62 <__sfputs_r>
 8008b3c:	3001      	adds	r0, #1
 8008b3e:	f000 80aa 	beq.w	8008c96 <_vfiprintf_r+0x20e>
 8008b42:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008b44:	445a      	add	r2, fp
 8008b46:	9209      	str	r2, [sp, #36]	; 0x24
 8008b48:	f89a 3000 	ldrb.w	r3, [sl]
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	f000 80a2 	beq.w	8008c96 <_vfiprintf_r+0x20e>
 8008b52:	2300      	movs	r3, #0
 8008b54:	f04f 32ff 	mov.w	r2, #4294967295
 8008b58:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008b5c:	f10a 0a01 	add.w	sl, sl, #1
 8008b60:	9304      	str	r3, [sp, #16]
 8008b62:	9307      	str	r3, [sp, #28]
 8008b64:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008b68:	931a      	str	r3, [sp, #104]	; 0x68
 8008b6a:	4654      	mov	r4, sl
 8008b6c:	2205      	movs	r2, #5
 8008b6e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008b72:	4858      	ldr	r0, [pc, #352]	; (8008cd4 <_vfiprintf_r+0x24c>)
 8008b74:	f7f7 fb5c 	bl	8000230 <memchr>
 8008b78:	9a04      	ldr	r2, [sp, #16]
 8008b7a:	b9d8      	cbnz	r0, 8008bb4 <_vfiprintf_r+0x12c>
 8008b7c:	06d1      	lsls	r1, r2, #27
 8008b7e:	bf44      	itt	mi
 8008b80:	2320      	movmi	r3, #32
 8008b82:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008b86:	0713      	lsls	r3, r2, #28
 8008b88:	bf44      	itt	mi
 8008b8a:	232b      	movmi	r3, #43	; 0x2b
 8008b8c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008b90:	f89a 3000 	ldrb.w	r3, [sl]
 8008b94:	2b2a      	cmp	r3, #42	; 0x2a
 8008b96:	d015      	beq.n	8008bc4 <_vfiprintf_r+0x13c>
 8008b98:	9a07      	ldr	r2, [sp, #28]
 8008b9a:	4654      	mov	r4, sl
 8008b9c:	2000      	movs	r0, #0
 8008b9e:	f04f 0c0a 	mov.w	ip, #10
 8008ba2:	4621      	mov	r1, r4
 8008ba4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008ba8:	3b30      	subs	r3, #48	; 0x30
 8008baa:	2b09      	cmp	r3, #9
 8008bac:	d94e      	bls.n	8008c4c <_vfiprintf_r+0x1c4>
 8008bae:	b1b0      	cbz	r0, 8008bde <_vfiprintf_r+0x156>
 8008bb0:	9207      	str	r2, [sp, #28]
 8008bb2:	e014      	b.n	8008bde <_vfiprintf_r+0x156>
 8008bb4:	eba0 0308 	sub.w	r3, r0, r8
 8008bb8:	fa09 f303 	lsl.w	r3, r9, r3
 8008bbc:	4313      	orrs	r3, r2
 8008bbe:	9304      	str	r3, [sp, #16]
 8008bc0:	46a2      	mov	sl, r4
 8008bc2:	e7d2      	b.n	8008b6a <_vfiprintf_r+0xe2>
 8008bc4:	9b03      	ldr	r3, [sp, #12]
 8008bc6:	1d19      	adds	r1, r3, #4
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	9103      	str	r1, [sp, #12]
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	bfbb      	ittet	lt
 8008bd0:	425b      	neglt	r3, r3
 8008bd2:	f042 0202 	orrlt.w	r2, r2, #2
 8008bd6:	9307      	strge	r3, [sp, #28]
 8008bd8:	9307      	strlt	r3, [sp, #28]
 8008bda:	bfb8      	it	lt
 8008bdc:	9204      	strlt	r2, [sp, #16]
 8008bde:	7823      	ldrb	r3, [r4, #0]
 8008be0:	2b2e      	cmp	r3, #46	; 0x2e
 8008be2:	d10c      	bne.n	8008bfe <_vfiprintf_r+0x176>
 8008be4:	7863      	ldrb	r3, [r4, #1]
 8008be6:	2b2a      	cmp	r3, #42	; 0x2a
 8008be8:	d135      	bne.n	8008c56 <_vfiprintf_r+0x1ce>
 8008bea:	9b03      	ldr	r3, [sp, #12]
 8008bec:	1d1a      	adds	r2, r3, #4
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	9203      	str	r2, [sp, #12]
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	bfb8      	it	lt
 8008bf6:	f04f 33ff 	movlt.w	r3, #4294967295
 8008bfa:	3402      	adds	r4, #2
 8008bfc:	9305      	str	r3, [sp, #20]
 8008bfe:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008ce4 <_vfiprintf_r+0x25c>
 8008c02:	7821      	ldrb	r1, [r4, #0]
 8008c04:	2203      	movs	r2, #3
 8008c06:	4650      	mov	r0, sl
 8008c08:	f7f7 fb12 	bl	8000230 <memchr>
 8008c0c:	b140      	cbz	r0, 8008c20 <_vfiprintf_r+0x198>
 8008c0e:	2340      	movs	r3, #64	; 0x40
 8008c10:	eba0 000a 	sub.w	r0, r0, sl
 8008c14:	fa03 f000 	lsl.w	r0, r3, r0
 8008c18:	9b04      	ldr	r3, [sp, #16]
 8008c1a:	4303      	orrs	r3, r0
 8008c1c:	3401      	adds	r4, #1
 8008c1e:	9304      	str	r3, [sp, #16]
 8008c20:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008c24:	482c      	ldr	r0, [pc, #176]	; (8008cd8 <_vfiprintf_r+0x250>)
 8008c26:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008c2a:	2206      	movs	r2, #6
 8008c2c:	f7f7 fb00 	bl	8000230 <memchr>
 8008c30:	2800      	cmp	r0, #0
 8008c32:	d03f      	beq.n	8008cb4 <_vfiprintf_r+0x22c>
 8008c34:	4b29      	ldr	r3, [pc, #164]	; (8008cdc <_vfiprintf_r+0x254>)
 8008c36:	bb1b      	cbnz	r3, 8008c80 <_vfiprintf_r+0x1f8>
 8008c38:	9b03      	ldr	r3, [sp, #12]
 8008c3a:	3307      	adds	r3, #7
 8008c3c:	f023 0307 	bic.w	r3, r3, #7
 8008c40:	3308      	adds	r3, #8
 8008c42:	9303      	str	r3, [sp, #12]
 8008c44:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008c46:	443b      	add	r3, r7
 8008c48:	9309      	str	r3, [sp, #36]	; 0x24
 8008c4a:	e767      	b.n	8008b1c <_vfiprintf_r+0x94>
 8008c4c:	fb0c 3202 	mla	r2, ip, r2, r3
 8008c50:	460c      	mov	r4, r1
 8008c52:	2001      	movs	r0, #1
 8008c54:	e7a5      	b.n	8008ba2 <_vfiprintf_r+0x11a>
 8008c56:	2300      	movs	r3, #0
 8008c58:	3401      	adds	r4, #1
 8008c5a:	9305      	str	r3, [sp, #20]
 8008c5c:	4619      	mov	r1, r3
 8008c5e:	f04f 0c0a 	mov.w	ip, #10
 8008c62:	4620      	mov	r0, r4
 8008c64:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008c68:	3a30      	subs	r2, #48	; 0x30
 8008c6a:	2a09      	cmp	r2, #9
 8008c6c:	d903      	bls.n	8008c76 <_vfiprintf_r+0x1ee>
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d0c5      	beq.n	8008bfe <_vfiprintf_r+0x176>
 8008c72:	9105      	str	r1, [sp, #20]
 8008c74:	e7c3      	b.n	8008bfe <_vfiprintf_r+0x176>
 8008c76:	fb0c 2101 	mla	r1, ip, r1, r2
 8008c7a:	4604      	mov	r4, r0
 8008c7c:	2301      	movs	r3, #1
 8008c7e:	e7f0      	b.n	8008c62 <_vfiprintf_r+0x1da>
 8008c80:	ab03      	add	r3, sp, #12
 8008c82:	9300      	str	r3, [sp, #0]
 8008c84:	462a      	mov	r2, r5
 8008c86:	4b16      	ldr	r3, [pc, #88]	; (8008ce0 <_vfiprintf_r+0x258>)
 8008c88:	a904      	add	r1, sp, #16
 8008c8a:	4630      	mov	r0, r6
 8008c8c:	f7fd fc8a 	bl	80065a4 <_printf_float>
 8008c90:	4607      	mov	r7, r0
 8008c92:	1c78      	adds	r0, r7, #1
 8008c94:	d1d6      	bne.n	8008c44 <_vfiprintf_r+0x1bc>
 8008c96:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008c98:	07d9      	lsls	r1, r3, #31
 8008c9a:	d405      	bmi.n	8008ca8 <_vfiprintf_r+0x220>
 8008c9c:	89ab      	ldrh	r3, [r5, #12]
 8008c9e:	059a      	lsls	r2, r3, #22
 8008ca0:	d402      	bmi.n	8008ca8 <_vfiprintf_r+0x220>
 8008ca2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008ca4:	f7ff f9d0 	bl	8008048 <__retarget_lock_release_recursive>
 8008ca8:	89ab      	ldrh	r3, [r5, #12]
 8008caa:	065b      	lsls	r3, r3, #25
 8008cac:	f53f af12 	bmi.w	8008ad4 <_vfiprintf_r+0x4c>
 8008cb0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008cb2:	e711      	b.n	8008ad8 <_vfiprintf_r+0x50>
 8008cb4:	ab03      	add	r3, sp, #12
 8008cb6:	9300      	str	r3, [sp, #0]
 8008cb8:	462a      	mov	r2, r5
 8008cba:	4b09      	ldr	r3, [pc, #36]	; (8008ce0 <_vfiprintf_r+0x258>)
 8008cbc:	a904      	add	r1, sp, #16
 8008cbe:	4630      	mov	r0, r6
 8008cc0:	f7fd ff14 	bl	8006aec <_printf_i>
 8008cc4:	e7e4      	b.n	8008c90 <_vfiprintf_r+0x208>
 8008cc6:	bf00      	nop
 8008cc8:	080090e4 	.word	0x080090e4
 8008ccc:	08009104 	.word	0x08009104
 8008cd0:	080090c4 	.word	0x080090c4
 8008cd4:	0800927c 	.word	0x0800927c
 8008cd8:	08009286 	.word	0x08009286
 8008cdc:	080065a5 	.word	0x080065a5
 8008ce0:	08008a63 	.word	0x08008a63
 8008ce4:	08009282 	.word	0x08009282

08008ce8 <_sbrk_r>:
 8008ce8:	b538      	push	{r3, r4, r5, lr}
 8008cea:	4d06      	ldr	r5, [pc, #24]	; (8008d04 <_sbrk_r+0x1c>)
 8008cec:	2300      	movs	r3, #0
 8008cee:	4604      	mov	r4, r0
 8008cf0:	4608      	mov	r0, r1
 8008cf2:	602b      	str	r3, [r5, #0]
 8008cf4:	f7f8 fee8 	bl	8001ac8 <_sbrk>
 8008cf8:	1c43      	adds	r3, r0, #1
 8008cfa:	d102      	bne.n	8008d02 <_sbrk_r+0x1a>
 8008cfc:	682b      	ldr	r3, [r5, #0]
 8008cfe:	b103      	cbz	r3, 8008d02 <_sbrk_r+0x1a>
 8008d00:	6023      	str	r3, [r4, #0]
 8008d02:	bd38      	pop	{r3, r4, r5, pc}
 8008d04:	200003b0 	.word	0x200003b0

08008d08 <__sread>:
 8008d08:	b510      	push	{r4, lr}
 8008d0a:	460c      	mov	r4, r1
 8008d0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d10:	f000 f8e2 	bl	8008ed8 <_read_r>
 8008d14:	2800      	cmp	r0, #0
 8008d16:	bfab      	itete	ge
 8008d18:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008d1a:	89a3      	ldrhlt	r3, [r4, #12]
 8008d1c:	181b      	addge	r3, r3, r0
 8008d1e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008d22:	bfac      	ite	ge
 8008d24:	6563      	strge	r3, [r4, #84]	; 0x54
 8008d26:	81a3      	strhlt	r3, [r4, #12]
 8008d28:	bd10      	pop	{r4, pc}

08008d2a <__swrite>:
 8008d2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d2e:	461f      	mov	r7, r3
 8008d30:	898b      	ldrh	r3, [r1, #12]
 8008d32:	05db      	lsls	r3, r3, #23
 8008d34:	4605      	mov	r5, r0
 8008d36:	460c      	mov	r4, r1
 8008d38:	4616      	mov	r6, r2
 8008d3a:	d505      	bpl.n	8008d48 <__swrite+0x1e>
 8008d3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d40:	2302      	movs	r3, #2
 8008d42:	2200      	movs	r2, #0
 8008d44:	f000 f898 	bl	8008e78 <_lseek_r>
 8008d48:	89a3      	ldrh	r3, [r4, #12]
 8008d4a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008d4e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008d52:	81a3      	strh	r3, [r4, #12]
 8008d54:	4632      	mov	r2, r6
 8008d56:	463b      	mov	r3, r7
 8008d58:	4628      	mov	r0, r5
 8008d5a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008d5e:	f000 b817 	b.w	8008d90 <_write_r>

08008d62 <__sseek>:
 8008d62:	b510      	push	{r4, lr}
 8008d64:	460c      	mov	r4, r1
 8008d66:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d6a:	f000 f885 	bl	8008e78 <_lseek_r>
 8008d6e:	1c43      	adds	r3, r0, #1
 8008d70:	89a3      	ldrh	r3, [r4, #12]
 8008d72:	bf15      	itete	ne
 8008d74:	6560      	strne	r0, [r4, #84]	; 0x54
 8008d76:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008d7a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008d7e:	81a3      	strheq	r3, [r4, #12]
 8008d80:	bf18      	it	ne
 8008d82:	81a3      	strhne	r3, [r4, #12]
 8008d84:	bd10      	pop	{r4, pc}

08008d86 <__sclose>:
 8008d86:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d8a:	f000 b831 	b.w	8008df0 <_close_r>
	...

08008d90 <_write_r>:
 8008d90:	b538      	push	{r3, r4, r5, lr}
 8008d92:	4d07      	ldr	r5, [pc, #28]	; (8008db0 <_write_r+0x20>)
 8008d94:	4604      	mov	r4, r0
 8008d96:	4608      	mov	r0, r1
 8008d98:	4611      	mov	r1, r2
 8008d9a:	2200      	movs	r2, #0
 8008d9c:	602a      	str	r2, [r5, #0]
 8008d9e:	461a      	mov	r2, r3
 8008da0:	f7f8 f8fc 	bl	8000f9c <_write>
 8008da4:	1c43      	adds	r3, r0, #1
 8008da6:	d102      	bne.n	8008dae <_write_r+0x1e>
 8008da8:	682b      	ldr	r3, [r5, #0]
 8008daa:	b103      	cbz	r3, 8008dae <_write_r+0x1e>
 8008dac:	6023      	str	r3, [r4, #0]
 8008dae:	bd38      	pop	{r3, r4, r5, pc}
 8008db0:	200003b0 	.word	0x200003b0

08008db4 <__assert_func>:
 8008db4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008db6:	4614      	mov	r4, r2
 8008db8:	461a      	mov	r2, r3
 8008dba:	4b09      	ldr	r3, [pc, #36]	; (8008de0 <__assert_func+0x2c>)
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	4605      	mov	r5, r0
 8008dc0:	68d8      	ldr	r0, [r3, #12]
 8008dc2:	b14c      	cbz	r4, 8008dd8 <__assert_func+0x24>
 8008dc4:	4b07      	ldr	r3, [pc, #28]	; (8008de4 <__assert_func+0x30>)
 8008dc6:	9100      	str	r1, [sp, #0]
 8008dc8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008dcc:	4906      	ldr	r1, [pc, #24]	; (8008de8 <__assert_func+0x34>)
 8008dce:	462b      	mov	r3, r5
 8008dd0:	f000 f81e 	bl	8008e10 <fiprintf>
 8008dd4:	f000 f89f 	bl	8008f16 <abort>
 8008dd8:	4b04      	ldr	r3, [pc, #16]	; (8008dec <__assert_func+0x38>)
 8008dda:	461c      	mov	r4, r3
 8008ddc:	e7f3      	b.n	8008dc6 <__assert_func+0x12>
 8008dde:	bf00      	nop
 8008de0:	2000000c 	.word	0x2000000c
 8008de4:	0800928d 	.word	0x0800928d
 8008de8:	0800929a 	.word	0x0800929a
 8008dec:	080092c8 	.word	0x080092c8

08008df0 <_close_r>:
 8008df0:	b538      	push	{r3, r4, r5, lr}
 8008df2:	4d06      	ldr	r5, [pc, #24]	; (8008e0c <_close_r+0x1c>)
 8008df4:	2300      	movs	r3, #0
 8008df6:	4604      	mov	r4, r0
 8008df8:	4608      	mov	r0, r1
 8008dfa:	602b      	str	r3, [r5, #0]
 8008dfc:	f7f8 fe2f 	bl	8001a5e <_close>
 8008e00:	1c43      	adds	r3, r0, #1
 8008e02:	d102      	bne.n	8008e0a <_close_r+0x1a>
 8008e04:	682b      	ldr	r3, [r5, #0]
 8008e06:	b103      	cbz	r3, 8008e0a <_close_r+0x1a>
 8008e08:	6023      	str	r3, [r4, #0]
 8008e0a:	bd38      	pop	{r3, r4, r5, pc}
 8008e0c:	200003b0 	.word	0x200003b0

08008e10 <fiprintf>:
 8008e10:	b40e      	push	{r1, r2, r3}
 8008e12:	b503      	push	{r0, r1, lr}
 8008e14:	4601      	mov	r1, r0
 8008e16:	ab03      	add	r3, sp, #12
 8008e18:	4805      	ldr	r0, [pc, #20]	; (8008e30 <fiprintf+0x20>)
 8008e1a:	f853 2b04 	ldr.w	r2, [r3], #4
 8008e1e:	6800      	ldr	r0, [r0, #0]
 8008e20:	9301      	str	r3, [sp, #4]
 8008e22:	f7ff fe31 	bl	8008a88 <_vfiprintf_r>
 8008e26:	b002      	add	sp, #8
 8008e28:	f85d eb04 	ldr.w	lr, [sp], #4
 8008e2c:	b003      	add	sp, #12
 8008e2e:	4770      	bx	lr
 8008e30:	2000000c 	.word	0x2000000c

08008e34 <_fstat_r>:
 8008e34:	b538      	push	{r3, r4, r5, lr}
 8008e36:	4d07      	ldr	r5, [pc, #28]	; (8008e54 <_fstat_r+0x20>)
 8008e38:	2300      	movs	r3, #0
 8008e3a:	4604      	mov	r4, r0
 8008e3c:	4608      	mov	r0, r1
 8008e3e:	4611      	mov	r1, r2
 8008e40:	602b      	str	r3, [r5, #0]
 8008e42:	f7f8 fe18 	bl	8001a76 <_fstat>
 8008e46:	1c43      	adds	r3, r0, #1
 8008e48:	d102      	bne.n	8008e50 <_fstat_r+0x1c>
 8008e4a:	682b      	ldr	r3, [r5, #0]
 8008e4c:	b103      	cbz	r3, 8008e50 <_fstat_r+0x1c>
 8008e4e:	6023      	str	r3, [r4, #0]
 8008e50:	bd38      	pop	{r3, r4, r5, pc}
 8008e52:	bf00      	nop
 8008e54:	200003b0 	.word	0x200003b0

08008e58 <_isatty_r>:
 8008e58:	b538      	push	{r3, r4, r5, lr}
 8008e5a:	4d06      	ldr	r5, [pc, #24]	; (8008e74 <_isatty_r+0x1c>)
 8008e5c:	2300      	movs	r3, #0
 8008e5e:	4604      	mov	r4, r0
 8008e60:	4608      	mov	r0, r1
 8008e62:	602b      	str	r3, [r5, #0]
 8008e64:	f7f8 fe17 	bl	8001a96 <_isatty>
 8008e68:	1c43      	adds	r3, r0, #1
 8008e6a:	d102      	bne.n	8008e72 <_isatty_r+0x1a>
 8008e6c:	682b      	ldr	r3, [r5, #0]
 8008e6e:	b103      	cbz	r3, 8008e72 <_isatty_r+0x1a>
 8008e70:	6023      	str	r3, [r4, #0]
 8008e72:	bd38      	pop	{r3, r4, r5, pc}
 8008e74:	200003b0 	.word	0x200003b0

08008e78 <_lseek_r>:
 8008e78:	b538      	push	{r3, r4, r5, lr}
 8008e7a:	4d07      	ldr	r5, [pc, #28]	; (8008e98 <_lseek_r+0x20>)
 8008e7c:	4604      	mov	r4, r0
 8008e7e:	4608      	mov	r0, r1
 8008e80:	4611      	mov	r1, r2
 8008e82:	2200      	movs	r2, #0
 8008e84:	602a      	str	r2, [r5, #0]
 8008e86:	461a      	mov	r2, r3
 8008e88:	f7f8 fe10 	bl	8001aac <_lseek>
 8008e8c:	1c43      	adds	r3, r0, #1
 8008e8e:	d102      	bne.n	8008e96 <_lseek_r+0x1e>
 8008e90:	682b      	ldr	r3, [r5, #0]
 8008e92:	b103      	cbz	r3, 8008e96 <_lseek_r+0x1e>
 8008e94:	6023      	str	r3, [r4, #0]
 8008e96:	bd38      	pop	{r3, r4, r5, pc}
 8008e98:	200003b0 	.word	0x200003b0

08008e9c <__ascii_mbtowc>:
 8008e9c:	b082      	sub	sp, #8
 8008e9e:	b901      	cbnz	r1, 8008ea2 <__ascii_mbtowc+0x6>
 8008ea0:	a901      	add	r1, sp, #4
 8008ea2:	b142      	cbz	r2, 8008eb6 <__ascii_mbtowc+0x1a>
 8008ea4:	b14b      	cbz	r3, 8008eba <__ascii_mbtowc+0x1e>
 8008ea6:	7813      	ldrb	r3, [r2, #0]
 8008ea8:	600b      	str	r3, [r1, #0]
 8008eaa:	7812      	ldrb	r2, [r2, #0]
 8008eac:	1e10      	subs	r0, r2, #0
 8008eae:	bf18      	it	ne
 8008eb0:	2001      	movne	r0, #1
 8008eb2:	b002      	add	sp, #8
 8008eb4:	4770      	bx	lr
 8008eb6:	4610      	mov	r0, r2
 8008eb8:	e7fb      	b.n	8008eb2 <__ascii_mbtowc+0x16>
 8008eba:	f06f 0001 	mvn.w	r0, #1
 8008ebe:	e7f8      	b.n	8008eb2 <__ascii_mbtowc+0x16>

08008ec0 <__malloc_lock>:
 8008ec0:	4801      	ldr	r0, [pc, #4]	; (8008ec8 <__malloc_lock+0x8>)
 8008ec2:	f7ff b8c0 	b.w	8008046 <__retarget_lock_acquire_recursive>
 8008ec6:	bf00      	nop
 8008ec8:	200003a4 	.word	0x200003a4

08008ecc <__malloc_unlock>:
 8008ecc:	4801      	ldr	r0, [pc, #4]	; (8008ed4 <__malloc_unlock+0x8>)
 8008ece:	f7ff b8bb 	b.w	8008048 <__retarget_lock_release_recursive>
 8008ed2:	bf00      	nop
 8008ed4:	200003a4 	.word	0x200003a4

08008ed8 <_read_r>:
 8008ed8:	b538      	push	{r3, r4, r5, lr}
 8008eda:	4d07      	ldr	r5, [pc, #28]	; (8008ef8 <_read_r+0x20>)
 8008edc:	4604      	mov	r4, r0
 8008ede:	4608      	mov	r0, r1
 8008ee0:	4611      	mov	r1, r2
 8008ee2:	2200      	movs	r2, #0
 8008ee4:	602a      	str	r2, [r5, #0]
 8008ee6:	461a      	mov	r2, r3
 8008ee8:	f7f8 fd9c 	bl	8001a24 <_read>
 8008eec:	1c43      	adds	r3, r0, #1
 8008eee:	d102      	bne.n	8008ef6 <_read_r+0x1e>
 8008ef0:	682b      	ldr	r3, [r5, #0]
 8008ef2:	b103      	cbz	r3, 8008ef6 <_read_r+0x1e>
 8008ef4:	6023      	str	r3, [r4, #0]
 8008ef6:	bd38      	pop	{r3, r4, r5, pc}
 8008ef8:	200003b0 	.word	0x200003b0

08008efc <__ascii_wctomb>:
 8008efc:	b149      	cbz	r1, 8008f12 <__ascii_wctomb+0x16>
 8008efe:	2aff      	cmp	r2, #255	; 0xff
 8008f00:	bf85      	ittet	hi
 8008f02:	238a      	movhi	r3, #138	; 0x8a
 8008f04:	6003      	strhi	r3, [r0, #0]
 8008f06:	700a      	strbls	r2, [r1, #0]
 8008f08:	f04f 30ff 	movhi.w	r0, #4294967295
 8008f0c:	bf98      	it	ls
 8008f0e:	2001      	movls	r0, #1
 8008f10:	4770      	bx	lr
 8008f12:	4608      	mov	r0, r1
 8008f14:	4770      	bx	lr

08008f16 <abort>:
 8008f16:	b508      	push	{r3, lr}
 8008f18:	2006      	movs	r0, #6
 8008f1a:	f000 f82b 	bl	8008f74 <raise>
 8008f1e:	2001      	movs	r0, #1
 8008f20:	f7f8 fd76 	bl	8001a10 <_exit>

08008f24 <_raise_r>:
 8008f24:	291f      	cmp	r1, #31
 8008f26:	b538      	push	{r3, r4, r5, lr}
 8008f28:	4604      	mov	r4, r0
 8008f2a:	460d      	mov	r5, r1
 8008f2c:	d904      	bls.n	8008f38 <_raise_r+0x14>
 8008f2e:	2316      	movs	r3, #22
 8008f30:	6003      	str	r3, [r0, #0]
 8008f32:	f04f 30ff 	mov.w	r0, #4294967295
 8008f36:	bd38      	pop	{r3, r4, r5, pc}
 8008f38:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008f3a:	b112      	cbz	r2, 8008f42 <_raise_r+0x1e>
 8008f3c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008f40:	b94b      	cbnz	r3, 8008f56 <_raise_r+0x32>
 8008f42:	4620      	mov	r0, r4
 8008f44:	f000 f830 	bl	8008fa8 <_getpid_r>
 8008f48:	462a      	mov	r2, r5
 8008f4a:	4601      	mov	r1, r0
 8008f4c:	4620      	mov	r0, r4
 8008f4e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008f52:	f000 b817 	b.w	8008f84 <_kill_r>
 8008f56:	2b01      	cmp	r3, #1
 8008f58:	d00a      	beq.n	8008f70 <_raise_r+0x4c>
 8008f5a:	1c59      	adds	r1, r3, #1
 8008f5c:	d103      	bne.n	8008f66 <_raise_r+0x42>
 8008f5e:	2316      	movs	r3, #22
 8008f60:	6003      	str	r3, [r0, #0]
 8008f62:	2001      	movs	r0, #1
 8008f64:	e7e7      	b.n	8008f36 <_raise_r+0x12>
 8008f66:	2400      	movs	r4, #0
 8008f68:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008f6c:	4628      	mov	r0, r5
 8008f6e:	4798      	blx	r3
 8008f70:	2000      	movs	r0, #0
 8008f72:	e7e0      	b.n	8008f36 <_raise_r+0x12>

08008f74 <raise>:
 8008f74:	4b02      	ldr	r3, [pc, #8]	; (8008f80 <raise+0xc>)
 8008f76:	4601      	mov	r1, r0
 8008f78:	6818      	ldr	r0, [r3, #0]
 8008f7a:	f7ff bfd3 	b.w	8008f24 <_raise_r>
 8008f7e:	bf00      	nop
 8008f80:	2000000c 	.word	0x2000000c

08008f84 <_kill_r>:
 8008f84:	b538      	push	{r3, r4, r5, lr}
 8008f86:	4d07      	ldr	r5, [pc, #28]	; (8008fa4 <_kill_r+0x20>)
 8008f88:	2300      	movs	r3, #0
 8008f8a:	4604      	mov	r4, r0
 8008f8c:	4608      	mov	r0, r1
 8008f8e:	4611      	mov	r1, r2
 8008f90:	602b      	str	r3, [r5, #0]
 8008f92:	f7f8 fd2d 	bl	80019f0 <_kill>
 8008f96:	1c43      	adds	r3, r0, #1
 8008f98:	d102      	bne.n	8008fa0 <_kill_r+0x1c>
 8008f9a:	682b      	ldr	r3, [r5, #0]
 8008f9c:	b103      	cbz	r3, 8008fa0 <_kill_r+0x1c>
 8008f9e:	6023      	str	r3, [r4, #0]
 8008fa0:	bd38      	pop	{r3, r4, r5, pc}
 8008fa2:	bf00      	nop
 8008fa4:	200003b0 	.word	0x200003b0

08008fa8 <_getpid_r>:
 8008fa8:	f7f8 bd1a 	b.w	80019e0 <_getpid>

08008fac <_init>:
 8008fac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008fae:	bf00      	nop
 8008fb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008fb2:	bc08      	pop	{r3}
 8008fb4:	469e      	mov	lr, r3
 8008fb6:	4770      	bx	lr

08008fb8 <_fini>:
 8008fb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008fba:	bf00      	nop
 8008fbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008fbe:	bc08      	pop	{r3}
 8008fc0:	469e      	mov	lr, r3
 8008fc2:	4770      	bx	lr
